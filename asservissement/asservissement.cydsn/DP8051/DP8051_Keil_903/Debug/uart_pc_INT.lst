C51 COMPILER V9.03   UART_PC_INT                                                           05/13/2012 22:25:53 PAGE 1   


C51 COMPILER V9.03, COMPILATION OF MODULE UART_PC_INT
OBJECT MODULE PLACED IN .\DP8051\DP8051_Keil_903\Debug\uart_pc_INT.obj
COMPILER INVOKED BY: C:\Program Files\Cypress\PSoC Creator\2.0\PSoC Creator\import\keil\pk51\9.03\C51\BIN\c51.exe .\Gene
                    -rated_Source\PSoC3\uart_pc_INT.c NOIV LARGE MODDP2 OMF2 VB(1) PR(.\DP8051\DP8051_Keil_903\Debug\uart_pc_INT.lst) CD DB N
                    -OIP OT(2,SIZE) INCDIR(Generated_Source\PSoC3) OJ(.\DP8051\DP8051_Keil_903\Debug\uart_pc_INT.obj)

line level    source

   1          /*******************************************************************************
   2          * File Name: uart_pc_INT.c
   3          * Version 2.0
   4          *
   5          * Description:
   6          *  This file provides all Interrupt Service functionality of the UART component
   7          *
   8          * Note:
   9          *  Any unusual or non-standard behavior should be noted here. Other-
  10          *  wise, this section should remain blank.
  11          *
  12          *******************************************************************************
  13          * Copyright 2008-2010, Cypress Semiconductor Corporation.  All rights reserved.
  14          * You may use this file only in accordance with the license, terms, conditions,
  15          * disclaimers, and limitations in the end user license agreement accompanying
  16          * the software package with which this file was provided.
  17          ********************************************************************************/
  18          
  19          #include "uart_pc.h"
  20          
  21          
  22          /***************************************
  23          * Custom Declratations
  24          ***************************************/
  25          /* `#START CUSTOM_DECLARATIONS` Place your declaration here */
  26          
  27          /* `#END` */
  28          
  29          #if( (uart_pc_RX_ENABLED || uart_pc_HD_ENABLED) && \
  30               (uart_pc_RXBUFFERSIZE > uart_pc_FIFO_LENGTH))
  31          
  32              extern volatile uint8 uart_pc_rxBuffer[];
  33              extern volatile uint8 uart_pc_rxBufferRead;
  34              extern volatile uint8 uart_pc_rxBufferWrite;
  35              extern volatile uint8 uart_pc_rxBufferLoopDetect;
  36              extern volatile uint8 uart_pc_rxBufferOverflow;
  37          
  38          
  39              /*******************************************************************************
  40              * Function Name: uart_pc_RXISR
  41              ********************************************************************************
  42              *
  43              * Summary:
  44              *  Interrupt Service Routine for RX portion of the UART
  45              *
  46              * Parameters:
  47              *  None.
  48              *
  49              * Return:
  50              *  None.
  51              *
  52              * Global Variables:
  53              *  uart_pc_rxBuffer - RAM buffer pointer for save received data.
C51 COMPILER V9.03   UART_PC_INT                                                           05/13/2012 22:25:53 PAGE 2   

  54              *  uart_pc_rxBufferWrite - cyclic index for write to rxBuffer, 
  55              *     increments after each byte saved to buffer.
  56              *  uart_pc_rxBufferRead - cyclic index for read from rxBuffer, 
  57              *     checked to detect overflow condition.
  58              *  uart_pc_rxBufferOverflow - software overflow flag. Set to one
  59              *     when uart_pc_rxBufferWrite index overtakes 
  60              *     uart_pc_rxBufferRead index.
  61              *  uart_pc_rxBufferLoopDetect - additional variable to detect overflow.
  62              *     Set to one when uart_pc_rxBufferWrite is equal to 
  63              *    uart_pc_rxBufferRead
  64              *
  65              *******************************************************************************/
  66              CY_ISR(uart_pc_RXISR)
  67              {
  68   1              uint8 readData;
  69   1      
  70   1              /* User code required at start of ISR */
  71   1              /* `#START uart_pc_RXISR_START` */
  72   1      
  73   1              /* `#END` */
  74   1      
  75   1              readData = uart_pc_RXSTATUS_REG;
  76   1      
  77   1              if(readData & (uart_pc_RX_STS_BREAK | uart_pc_RX_STS_PAR_ERROR | \
  78   1                             uart_pc_RX_STS_STOP_ERROR | uart_pc_RX_STS_OVERRUN))
  79   1              {
  80   2                  /* ERROR handling. */
  81   2                  /* `#START uart_pc_RXISR_ERROR` */
  82   2      
  83   2                  /* `#END` */
  84   2              }
  85   1      
  86   1              while(readData & uart_pc_RX_STS_FIFO_NOTEMPTY)
  87   1              {
  88   2                  /* Check pointer. */
  89   2                  if(uart_pc_rxBufferWrite >= uart_pc_RXBUFFERSIZE)
  90   2                  {
  91   3                      uart_pc_rxBufferWrite = 0u;
  92   3                      if(uart_pc_rxBufferWrite == uart_pc_rxBufferRead)
  93   3                      {   /* Set Software Buffer status Overflow */
  94   4                          uart_pc_rxBufferOverflow = 1u;
  95   4                      }
  96   3                  }
  97   2      
  98   2                  uart_pc_rxBuffer[uart_pc_rxBufferWrite] = uart_pc_RXDATA_REG;
  99   2      
 100   2                  if(uart_pc_rxBufferLoopDetect)
 101   2                  {   /* Set Software Buffer status Overflow */
 102   3                      uart_pc_rxBufferOverflow = 1u;
 103   3                  }
 104   2                  /* Set next pointer. */
 105   2                  uart_pc_rxBufferWrite++;
 106   2      
 107   2                  if(uart_pc_rxBufferWrite == uart_pc_rxBufferRead)
 108   2                  {
 109   3                      uart_pc_rxBufferLoopDetect = 1u;
 110   3                  }
 111   2      
 112   2                  /* Check again if there is data. */
 113   2                  readData = uart_pc_RXSTATUS_REG;
 114   2              }
 115   1      
C51 COMPILER V9.03   UART_PC_INT                                                           05/13/2012 22:25:53 PAGE 3   

 116   1              /* User code required at end of ISR (Optional) */
 117   1              /* `#START uart_pc_RXISR_END` */
 118   1      
 119   1              /* `#END` */
 120   1      
 121   1              /* PSoC3 ES1, ES2 RTC ISR PATCH  */
 122   1              #if(uart_pc_PSOC3_ES2 && (uart_pc_RXInternalInterrupt__ES2_PATCH))
                          uart_pc_ISR_PATCH();
                      #endif /* End uart_pc_PSOC3_ES2*/
 125   1          }
 126          
 127          #endif /* End uart_pc_RX_ENABLED && (uart_pc_RXBUFFERSIZE > uart_pc_FIFO_LENGTH) */
 128          
 129          
 130          #if(uart_pc_TX_ENABLED && (uart_pc_TXBUFFERSIZE > uart_pc_FIFO_LENGTH))
              
                  extern volatile uint8 uart_pc_txBuffer[];
                  extern volatile uint8 uart_pc_txBufferRead;
                  extern uint8 uart_pc_txBufferWrite;
              
              
                  /*******************************************************************************
                  * Function Name: uart_pc_TXISR
                  ********************************************************************************
                  *
                  * Summary:
                  * Interrupt Service Routine for the TX portion of the UART
                  *
                  * Parameters:
                  *  None.
                  *
                  * Return:
                  *  None.
                  *
                  * Global Variables:
                  *  uart_pc_txBuffer - RAM buffer pointer for transmit data from.
                  *  uart_pc_txBufferRead - cyclic index for read and transmit data 
                  *     from txBuffer, increments after each transmited byte.
                  *  uart_pc_rxBufferWrite - cyclic index for write to txBuffer, 
                  *     checked to detect available for transmission bytes.
                  *
                  *******************************************************************************/
                  CY_ISR(uart_pc_TXISR)
                  {
              
                      /* User code required at start of ISR */
                      /* `#START uart_pc_TXISR_START` */
              
                      /* `#END` */
              
                      while((uart_pc_txBufferRead != uart_pc_txBufferWrite) && \
                           !(uart_pc_TXSTATUS_REG & uart_pc_TX_STS_FIFO_FULL))
                      {
                          /* Check pointer. */
                          if(uart_pc_txBufferRead >= uart_pc_TXBUFFERSIZE)
                          {
                              uart_pc_txBufferRead = 0u;
                          }
              
                          uart_pc_TXDATA_REG = uart_pc_txBuffer[uart_pc_txBufferRead];
              
                          /* Set next pointer. */
C51 COMPILER V9.03   UART_PC_INT                                                           05/13/2012 22:25:53 PAGE 4   

                          uart_pc_txBufferRead++;
                      }
              
                      /* User code required at end of ISR (Optional) */
                      /* `#START uart_pc_TXISR_END` */
              
                      /* `#END` */
                      
                      /* PSoC3 ES1, ES2 RTC ISR PATCH  */
                      #if(uart_pc_PSOC3_ES2 && (uart_pc_TXInternalInterrupt__ES2_PATCH))
                          uart_pc_ISR_PATCH();
                      #endif /* End uart_pc_PSOC3_ES2*/
                  }
              
              #endif /* End uart_pc_TX_ENABLED && (uart_pc_TXBUFFERSIZE > uart_pc_FIFO_LENGTH) */
 193          
 194          
 195          /* [] END OF FILE */
C51 COMPILER V9.03   UART_PC_INT                                                           05/13/2012 22:25:53 PAGE 5   

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION uart_pc_RXISR (BEGIN)
0000 C0E0              PUSH    ACC
0002 C083              PUSH    DPH
0004 C082              PUSH    DPL
0006 C085              PUSH    DPH1
0008 C084              PUSH    DPL1
000A C086              PUSH    DPS
000C 758600            MOV     DPS,#00H
000F C000        E     PUSH    ?C?XPAGE1SFR
0011 750000      E     MOV     ?C?XPAGE1SFR,#?C?XPAGE1RST
0014 C0D0              PUSH    PSW
0016 75D000            MOV     PSW,#00H
0019 C006              PUSH    AR6
001B C007              PUSH    AR7
                                           ; SOURCE LINE # 66
                                           ; SOURCE LINE # 75
001D 906465            MOV     DPTR,#06465H
0020 E0                MOVX    A,@DPTR
0021 FF                MOV     R7,A
0022 900000      R     MOV     DPTR,#readData
0025 EF                MOV     A,R7
0026 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 77
                                           ; SOURCE LINE # 79
                                           ; SOURCE LINE # 84
0027         ?C0002:
                                           ; SOURCE LINE # 86
0027 900000      R     MOV     DPTR,#readData
002A E0                MOVX    A,@DPTR
002B FF                MOV     R7,A
002C EF                MOV     A,R7
002D 30E56E            JNB     ACC.5,?C0008
                                           ; SOURCE LINE # 87
                                           ; SOURCE LINE # 89
0030 900000      E     MOV     DPTR,#uart_pc_rxBufferWrite
0033 E0                MOVX    A,@DPTR
0034 FF                MOV     R7,A
0035 EF                MOV     A,R7
0036 C3                CLR     C
0037 9432              SUBB    A,#032H
0039 4019              JC      ?C0004
                                           ; SOURCE LINE # 90
                                           ; SOURCE LINE # 91
003B 900000      E     MOV     DPTR,#uart_pc_rxBufferWrite
003E E4                CLR     A
003F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 92
0040 900000      E     MOV     DPTR,#uart_pc_rxBufferRead
0043 E0                MOVX    A,@DPTR
0044 FF                MOV     R7,A
0045 900000      E     MOV     DPTR,#uart_pc_rxBufferWrite
0048 E0                MOVX    A,@DPTR
0049 FE                MOV     R6,A
004A EE                MOV     A,R6
004B B50706            CJNE    A,AR7,?C0004
                                           ; SOURCE LINE # 93
                                           ; SOURCE LINE # 94
004E 900000      E     MOV     DPTR,#uart_pc_rxBufferOverflow
0051 7401              MOV     A,#01H
C51 COMPILER V9.03   UART_PC_INT                                                           05/13/2012 22:25:53 PAGE 6   

0053 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 95
                                           ; SOURCE LINE # 96
0054         ?C0004:
                                           ; SOURCE LINE # 98
0054 906444            MOV     DPTR,#06444H
0057 E0                MOVX    A,@DPTR
0058 FF                MOV     R7,A
0059 900000      E     MOV     DPTR,#uart_pc_rxBufferWrite
005C E0                MOVX    A,@DPTR
005D FE                MOV     R6,A
005E 7400        E     MOV     A,#LOW uart_pc_rxBuffer
0060 2E                ADD     A,R6
0061 F582              MOV     DPL,A
0063 E4                CLR     A
0064 3400        E     ADDC    A,#HIGH uart_pc_rxBuffer
0066 F583              MOV     DPH,A
0068 EF                MOV     A,R7
0069 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 100
006A 900000      E     MOV     DPTR,#uart_pc_rxBufferLoopDetect
006D E0                MOVX    A,@DPTR
006E FF                MOV     R7,A
006F EF                MOV     A,R7
0070 6006              JZ      ?C0006
                                           ; SOURCE LINE # 101
                                           ; SOURCE LINE # 102
0072 900000      E     MOV     DPTR,#uart_pc_rxBufferOverflow
0075 7401              MOV     A,#01H
0077 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 103
0078         ?C0006:
                                           ; SOURCE LINE # 105
0078 900000      E     MOV     DPTR,#uart_pc_rxBufferWrite
007B E0                MOVX    A,@DPTR
007C 04                INC     A
007D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 107
007E 900000      E     MOV     DPTR,#uart_pc_rxBufferRead
0081 E0                MOVX    A,@DPTR
0082 FF                MOV     R7,A
0083 900000      E     MOV     DPTR,#uart_pc_rxBufferWrite
0086 E0                MOVX    A,@DPTR
0087 FE                MOV     R6,A
0088 EE                MOV     A,R6
0089 B50706            CJNE    A,AR7,?C0007
                                           ; SOURCE LINE # 108
                                           ; SOURCE LINE # 109
008C 900000      E     MOV     DPTR,#uart_pc_rxBufferLoopDetect
008F 7401              MOV     A,#01H
0091 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 110
0092         ?C0007:
                                           ; SOURCE LINE # 113
0092 906465            MOV     DPTR,#06465H
0095 E0                MOVX    A,@DPTR
0096 FF                MOV     R7,A
0097 900000      R     MOV     DPTR,#readData
009A EF                MOV     A,R7
009B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 114
009C 8089              SJMP    ?C0002
C51 COMPILER V9.03   UART_PC_INT                                                           05/13/2012 22:25:53 PAGE 7   

                                           ; SOURCE LINE # 125
009E         ?C0008:
009E D007              POP     AR7
00A0 D006              POP     AR6
00A2 D0D0              POP     PSW
00A4 D000        E     POP     ?C?XPAGE1SFR
00A6 D086              POP     DPS
00A8 D084              POP     DPL1
00AA D085              POP     DPH1
00AC D082              POP     DPL
00AE D083              POP     DPH
00B0 D0E0              POP     ACC
00B2 32                RETI    
             ; FUNCTION uart_pc_RXISR (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    179    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----       1
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
