C51 COMPILER V9.03   CYLIB                                                                 05/13/2012 22:25:57 PAGE 1   


C51 COMPILER V9.03, COMPILATION OF MODULE CYLIB
OBJECT MODULE PLACED IN .\DP8051\DP8051_Keil_903\Debug\CyLib.obj
COMPILER INVOKED BY: C:\Program Files\Cypress\PSoC Creator\2.0\PSoC Creator\import\keil\pk51\9.03\C51\BIN\c51.exe .\Gene
                    -rated_Source\PSoC3\CyLib.c NOIV LARGE MODDP2 OMF2 VB(1) PR(.\DP8051\DP8051_Keil_903\Debug\CyLib.lst) CD DB NOIP OT(2,SIZ
                    -E) INCDIR(Generated_Source\PSoC3) OJ(.\DP8051\DP8051_Keil_903\Debug\CyLib.obj)

line level    source

   1          /*******************************************************************************
   2          * File Name: CyLib.c
   3          * Version 2.40
   4          *
   5          *  Description:
   6          *
   7          *  Note:
   8          *   Documentation of the API's in this file is located in the
   9          *   System Reference Guide provided with PSoC Creator.
  10          *
  11          *******************************************************************************
  12          * Copyright 2008-2011, Cypress Semiconductor Corporation.  All rights reserved.
  13          * You may use this file only in accordance with the license, terms, conditions,
  14          * disclaimers, and limitations in the end user license agreement accompanying
  15          * the software package with which this file was provided.
  16          ********************************************************************************/
  17          
  18          #include <CyLib.h>
  19          
  20          
  21          uint8 CYXDATA CyResetStatus;
  22          
  23          /* CYLIB CLOCK funcs begin*/
  24          
  25          /*******************************************************************************
  26          * Function Name: CyPLL_OUT_Start
  27          ********************************************************************************
  28          *
  29          * Summary:
  30          *   Enables the PLL.  Optionally waits for it to become stable.
  31          *   Waits at least 250us or until it is detected that the PLL is stable.
  32          *
  33          * Parameters:
  34          *   wait:
  35          *    0: Return immediately after configuration
  36          *    1: Wait for PLL lock or timeout.
  37          *
  38          * Return:
  39          *   Status
  40          *     CYRET_SUCCESS - Completed successfully
  41          *    CYRET_TIMEOUT - Timeout occurred without detecting a stable clock.  
  42          *     If the input source of the clock is jittery, then the lock indication 
  43          *     may not occur.  However, after the timeout has expired the generated PLL 
  44          *     clock can still be used..
  45          *
  46          *******************************************************************************/
  47          cystatus CyPLL_OUT_Start(uint8 wait) 
  48          {
  49   1          cystatus status = CYRET_SUCCESS;
  50   1          uint8 pm_tw_cfg2_state;
  51   1          uint8 pm_tw_cfg0_state;
  52   1          uint8 ilo_clock_state;
  53   1          
C51 COMPILER V9.03   CYLIB                                                                 05/13/2012 22:25:57 PAGE 2   

  54   1          FASTCLK_PLL_CFG0 |= PLL_CONTROL_ENABLE;
  55   1          
  56   1          /*Non-zero wait value*/
  57   1          if (wait != 0) 
  58   1          {
  59   2              /*Need to turn on the 100KHz ILO if it happens to not already be running.*/
  60   2              ilo_clock_state = SLOWCLK_ILO_CR0;
  61   2              if(!(ilo_clock_state & ILO_CONTROL_100KHZ_ON))
  62   2              {
  63   3                  CyILO_Start100K();
  64   3              }
  65   2              
  66   2              /*Use ILO 100Khz*/
  67   2              pm_tw_cfg2_state = PM_TW_CFG2;
  68   2              pm_tw_cfg0_state = PM_TW_CFG0;
  69   2              
  70   2              /* FTW_EN (bit 0) must be clear to change the period*/
  71   2              PM_TW_CFG2 &= FTW_CLEAR_FTW_BITS;
  72   2              
  73   2              /* Set the FTW interval of 25 100KHz ILO clocks
  74   2              Should result in status getting set at a (100/25)KHz rate*/
  75   2              PM_TW_CFG0 =  25-1;
  76   2              /* Enable FTW, but not the interrupt*/
  77   2              PM_TW_CFG2 = FTW_ENABLE;        
  78   2              
  79   2              status = CYRET_TIMEOUT;
  80   2              /*check the CyPmReadStatus() return value, 0th bit is ftw*/
  81   2              while (CyPmReadStatus(1) == 0)
  82   2              {
  83   3                  /* Wait for the interrupt status*/
  84   3                  if(FASTCLK_PLL_SR & PLL_STATUS_LOCK)
  85   3                  {
  86   4                      if(FASTCLK_PLL_SR & PLL_STATUS_LOCK)
  87   4                      {
  88   5                          /*A stable clock.                    */
  89   5                          status = CYRET_SUCCESS;
  90   5                          break;
  91   5                      }
  92   4                  }
  93   3              }
  94   2              /*reset the clock */
  95   2              if(!(ilo_clock_state & ILO_CONTROL_100KHZ_ON))
  96   2              {
  97   3                  CyILO_Stop100K();
  98   3              }
  99   2      
 100   2              /*restore the FTW*/
 101   2              PM_TW_CFG0 = pm_tw_cfg0_state;
 102   2              PM_TW_CFG2 = pm_tw_cfg2_state;
 103   2          }
 104   1          return status;
 105   1      }
 106          
 107          
 108          /*******************************************************************************
 109          * Function Name: CyPLL_OUT_Stop
 110          ********************************************************************************
 111          * Summary:
 112          *   Disables the PLL.
 113          *
 114          *
 115          * Parameters:
C51 COMPILER V9.03   CYLIB                                                                 05/13/2012 22:25:57 PAGE 3   

 116          *   void.
 117          *
 118          *
 119          * Return:
 120          *   void.
 121          *
 122          *******************************************************************************/
 123          void CyPLL_OUT_Stop(void) 
 124          {
 125   1          /* Disable the PLL. */
 126   1          FASTCLK_PLL_CFG0 &= ~PLL_CONTROL_ENABLE;
 127   1      }
 128          
 129          
 130          /*******************************************************************************
 131          * Function Name: CyPLL_OUT_SetPQ
 132          ********************************************************************************
 133          * Summary:
 134          *   Sets the P and Q dividers and the charge pump current.  
 135          *   The Frequency Out will be P/Q * Frequency In.  
 136          *   The PLL must be disabled before calling this function.
 137          *
 138          *
 139          * Parameters:
 140          *   P: Valid range [4 - 255]
 141          *   Q: Valid range [1 - 16].  Input Frequency / Q must be in the range of 1MHz to 3MHz.
 142          *   current: Valid range [1 - 7].  Charge pump current in uA.  
 143          *            Recommendation of 2uA for output frequencies of 67MHz or less and 
 144          *            3uA for higher output frequencies.
 145          *
 146          *
 147          * Return:
 148          *   void.
 149          *
 150          *******************************************************************************/
 151          void CyPLL_OUT_SetPQ(uint8 P, uint8 Q, uint8 current) 
 152          {
 153   1          CYASSERT(!(FASTCLK_PLL_CFG0 & PLL_STATUS_ENABLED));
 154   1          
 155   1          /*Set the CYREG_FASTCLK_PLL_P register
 156   1          Settings less than 4 do not give valid outputs. Valid range is 4 - 255*/
 157   1          if (P >= MIN_FASTCLK_PLL_P_VALUE)
 158   1          {
 159   2              FASTCLK_PLL_P = P;
 160   2          }
 161   1          /*Set the CYREG_FASTCLK_PLL_Q register*/
 162   1          if (Q <= MAX_FASTCLK_PLL_Q_VALUE && Q >= MIN_FASTCLK_PLL_Q_VALUE)
 163   1          {
 164   2              FASTCLK_PLL_Q = Q-1;
 165   2          }
 166   1          if(current >= MIN_FASTCLK_PLL_CUR_VALUE && current <= MAX_FASTCLK_PLL_CUR_VALUE)
 167   1          {
 168   2              /*
 169   2              Bits     Name         Description
 170   2              6:4     icpsel[2:0] Charge Pump current select; BROS tables contain 
 171   2                                  important stability information for given frequencies,
 172   2                                  P values, and other parameters
 173   2              1:0     vco_gain[1:0] VCO loop gain
 174   2              */
 175   2              FASTCLK_PLL_CFG1 = ((current - 1) << PLL_CURRENT_POSITION) | PLL_VCO_GAIN_2;
 176   2          }
 177   1      }
C51 COMPILER V9.03   CYLIB                                                                 05/13/2012 22:25:57 PAGE 4   

 178          
 179          
 180          /*******************************************************************************
 181          * Function Name: CyPLL_OUT_SetSource
 182          ********************************************************************************
 183          * Summary:
 184          *   Sets the input clock source to the PLL.  The PLL must be disabled before 
 185          *   calling this function.
 186          *
 187          * Parameters:
 188          *   source: One of the three available PLL clock sources
 189          *            0 :        IMO
 190          *            1 :        MHz Crystal
 191          *            2 :        DSI
 192          *
 193          *
 194          * Return:
 195          *   void.
 196          *
 197          *******************************************************************************/
 198          void CyPLL_OUT_SetSource(uint8 source) 
 199          {
 200   1          CYASSERT(!(FASTCLK_PLL_CFG0 & PLL_STATUS_ENABLED));
 201   1          
 202   1          /*Set the 1:0 bits of CLKDIST_CR */
 203   1          /*  Value    Name    Description
 204   1              2'h0     IMO     IMO is selected
 205   1              2'h1     XTAL    33MHz XTAL is selected
 206   1              2'h2     DSI     Digital System Interconnect is selected*/
 207   1          switch(source)
 208   1          {
 209   2              case CY_PLL_SOURCE_IMO:
 210   2              case CY_PLL_SOURCE_XTAL:
 211   2              case CY_PLL_SOURCE_DSI:
 212   2                  CLKDIST_CR = ((CLKDIST_CR & CLOCK_CONTROL_DIST_MASK) | source);
 213   2              break;
 214   2          }
 215   1      }
 216          
 217          
 218          /*******************************************************************************
 219          * Function Name: CyIMO_Start
 220          ********************************************************************************
 221          * Summary:
 222          *   Enables the IMO.  Optionally waits at least 6us for it to settle.
 223          *
 224          *
 225          * Parameters:
 226          *   wait:
 227          *   0: Return immediately after configuration
 228          *   1: Wait for at least 6us for the IMO to settle.
 229          *
 230          *
 231          * Return:
 232          *   void.
 233          *
 234          * Side Effects and Restrictions:
 235          *   If wait is enabled: Uses the Fast Timewheel to time the wait.
 236          *   Any other use of the Fast Timewheel will be stopped during the period of -
 237          *   this function and then restored.
 238          *   Uses the 100KHz ILO.  If not enabled, this function will enable the 100KHz -
 239          *   ILO for the period of this function.
C51 COMPILER V9.03   CYLIB                                                                 05/13/2012 22:25:57 PAGE 5   

 240          *
 241          *******************************************************************************/
 242          void CyIMO_Start(uint8 wait) 
 243          {
 244   1          uint8 pm_tw_cfg2_state;
 245   1          uint8 pm_tw_cfg0_state;
 246   1          uint8 ilo_clock_state;
 247   1      
 248   1          /* Set the bit to enable the clock. */
 249   1          PM_ACT_CFG0 |= IMO_PM_ENABLE;
 250   1      
 251   1          /*Wait for 6 us*/
 252   1          if(wait)
 253   1          {
 254   2              /*Need to turn on the 100KHz ILO if it happens to not already be running.*/
 255   2              ilo_clock_state = SLOWCLK_ILO_CR0;
 256   2              if(!(ilo_clock_state & ILO_CONTROL_100KHZ_ON))
 257   2              {
 258   3                  CyILO_Start100K();
 259   3              }
 260   2              
 261   2              /*Use ILO 100Khz*/
 262   2              pm_tw_cfg2_state = PM_TW_CFG2;
 263   2              pm_tw_cfg0_state = PM_TW_CFG0;
 264   2              
 265   2              /* FTW_EN (bit 0) must be clear to change the period*/
 266   2              PM_TW_CFG2 &= FTW_CLEAR_FTW_BITS;
 267   2              
 268   2              /* Set the FTW interval of 1 100KHz ILO clocks
 269   2              Should result in status getting set at a (100/1)KHz rate*/
 270   2              PM_TW_CFG0 = 1-1;
 271   2              /* Enable FTW, but not the interrupt*/
 272   2              PM_TW_CFG2 = FTW_ENABLE;        
 273   2              
 274   2              /*Read FTW value*/
 275   2              while (CyPmReadStatus(1) == 0)
 276   2              {
 277   3                  /* Wait for the interrupt status*/
 278   3              }
 279   2      
 280   2              /*reset the clock */
 281   2              if(!(ilo_clock_state & ILO_CONTROL_100KHZ_ON))
 282   2              {
 283   3                  CyILO_Stop100K();
 284   3              }
 285   2              /*restore the FTW*/
 286   2              PM_TW_CFG0 = pm_tw_cfg0_state;
 287   2              PM_TW_CFG2 = pm_tw_cfg2_state;
 288   2          }
 289   1      }
 290          
 291          
 292          /*******************************************************************************
 293          * Function Name: CyIMO_Stop
 294          ********************************************************************************
 295          * Summary:
 296          *   Disables the IMO.
 297          *
 298          * Parameters:
 299          *   void.
 300          *
 301          *
C51 COMPILER V9.03   CYLIB                                                                 05/13/2012 22:25:57 PAGE 6   

 302          * Return:
 303          *   void.
 304          *
 305          *******************************************************************************/
 306          void CyIMO_Stop(void) 
 307          {
 308   1          /* Clear the bit to disable the clock. */
 309   1          PM_ACT_CFG0 &= ~IMO_PM_ENABLE;
 310   1      }
 311          
 312          /*******************************************************************************
 313          * Function Name: CyUSB_PowerOnCheck
 314          ********************************************************************************
 315          * Summary:
 316          *   Returns the USB power status value.
 317          *    A private function to cy_boot.
 318          *
 319          *
 320          * Parameters:
 321          *   None.
 322          *
 323          *
 324          * Return:
 325          *   uint8: one if the USB is enabled, 0 if not enabled.
 326          *
 327          *******************************************************************************/
 328          uint8 CyUSB_PowerOnCheck()
 329          {
 330   1          uint8 powered_on = 0;
 331   1          /*
 332   1           Check whether the device is in Active or AltActive
 333   1           Check whether USB is powered on
 334   1          */
 335   1          if((((CY_PM_MODE_CSR_REG & CY_PM_MODE_CSR_MASK) == CY_PM_MODE_CSR_ACTIVE) && 
 336   1               (CY_PM_ACT_CFG5_REG & CY_ACT_USB_ENABLED)) ||
 337   1             (((CY_PM_MODE_CSR_REG & CY_PM_MODE_CSR_MASK) == CY_PM_MODE_CSR_ALT_ACT) && 
 338   1               (CY_PM_STBY_CFG5_REG & CY_ALT_ACT_USB_ENABLED)))
 339   1          
 340   1          {
 341   2              powered_on = 1;
 342   2          }
 343   1          return powered_on;
 344   1      }
 345          
 346          /*******************************************************************************
 347          * Function Name: CyIMO_SetTrimValue
 348          ********************************************************************************
 349          * Summary:
 350          *   Sets the IMO factory trim values.
 351          *
 352          * Parameters:
 353          *   freq.
 354          *
 355          *
 356          * Return:
 357          *   void.
 358          *
 359          *******************************************************************************/
 360          void CyIMO_SetTrimValue(uint8 freq) 
 361          {
 362   1          uint8 usb_power_on = CyUSB_PowerOnCheck();
 363   1      
C51 COMPILER V9.03   CYLIB                                                                 05/13/2012 22:25:57 PAGE 7   

 364   1          /*If USB is powered */
 365   1          if(usb_power_on == 1) 
 366   1          {    
 367   2              /*Unlock USB write*/
 368   2              CY_USB_CR1 &= ~CLOCK_USB_ENABLE;
 369   2          }
 370   1          switch(freq)
 371   1          {
 372   2              case CY_IMO_FREQ_3MHZ:
 373   2              IMO_TR1 = CY_GET_XTND_REG8(FLSHID_CUST_TABLES_IMO_3MHZ_PTR);
 374   2              break;
 375   2      
 376   2              case CY_IMO_FREQ_6MHZ:
 377   2              IMO_TR1 = CY_GET_XTND_REG8(FLSHID_CUST_TABLES_IMO_6MHZ_PTR);
 378   2              break;
 379   2      
 380   2              case CY_IMO_FREQ_12MHZ:
 381   2              IMO_TR1 = CY_GET_XTND_REG8(FLSHID_CUST_TABLES_IMO_12MHZ_PTR);
 382   2              break;
 383   2      
 384   2              case CY_IMO_FREQ_24MHZ:
 385   2              IMO_TR1 = CY_GET_XTND_REG8(FLSHID_CUST_TABLES_IMO_24MHZ_PTR);
 386   2              break;
 387   2      
 388   2              case CY_IMO_FREQ_48MHZ:
 389   2              IMO_TR1 = CY_GET_XTND_REG8(FLSHID_MFG_CFG_IMO_TR1_PTR);
 390   2              break;
 391   2      
 392   2              case CY_IMO_FREQ_62MHZ:
 393   2              IMO_TR1 = CY_GET_XTND_REG8(FLSHID_CUST_TABLES_IMO_67MHZ_PTR);
 394   2              break;
 395   2      
 396   2              case CY_IMO_FREQ_74MHZ:
 397   2              IMO_TR1 = CY_GET_XTND_REG8(FLSHID_CUST_TABLES_IMO_80MHZ_PTR);
 398   2              break;
 399   2              
 400   2              case CY_IMO_FREQ_USB:
 401   2              IMO_TR1 = CY_GET_XTND_REG8(FLSHID_CUST_TABLES_IMO_USB_PTR);
 402   2              /*If USB is powered */
 403   2              if(usb_power_on == 1) 
 404   2              {
 405   3                  /*Lock the USB Oscillator*/
 406   3                  CY_USB_CR1 |= CLOCK_USB_ENABLE;
 407   3              }
 408   2              break;
 409   2              
 410   2              default:
 411   2              CYASSERT(0);
 412   2              break;
 413   2          }
 414   1          
 415   1      }
 416          
 417          
 418          /*******************************************************************************
 419          * Function Name: CyIMO_SetFreq
 420          ********************************************************************************
 421          * Summary:
 422          *   Alows the caller to set the IMO fequency (3, 6, 12, 24, 48, 62 MHZ).
 423          *   Sets the frequency of the IMO.  
 424          *   Changes may be made while the IMO is running.  
 425          *   When the USB setting is chosen the USB clock locking circuit is enabled.  
C51 COMPILER V9.03   CYLIB                                                                 05/13/2012 22:25:57 PAGE 8   

 426          *   Otherwise this circuit is disabled.
 427          *   If the IMO is currently driving the Master clock, then the Flash wait states
 428          *   must be set appropriately before making this change -
 429          *   by using CyFlash_SetWaitCycles().
 430          *   If the frequency is set to CY_IMO_FREQ_USB then IMO Doubler is turned ON 
 431          *   and otherwise IMO Doubler will be turned off.
 432          *
 433          *
 434          * Parameters:
 435          *   frequency,    CY_IMO_FREQ_3MHZ  to set 3 MHz,
 436          *                 CY_IMO_FREQ_6MHZ  to set 6 MHz,
 437          *                 CY_IMO_FREQ_12MHZ to set 12MHz,
 438          *                 CY_IMO_FREQ_24MHZ to set 24MHz,
 439          *                 CY_IMO_FREQ_48MHZ to set 48MHz,
 440          *                 CY_IMO_FREQ_62MHZ to set 62.6MHz.
 441          *                 CY_IMO_FREQ_74MHZ    to set 74.7 MHz (PSoC 5)
 442          *                 CY_IMO_FREQ_USB    to set 24 MHz (Trimmed for USB operation)
 443          *
 444          *
 445          * Return:
 446          *   void.
 447          *
 448          *******************************************************************************/
 449          void CyIMO_SetFreq(uint8 freq) 
 450          {
 451   1          uint8 current_freq;
 452   1          uint8 next_freq;
 453   1          
 454   1          /*
 455   1          When changing the IMO frequency the Trim values must also be set accordingly.  
 456   1          This requires reading the current frequency.  
 457   1          If the new frequency is faster, then set the new trim and then change the
 458   1          frequency, otherwise change the frequency and then set the new trim values.
 459   1          */
 460   1      
 461   1          /*
 462   1          Value Name         Description
 463   1          3'h0 F_RANGE_0 12 MHz (normal)
 464   1          3'h1 F_RANGE_1 6 MHz (normal); 12 MHz (fast start)
 465   1          3'h2 F_RANGE_2 24 MHz
 466   1          3'h3 F_RANGE_3 3 MHz (normal); 12 MHz (fast start)
 467   1          3'h4 F_RANGE_4 48 MHz
 468   1          3'h5 F_RANGE_5 67 MHz
 469   1          3'h6 F_RANGE_6 80 MHz (normal); 48 MHz (fast start)
 470   1          3'h7 F_RANGE_7 96 MHz (normal); 48 MHz (fast start)
 471   1          */
 472   1          current_freq = FASTCLK_IMO_CR & ~CLOCK_IMO_RANGE_CLEAR;
 473   1          /*Check if the requested frequency is USB.*/
 474   1          next_freq = (freq == CY_IMO_FREQ_USB) ? CY_IMO_FREQ_24MHZ : freq;
 475   1          switch (current_freq)
 476   1          {
 477   2              case 0:
 478   2              current_freq = CY_IMO_FREQ_12MHZ;
 479   2              break;
 480   2              
 481   2              case 1:
 482   2              current_freq = CY_IMO_FREQ_6MHZ;
 483   2              break;
 484   2      
 485   2              case 2:
 486   2              current_freq = CY_IMO_FREQ_24MHZ;
 487   2              break;
C51 COMPILER V9.03   CYLIB                                                                 05/13/2012 22:25:57 PAGE 9   

 488   2      
 489   2              case 3:
 490   2              current_freq = CY_IMO_FREQ_3MHZ;
 491   2              break;
 492   2      
 493   2              case 4:
 494   2              current_freq = CY_IMO_FREQ_48MHZ;
 495   2              break;
 496   2      
 497   2              case 5:
 498   2              current_freq = CY_IMO_FREQ_62MHZ;
 499   2              break;
 500   2      
 501   2              case 6:
 502   2              current_freq = CY_IMO_FREQ_74MHZ;
 503   2              break;
 504   2          }
 505   1          
 506   1          if (next_freq >= current_freq)
 507   1          {
 508   2              /*Set the new trim first*/
 509   2              CyIMO_SetTrimValue(freq);
 510   2          }
 511   1          
 512   1          /*Set the usbclk_on bit when using CY_IMO_FREQ_USB, if not clear it*/
 513   1          switch(freq)
 514   1          {
 515   2              case CY_IMO_FREQ_3MHZ:
 516   2              FASTCLK_IMO_CR = ((FASTCLK_IMO_CR & CLOCK_IMO_RANGE_CLEAR) | CLOCK_IMO_3MHZ_VALUE) & ~FASTCLK_IMO_
             -USBCLK_ON_SET;
 517   2              break;
 518   2      
 519   2              case CY_IMO_FREQ_6MHZ:
 520   2              FASTCLK_IMO_CR = ((FASTCLK_IMO_CR & CLOCK_IMO_RANGE_CLEAR) | CLOCK_IMO_6MHZ_VALUE) & ~FASTCLK_IMO_
             -USBCLK_ON_SET;
 521   2              break;
 522   2      
 523   2              case CY_IMO_FREQ_12MHZ:
 524   2              FASTCLK_IMO_CR = ((FASTCLK_IMO_CR & CLOCK_IMO_RANGE_CLEAR) | CLOCK_IMO_12MHZ_VALUE) & ~FASTCLK_IMO
             -_USBCLK_ON_SET;
 525   2              break;
 526   2      
 527   2              case CY_IMO_FREQ_24MHZ:
 528   2              FASTCLK_IMO_CR = ((FASTCLK_IMO_CR & CLOCK_IMO_RANGE_CLEAR) | CLOCK_IMO_24MHZ_VALUE) & ~FASTCLK_IMO
             -_USBCLK_ON_SET;
 529   2              break;
 530   2      
 531   2              case CY_IMO_FREQ_48MHZ:
 532   2              FASTCLK_IMO_CR = ((FASTCLK_IMO_CR & CLOCK_IMO_RANGE_CLEAR) | CLOCK_IMO_48MHZ_VALUE) & ~FASTCLK_IMO
             -_USBCLK_ON_SET;
 533   2              break;
 534   2      
 535   2              case CY_IMO_FREQ_62MHZ:
 536   2              FASTCLK_IMO_CR = ((FASTCLK_IMO_CR & CLOCK_IMO_RANGE_CLEAR) | CLOCK_IMO_62MHZ_VALUE) & ~FASTCLK_IMO
             -_USBCLK_ON_SET;
 537   2              break;
 538   2      
 539   2              case CY_IMO_FREQ_74MHZ:
 540   2              FASTCLK_IMO_CR = ((FASTCLK_IMO_CR & CLOCK_IMO_RANGE_CLEAR) | CLOCK_IMO_74MHZ_VALUE) & ~FASTCLK_IMO
             -_USBCLK_ON_SET;
 541   2              break;
 542   2              
C51 COMPILER V9.03   CYLIB                                                                 05/13/2012 22:25:57 PAGE 10  

 543   2              case CY_IMO_FREQ_USB:
 544   2              FASTCLK_IMO_CR = ((FASTCLK_IMO_CR & CLOCK_IMO_RANGE_CLEAR) | CLOCK_IMO_24MHZ_VALUE) | FASTCLK_IMO_
             -USBCLK_ON_SET;
 545   2              break;
 546   2              
 547   2              default:
 548   2              /*Not a correct fequency value.*/
 549   2              CYASSERT(0);
 550   2              break;
 551   2          }
 552   1      
 553   1          /*Turn on the IMO Doubler, if switching to CY_IMO_FREQ_USB*/
 554   1          if (freq == CY_IMO_FREQ_USB)
 555   1          {
 556   2              CyIMO_EnableDoubler();
 557   2          }
 558   1          else
 559   1          {
 560   2              CyIMO_DisableDoubler();
 561   2          }
 562   1      
 563   1          if (next_freq < current_freq)
 564   1          {
 565   2              /*Set the new trim after setting the frequency*/
 566   2              CyIMO_SetTrimValue(freq);
 567   2          }
 568   1      }
 569          
 570          
 571          /*******************************************************************************
 572          * Function Name: CyIMO_SetSource
 573          ********************************************************************************
 574          * Summary:
 575          *   Sets the source of the clock output from the IMO block.  
 576          *   The output from the IMO is by default the IMO itself.  
 577          *   Optionally the MHz Crystal or a DSI input can be the source of the 
 578          *   IMO output instead.  
 579          *   If the IMO is currently driving the Master clock, 
 580          *   then the Flash wait states must be set appropriately before making this 
 581          *   change by using CyFlash_SetWaitCycles().
 582          *
 583          *
 584          * Parameters:
 585          *   source, CY_IMO_SOURCE_DSI to set the DSI as source.
 586          *           CY_IMO_SOURCE_XTAL to set the MHz as source.
 587          *           CY_IMO_SOURCE_IMO to set the IMO itself.
 588          *
 589          *
 590          * Return:
 591          *   void.
 592          *
 593          *******************************************************************************/
 594          void CyIMO_SetSource(uint8 source) 
 595          {
 596   1          /*Set the xclken bit of FASTCLK_IMO_CR regigster*/
 597   1          /*
 598   1              IMO2X_SRC     bit in CLKDIST_CR
 599   1              
 600   1              Bit field encoding: IMO2X_INPUT_SEL_ENUM
 601   1              Value Name Description
 602   1              1'b0  DSI  Digital System Interconnect is used as a source to IMO doubler
 603   1              1'b1  XTAL External clock source is used as a source to IMO doubler
C51 COMPILER V9.03   CYLIB                                                                 05/13/2012 22:25:57 PAGE 11  

 604   1              
 605   1              xclken         bit in FASTCLK_IMO_CR
 606   1              
 607   1              Value      Name      Description
 608   1              1'b0     XCLKEN_0     IMO doubler runs from the IMOCLK
 609   1              1'b1     XCLKEN_1     IMO doubler runs from the selected 'external' clock. 
 610   1                                  This is a signal on a global - source is TBD.
 611   1          */
 612   1          
 613   1          switch(source)
 614   1          {
 615   2              case CY_IMO_SOURCE_DSI:
 616   2                  CLKDIST_CR &= ~CLOCK_IMO2X_XTAL;
 617   2                  FASTCLK_IMO_CR |= CLOCK_IMO_IMO;
 618   2                  break;
 619   2              
 620   2              case CY_IMO_SOURCE_XTAL:        
 621   2                  CLKDIST_CR |= CLOCK_IMO2X_XTAL;
 622   2                  FASTCLK_IMO_CR |= CLOCK_IMO_IMO;
 623   2                  break;
 624   2              
 625   2              case CY_IMO_SOURCE_IMO:
 626   2                  FASTCLK_IMO_CR &= ~CLOCK_IMO_IMO;
 627   2                  break;
 628   2              
 629   2              default:
 630   2                  /*Not a correct source value.*/
 631   2                  CYASSERT(0);
 632   2                  break;        
 633   2          }
 634   1      }
 635          
 636          
 637          /*******************************************************************************
 638          * Function Name: CyIMO_EnableDoubler
 639          ********************************************************************************
 640          * Summary:
 641          *   Enables the IMO doubler.  The 2x frequency clock is used to convert 
 642          *   a 24MHz input to a 48MHz output for use by the USB block.
 643          *
 644          *
 645          * Parameters:
 646          *   void.
 647          *
 648          *
 649          * Return:
 650          *   void.
 651          *
 652          *******************************************************************************/
 653          void CyIMO_EnableDoubler(void) 
 654          {
 655   1          /*Set the FASTCLK_IMO_CR_PTR regigster's 4th bit*/
 656   1          FASTCLK_IMO_CR |= IMO_DOUBLER_ENABLE;
 657   1      }
 658          
 659          
 660          /*******************************************************************************
 661          * Function Name: CyIMO_DisableDoubler
 662          ********************************************************************************
 663          * Summary:
 664          *   Disables the IMO doubler.
 665          *
C51 COMPILER V9.03   CYLIB                                                                 05/13/2012 22:25:57 PAGE 12  

 666          *
 667          * Parameters:
 668          *   void.
 669          *
 670          *
 671          * Return:
 672          *   void.
 673          *
 674          *******************************************************************************/
 675          void CyIMO_DisableDoubler(void) 
 676          {
 677   1          /*Set the FASTCLK_IMO_CR_PTR regigster's 4th bit*/
 678   1          FASTCLK_IMO_CR &= ~IMO_DOUBLER_ENABLE;
 679   1      }
 680          
 681          
 682          /*******************************************************************************
 683          * Function Name: CyMasterClk_SetSource
 684          ********************************************************************************
 685          * Summary:
 686          *   Sets the source of the master clock.  
 687          *   The current source and the new source must both be running and stable 
 688          *   before calling this function.  
 689          *   The Flash wait states must be set appropriately before making this change 
 690          *   by using CyFlash_SetWaitCycles().
 691          *
 692          *
 693          * Parameters:
 694          *   source: One of the four available Master clock sources.
 695          *     CY_MASTER_SOURCE_IMO
 696          *     CY_MASTER_SOURCE_PLL
 697          *     CY_MASTER_SOURCE_XTAL
 698          *     CY_MASTER_SOURCE_DSI
 699          *
 700          *
 701          * Return:
 702          *   void.
 703          *
 704          *******************************************************************************/
 705          void CyMasterClk_SetSource(uint8 source) 
 706          {
 707   1          /*
 708   1          Switching the master clock source is implemented as below:
 709   1          if (master_clk divider == 0)
 710   1              set master_clk divider = 3
 711   1              change master_clk source
 712   1              set master_clk divider back to 0
 713   1          else
 714   1              change master_clk source
 715   1      
 716   1          1) Write a non-zero period to the master mux clock divider (MSTR0). 
 717   1          Recommended value is 3. This results in    a divide of the master clock by 4.
 718   1          2) Write the new select to the mux select register (MSTR1).
 719   1          3) Restore the zero period (if desired) to the master mux clock divider (MSTR0).        
 720   1          */
 721   1          uint8 master_reg_1;
 722   1      
 723   1      #if (CY_PSOC3_ES2 || CY_PSOC5_ES1)
                  uint8 master_reg_0;
              
                  /* Read the current setting */
                  master_reg_0 = CLKDIST_MSTR0;
C51 COMPILER V9.03   CYLIB                                                                 05/13/2012 22:25:57 PAGE 13  

                  if (master_reg_0 == 0x00u)
                  {
                      CLKDIST_MSTR0 = 3;
                  }
              #endif
 733   1      
 734   1          /* Read the current setting */
 735   1          master_reg_1 = CLKDIST_MSTR1;
 736   1      
 737   1          CLKDIST_MSTR1 = (master_reg_1 & MASTER_CLK_SRC_CLEAR) | (source & ~MASTER_CLK_SRC_CLEAR);
 738   1          
 739   1      #if (CY_PSOC3_ES2 || CY_PSOC5_ES1)
                  /*Restore the registry value.*/
                  if (master_reg_0 == 0x00u)
                  {
                      CLKDIST_MSTR0 = 0;
                  }
              #endif
 746   1      }
 747          
 748          
 749          /*******************************************************************************
 750          * Function Name: CyMasterClk_SetDivider
 751          ********************************************************************************
 752          * Summary:
 753          *   Sets the divider value used to generate Master Clock.  
 754          *   The Flash wait states must be set appropriately before making this change 
 755          *   by using CyFlash_SetWaitCycles().
 756          *
 757          *
 758          * Parameters:
 759          *   divider: Valid range [0-255].  
 760          *   The clock will be divided by this value + 1.  
 761          *   For example to divide by 2 this parameter should be set to 1.
 762          *
 763          *
 764          * Return:
 765          *   void.
 766          *
 767          *******************************************************************************/
 768          void CyMasterClk_SetDivider(uint8 divider) 
 769          {
 770   1          CLKDIST_MSTR0 = divider;
 771   1      }
 772          
 773          
 774          /*******************************************************************************
 775          * Function Name: CyBusClk_Internal_SetDivider
 776          ********************************************************************************
 777          * Summary:
 778          *   Sets the divider value used to generate Bus Clock.  
 779          *   The Flash wait states must be set appropriately before making this change 
 780          *   by using CyFlash_SetWaitCycles().
 781          *
 782          *
 783          * Parameters:
 784          *   divider: Valid range [0-65535].
 785          *   The clock will be divided by this value + 1.
 786          *   For example to divide by 2 this parameter should be set to 1.
 787          *
 788          *
 789          * Return:
C51 COMPILER V9.03   CYLIB                                                                 05/13/2012 22:25:57 PAGE 14  

 790          *   void.
 791          *
 792          *******************************************************************************/
 793          void CyBusClk_Internal_SetDivider(uint16 divider)
 794          {
 795   1          /*Clear all the masks (CLKDIST_AMASK, CLKDIST_DMASK)*/
 796   1          CLKDIST_AMASK &= BUS_AMASK_CLEAR;
 797   1          CLKDIST_DMASK = BUS_DMASK_CLEAR;
 798   1          
 799   1          /*set the MASK for bus clock, CLKDIST_BCFG2
 800   1          Bits      Name      Description
 801   1          7         MASK     Mask bit to enable shadow loads
 802   1          1'b1      ENABLE      Enable shadow loads*/
 803   1          CLKDIST_BCFG2 |= CLKDIST_WRK0_MASK_SET;
 804   1          
 805   1          /*We change both bytes before we enable/start the clock.*/
 806   1          CY_SET_REG16(CLKDIST_WRK0_PTR, divider);
 807   1          
 808   1          /*load the value , set the CLKDIST_LD LOAD bit*/
 809   1          CLKDIST_LD |= CLKDIST_LD_LOAD_SET;    
 810   1      }
 811          
 812          
 813          /*******************************************************************************
 814          * Function Name: CyBusClk_SetDivider
 815          ********************************************************************************
 816          * Summary:
 817          *   Sets the divider value used to generate Bus Clock.  
 818          *   The Flash wait states must be set appropriately before making this change 
 819          *   by using CyFlash_SetWaitCycles().
 820          *
 821          *
 822          * Parameters:
 823          *   divider: Valid range [0-65535].  
 824          *   The clock will be divided by this value + 1.  
 825          *   For example to divide by 2 this parameter should be set to 1..
 826          *
 827          *
 828          * Return:
 829          *   void.
 830          *
 831          *******************************************************************************/
 832          void CyBusClk_SetDivider(uint16 divider) 
 833          {
 834   1          uint16 current_busclk_divider;
 835   1          uint8 current_masterclk_divider;
 836   1      
 837   1          /*Bus clock divider value.*/
 838   1          current_busclk_divider = CY_GET_REG16(CLKDIST_BCFG0_PTR);
 839   1          
 840   1          /*Work around to set the bus clock divider value.*/
 841   1          if (divider == 0 || current_busclk_divider == 0)
 842   1          {
 843   2              /*save away the master clock divider value*/
 844   2              current_masterclk_divider = CY_GET_REG8(CLKDIST_MSTR0_PTR);
 845   2              if (current_masterclk_divider < MASTERCLK_DIVIDER_VALUE)
 846   2              {    
 847   3                  /*set master clock divider to 7 */
 848   3                  CyMasterClk_SetDivider(MASTERCLK_DIVIDER_VALUE);
 849   3              }
 850   2              if (divider == 0)
 851   2              {
C51 COMPILER V9.03   CYLIB                                                                 05/13/2012 22:25:57 PAGE 15  

 852   3                  /*
 853   3                  set the SSS bit 
 854   3                  set the divider register desired value*/
 855   3                  CLKDIST_BCFG2 |= CLKDIST_BCFG2_SSS_SET;
 856   3                  CyBusClk_Internal_SetDivider(divider);
 857   3              }
 858   2              else 
 859   2              {
 860   3                  /*
 861   3                  set the divider register to divider argument value
 862   3                  clear the SSS bit            */
 863   3                  CyBusClk_Internal_SetDivider(divider);
 864   3                  CLKDIST_BCFG2 &= ~CLKDIST_BCFG2_SSS_SET;
 865   3              }
 866   2              /*Restore the master clock */
 867   2              CyMasterClk_SetDivider(current_masterclk_divider);
 868   2          }
 869   1          else
 870   1          {
 871   2              CyBusClk_Internal_SetDivider(divider);
 872   2          }
 873   1      }
 874          
 875          
 876          /*******************************************************************************
 877          * Function Name: CyCpuClk_SetDivider
 878          ********************************************************************************
 879          * Summary:
 880          *   Sets the divider value used to generate the CPU Clock.  Only applicable for PSoC 3.
 881          *
 882          *
 883          * Parameters:
 884          *   divider: Valid range [0-15].  
 885          *   The clock will be divided by this value + 1.  
 886          *   For example to divide by 2 this parameter should be set to 1.
 887          *
 888          *
 889          * Return:
 890          *   void.
 891          *
 892          *******************************************************************************/
 893          void CyCpuClk_SetDivider(uint8 divider) 
 894          {
 895   1      #if CY_PSOC3_ES3
 896   1          CLKDIST_MSTR1 = (CLKDIST_MSTR1 & CLKDIST_MSTR1_DIV_CLEAR) | (divider << CLKDIST_DIV_POSITION);
 897   1      #elif CY_PSOC3_ES2
                  CPUCLK_DIV = (CPUCLK_DIV & ~CPUCLK_DIV) | (divider & SFR_USER_CPUCLK_DIV_MASK);
              #endif /*end (CY_PSOC3_ES3)*/
 900   1      }
 901          
 902          
 903          /*******************************************************************************
 904          * Function Name: CyUsbClk_SetSource
 905          ********************************************************************************
 906          * Summary:
 907          *   Sets the source of the USB clock.
 908          *
 909          *
 910          * Parameters:
 911          *   source: One of the four available USB clock sources
 912          *             USB_CLK_IMO2X     - imo2x  is selected
 913          *             USB_CLK_IMO       - imo is selected
C51 COMPILER V9.03   CYLIB                                                                 05/13/2012 22:25:57 PAGE 16  

 914          *             USB_CLK_PLL       - pll is selected
 915          *             USB_CLK_DSI       - dsi is selected
 916          *
 917          *
 918          * Return:
 919          *   void.
 920          *
 921          *******************************************************************************/
 922          void CyUsbClk_SetSource(uint8 source) 
 923          {
 924   1          /* SRC_SEL[1:0] of CLKDIST.UCFG*/
 925   1          CLKDIST_UCFG = (CLKDIST_UCFG & ~USB_CLKDIST_CONFIG_MASK) | (USB_CLKDIST_CONFIG_MASK & source);
 926   1      }
 927          
 928          
 929          /*******************************************************************************
 930          * Function Name: CyILO_Start1K
 931          ********************************************************************************
 932          * Summary:
 933          *   Enables the ILO 1 KHz oscillator.
 934          *
 935          *
 936          * Parameters:
 937          *   void.
 938          *
 939          *
 940          * Return:
 941          *   void.
 942          *
 943          *******************************************************************************/
 944          void CyILO_Start1K(void) 
 945          {
 946   1          /*Set the bit 1 of ILO RS */
 947   1          SLOWCLK_ILO_CR0 |= ILO_CONTROL_1KHZ_ON;
 948   1      }
 949          
 950          
 951          /*******************************************************************************
 952          * Function Name: CyILO_Stop1K
 953          ********************************************************************************
 954          * Summary:
 955          *   Disables the ILO 1 KHz oscillator.
 956          *   Note: Stopping the ILO 1 kHz could break the active WDT functionality.
 957          *
 958          *
 959          * Parameters:
 960          *   void.
 961          *
 962          *
 963          * Return:
 964          *   void.
 965          *
 966          *******************************************************************************/
 967          void CyILO_Stop1K(void) 
 968          {
 969   1          /*Clear the bit 1 of ILO RS */
 970   1          SLOWCLK_ILO_CR0 &= ~ILO_CONTROL_1KHZ_ON;
 971   1      }
 972          
 973          
 974          /*******************************************************************************
 975          * Function Name: CyILO_Start100K
C51 COMPILER V9.03   CYLIB                                                                 05/13/2012 22:25:57 PAGE 17  

 976          ********************************************************************************
 977          * Summary:
 978          *   Enables the ILO 100 KHz oscillator.
 979          *
 980          *
 981          * Parameters:
 982          *   void.
 983          *
 984          *
 985          * Return:
 986          *   void.
 987          *
 988          *******************************************************************************/
 989          void CyILO_Start100K(void) 
 990          {
 991   1          /*Set the bit 2 of ILO RS */
 992   1          SLOWCLK_ILO_CR0 |= ILO_CONTROL_100KHZ_ON;
 993   1      }
 994          
 995          
 996          /*******************************************************************************
 997          * Function Name: CyILO_Stop100K
 998          ********************************************************************************
 999          * Summary:
1000          *   Disables the ILO 100 KHz oscillator.
1001          *
1002          *
1003          * Parameters:
1004          *   void.
1005          *
1006          *
1007          * Return:
1008          *   void.
1009          *
1010          *******************************************************************************/
1011          void CyILO_Stop100K(void) 
1012          {
1013   1          /*Clear the bit 2 of ILO RS */
1014   1          SLOWCLK_ILO_CR0 &= ~ILO_CONTROL_100KHZ_ON;
1015   1      }
1016          
1017          
1018          /*******************************************************************************
1019          * Function Name: CyILO_Enable33K
1020          ********************************************************************************
1021          * Summary:
1022          *   Enables the ILO 33 KHz divider.  
1023          *   Note that the 33 KHz clock is generated from the 100 KHz oscillator, 
1024          *   so it must also be running in order to generate the 33 KHz output.
1025          *
1026          *
1027          * Parameters:
1028          *   void.
1029          *
1030          *
1031          * Return:
1032          *   void.
1033          *
1034          *******************************************************************************/
1035          void CyILO_Enable33K(void) 
1036          {
1037   1          /*Set the bit 5 of ILO RS */
C51 COMPILER V9.03   CYLIB                                                                 05/13/2012 22:25:57 PAGE 18  

1038   1          SLOWCLK_ILO_CR0 |= ILO_CONTROL_33KHZ_ON;
1039   1      }
1040          
1041          
1042          /*******************************************************************************
1043          * Function Name: CyILO_Disable33K
1044          ********************************************************************************
1045          * Summary:
1046          *   Disables the ILO 33 KHz divider.  
1047          *   Note that the 33 KHz clock is generated from the 100 KHz oscillator, 
1048          *   but this API does not disable the 100 KHz clock.
1049          *
1050          *
1051          * Parameters:
1052          *   void.
1053          *
1054          *
1055          * Return:
1056          *   void.
1057          *
1058          *******************************************************************************/
1059          void CyILO_Disable33K(void) 
1060          {
1061   1          /*Clear the bit 5 of ILO RS */
1062   1          SLOWCLK_ILO_CR0 &= ~ILO_CONTROL_33KHZ_ON;
1063   1      }
1064          
1065          
1066          /*******************************************************************************
1067          * Function Name: CyILO_SetSource
1068          ********************************************************************************
1069          * Summary:
1070          *   Sets the source of the clock output from the ILO block.
1071          *
1072          *
1073          * Parameters:
1074          *   source: One of the three available ILO output sources
1075          *       Value        Define                Source
1076          *       0            CY_ILO_SOURCE_100K    ILO 100 KHz
1077          *       1            CY_ILO_SOURCE_33K     ILO 33 KHz
1078          *       2            CY_ILO_SOURCE_1K      ILO 1 KHz
1079          *
1080          *
1081          * Return:
1082          *   void.
1083          *
1084          *******************************************************************************/
1085          void CyILO_SetSource(uint8 source) 
1086          {
1087   1          /*Bits 3:2       ILO_OUT[1:0] of CLKDIST_CR */
1088   1          CLKDIST_CR = (CLKDIST_CR & CY_ILO_SOURCE_BITS_CLEAR) | ((source << 2) & ~CY_ILO_SOURCE_BITS_CLEAR);
1089   1      }
1090          
1091          
1092          /*******************************************************************************
1093          * Function Name: CyILO_SetPowerMode
1094          ********************************************************************************
1095          * Summary:
1096          *   Sets the power mode used by the ILO during power down.  
1097          *   Allows for lower power down power usage resulting in a slower startup time.
1098          *
1099          *
C51 COMPILER V9.03   CYLIB                                                                 05/13/2012 22:25:57 PAGE 19  

1100          * Parameters:
1101          *   mode, 
1102          *       Value        Define                Source
1103          *         0      CY_ILO_FAST_START  Faster start-up, internal bias left on when powered down
1104          *         1      CY_ILO_SLOW_START  Slower start-up, internal bias off when powered down
1105          *
1106          *
1107          * Return:
1108          *   Prevous power mode state.
1109          *
1110          *******************************************************************************/
1111          uint8 CyILO_SetPowerMode(uint8 mode) 
1112          {
1113   1          uint8 state;
1114   1      
1115   1          /* Get current state. */
1116   1          state = SLOWCLK_ILO_CR0;
1117   1      
1118   1          /* Set the the oscillator power mode. */
1119   1          if(mode != CY_ILO_FAST_START)
1120   1          {
1121   2              SLOWCLK_ILO_CR0 = (state | ILO_CONTROL_PD_MODE);
1122   2          }
1123   1          else
1124   1          {
1125   2              SLOWCLK_ILO_CR0 = (state & ~ILO_CONTROL_PD_MODE);
1126   2          }
1127   1      
1128   1          /* Return the old mode. */
1129   1          return ((state & ILO_CONTROL_PD_MODE) >> ILO_CONTROL_PD_POSITION);
1130   1      }
1131          
1132          
1133          /*******************************************************************************
1134          * Function Name: CyXTAL_32KHZ_Start
1135          ********************************************************************************
1136          * Summary:
1137          *   Enables the 32KHz Crystal Oscillator.
1138          *
1139          *
1140          * Parameters:
1141          *   void.
1142          *
1143          *
1144          * Return:
1145          *   void.
1146          *
1147          *******************************************************************************/
1148          void CyXTAL_32KHZ_Start(void) 
1149          {
1150   1          volatile uint32  timeout;
1151   1          volatile uint32* timeout_p = &timeout;
1152   1          
1153   1          SLOWCLK_X32_TST = X32_TST_SETALL;
1154   1      #if (CY_PSOC3_ES3 || CY_PSOC5_ES2)
1155   1          MFGCFG_X32_TR = X32_TR_DPMODE;
1156   1      #endif
1157   1      
1158   1          /*set the low power mode*/
1159   1          SLOWCLK_X32_CFG = (SLOWCLK_X32_CFG & ~X32_CFG_LP_BITS_MASK) | X32_CFG_LP_DEFAULT;
1160   1      
1161   1      #if (CY_PSOC3_ES3 || CY_PSOC5_ES2)
C51 COMPILER V9.03   CYLIB                                                                 05/13/2012 22:25:57 PAGE 20  

1162   1          /*set the power mode bit*/
1163   1          SLOWCLK_X32_CR |= X32_CONTROL_PDBEN;
1164   1      #endif
1165   1          
1166   1          /* Enable the oscillator. */
1167   1          SLOWCLK_X32_CR |= X32_CONTROL_X32EN;
1168   1          for (timeout = 1000; *timeout_p; timeout--) 
1169   1          { 
1170   2              if (SLOWCLK_X32_CR & 0x20u)
1171   2                  break;
1172   2              CyDelay(1);
1173   2          }
1174   1      
1175   1          /*Check the readiness*/
1176   1          if ((CyXTAL_32KHZ_ReadStatus() & CY_XTAL32K_ANA_STAT) == CY_XTAL32K_ANA_STAT)
1177   1          {
1178   2              CyXTAL_32KHZ_SetPowerMode(0);
1179   2          }
1180   1      }
1181          
1182          
1183          /*******************************************************************************
1184          * Function Name: CyXTAL_32KHZ_Stop
1185          ********************************************************************************
1186          * Summary:
1187          *   Disables the 32KHz Crystal Oscillator.
1188          *
1189          *
1190          * Parameters:
1191          *   void.
1192          *
1193          *
1194          * Return:
1195          *   void.
1196          *
1197          *******************************************************************************/
1198          void CyXTAL_32KHZ_Stop(void) 
1199          {
1200   1      
1201   1      #if (CY_PSOC3_ES3 || CY_PSOC5_ES2)
1202   1          SLOWCLK_X32_TST = X32_TST_SETALL;
1203   1          MFGCFG_X32_TR = X32_TR_CLEAR;
1204   1          SLOWCLK_X32_CFG = (SLOWCLK_X32_CFG & ~X32_CFG_LP_BITS_MASK) | X32_CFG_LP_DEFAULT;
1205   1      #endif
1206   1      
1207   1          /* Disable the oscillator. */
1208   1          SLOWCLK_X32_CR &= ~X32_CONTROL_X32EN;
1209   1      }
1210          
1211          
1212          /*******************************************************************************
1213          * Function Name: CyXTAL_32KHZ_ReadStatus
1214          ********************************************************************************
1215          * Summary:
1216          *   Reads the two status bits for the 32 KHz oscillator.
1217          *
1218          *
1219          * Parameters:
1220          *   None
1221          *
1222          *
1223          * Return:
C51 COMPILER V9.03   CYLIB                                                                 05/13/2012 22:25:57 PAGE 21  

1224          *   Value     Define                    Source
1225          *   20        CY_XTAL32K_ANA_STAT       Analog measurement   
1226          *                                       1: Stable
1227          *                                       0: Not stable
1228          *   10        CY_XTAL32K_DIG_STAT       Digital measurement (Requires the 33 KHz 
1229          *                                       ILO to make this measurement)
1230          *                                       1: Stable
1231          *                                       0: Not stable
1232          *
1233          *******************************************************************************/
1234          uint8 CyXTAL_32KHZ_ReadStatus() 
1235          {
1236   1          uint8 status;
1237   1          status = SLOWCLK_X32_CR;
1238   1          /*
1239   1          Bits 5:4
1240   1          */
1241   1          return (status & CY_XTAL32K_STAT_FIELDS);
1242   1      }
1243          
1244          
1245          /*******************************************************************************
1246          * Function Name: CyXTAL_32KHZ_SetPowerMode
1247          ********************************************************************************
1248          * Summary:
1249          *   Sets the power mode for the 32 KHz oscillator used during sleep mode.  
1250          *   Allows for lower power during sleep when there are fewer sources of noise.  
1251          *   During active mode the oscillator is always run in high power mode.
1252          *
1253          * Parameters:
1254          *   mode
1255          *       0: High power mode
1256          *       1: Low power mode during sleep
1257          *
1258          *
1259          * Return:
1260          *   Previous power mode.
1261          *
1262          *******************************************************************************/
1263          uint8 CyXTAL_32KHZ_SetPowerMode(uint8 mode) 
1264          {
1265   1          uint8 state;
1266   1      
1267   1          /* Get current state. */
1268   1          state = SLOWCLK_X32_CR;
1269   1      
1270   1      #if (CY_PSOC3_ES3 || CY_PSOC5_ES2)
1271   1          /*Set the TST register*/
1272   1          SLOWCLK_X32_TST = X32_TST_SETALL;
1273   1      #endif
1274   1      
1275   1          /* Set the the oscillator power mode. */
1276   1          if(mode == CY_X32_LOWPOWER_MODE)
1277   1          {
1278   2      #if (CY_PSOC3_ES3 || CY_PSOC5_ES2)
1279   2              MFGCFG_X32_TR = X32_TR_LPMODE;
1280   2              SLOWCLK_X32_CFG = (SLOWCLK_X32_CFG & ~X32_CFG_LP_BITS_MASK) | X32_CFG_LP_LOWPOWER;
1281   2              /*allow 20uS delay*/
1282   2              CyDelayUs(20);
1283   2      #endif
1284   2              SLOWCLK_X32_CR = (state | X32_CONTROL_LPM);
1285   2          }
C51 COMPILER V9.03   CYLIB                                                                 05/13/2012 22:25:57 PAGE 22  

1286   1          else
1287   1          {
1288   2      #if (CY_PSOC3_ES3 || CY_PSOC5_ES2)
1289   2              MFGCFG_X32_TR = X32_TR_HPMODE;
1290   2              SLOWCLK_X32_CFG = (SLOWCLK_X32_CFG & ~X32_CFG_LP_BITS_MASK) | X32_CFG_LP_DEFAULT;
1291   2      #endif
1292   2              /*set it in HPM mode*/
1293   2              SLOWCLK_X32_CR = (state & ~X32_CONTROL_LPM);
1294   2          }
1295   1      
1296   1          /* Return the old mode. 
1297   1              Bit 1 position.*/
1298   1          return ((state & X32_CONTROL_LPM) >> X32_CONTROL_LPM_POSITION);
1299   1      }
1300          
1301          
1302          /*******************************************************************************
1303          * Function Name: CyXTAL_Start
1304          ********************************************************************************
1305          * Summary:
1306          *   Enables the megahertz crystal.  
1307          *   Waits until the XERR bit is low (no error) for a millisecond or 
1308          *   until the number of milliseconds specified by the wait parameter has expired.
1309          *
1310          *
1311          * Parameters:
1312          *   wait: Valid range [0-255].
1313          *   This is the timeout value in milliseconds.  
1314          *   The appropriate value is crystal specific.
1315          *
1316          *
1317          * Return:
1318          *   CYRET_SUCCESS - Completed successfully
1319          *   CYRET_TIMEOUT - Timeout occurred without detecting a low value on XERR..
1320          *
1321          * Side Effects and Restrictions:
1322          *   If wait is enabled (non-zero wait):
1323          *    Uses the Fast Timewheel to time the wait.  Any other use of the 
1324          *    Fast Timewheel will be stopped during the period of this function and 
1325          *    then restored.
1326          *    Uses the 100KHz ILO.  If not enabled, this function will enable 
1327          *    the 100KHz ILO for the period of this function.
1328          *    No changes to the setup of the ILO, Fast Timewheel, Central Timewheel or 
1329          *    Once Per Second interrupt may be made by interrupt routines during 
1330          *    the period of this function.  
1331          *    The current operation of the ILO, Central Timewheel and Once Per Second 
1332          *    interrupt are maintained during the operation of this function provided 
1333          *    the reading of the Power Manager Interrupt Status Register is 
1334          *    only done using the CyPmReadStatus() function.
1335          *******************************************************************************/
1336          cystatus CyXTAL_Start(uint8 wait) 
1337          {
1338   1          cystatus status = CYRET_SUCCESS;
1339   1          uint8 pm_tw_cfg2_state = 0;
1340   1          uint8 pm_tw_cfg0_state = 0;
1341   1          uint8 ilo_clock_state = 0;
1342   1          volatile uint8 count = 0;
1343   1          volatile uint8 wait_msec = wait;
1344   1      
1345   1          FASTCLK_XMHZ_CSR |= XMHZ_CONTROL_ENABLE;
1346   1          
1347   1          if(wait > 0) 
C51 COMPILER V9.03   CYLIB                                                                 05/13/2012 22:25:57 PAGE 23  

1348   1          {
1349   2              /*    Need to turn on the 100KHz ILO if it happens to not already be running.*/
1350   2              ilo_clock_state = SLOWCLK_ILO_CR0;
1351   2              if(!(ilo_clock_state & ILO_CONTROL_100KHZ_ON))
1352   2              {
1353   3                  CyILO_Start100K();
1354   3              }
1355   2              status = CYRET_TIMEOUT;
1356   2              
1357   2              /*Store the value*/
1358   2              pm_tw_cfg2_state = PM_TW_CFG2;
1359   2              pm_tw_cfg0_state = PM_TW_CFG0;
1360   2      
1361   2              /* FTW_EN (bit 0) must be clear to change the period*/
1362   2              PM_TW_CFG2 &= FTW_CLEAR_FTW_BITS;
1363   2              
1364   2              /* Set the FTW interval of 25 100KHz ILO clocks
1365   2              Should result in status getting set at a (100/25)KHz rate*/
1366   2              PM_TW_CFG0 = 25-1;
1367   2              /* Enable FTW, but not the interrupt*/
1368   2              PM_TW_CFG2 = FTW_ENABLE;
1369   2          }
1370   1          
1371   1          for(; wait_msec > 0; wait_msec--)
1372   1          {
1373   2              /*read XERR bit to clear it */
1374   2              FASTCLK_XMHZ_CSR;
1375   2              
1376   2              /*wait for milliseconds.. 4 times 250uS delay*/
1377   2              for(count = 4; count > 0; count --)
1378   2              {
1379   3                  /*CyPmReadStatus()*/
1380   3                  while (CyPmReadStatus(1) == 0)
1381   3                  {
1382   4                      /* Wait for the interrupt status*/
1383   4                  }            
1384   3              } /* end of for(count = 4; count > 0; count --)*/
1385   2              /*High output indicates oscillator failure. 
1386   2              Only use this after start-up interval is completed (1ms).*/
1387   2              if ((FASTCLK_XMHZ_CSR & X32_CONTROL_XERR_MASK) == 0) 
1388   2              {
1389   3                  status = CYRET_SUCCESS;
1390   3                  break;
1391   3              }
1392   2          } /* end for(; wait_msec > 0; wait_msec--) */
1393   1      
1394   1          if(wait > 0)
1395   1          {
1396   2              if (!(ilo_clock_state & ILO_CONTROL_100KHZ_ON))
1397   2              {
1398   3                  /*reset the clock */
1399   3                  CyILO_Stop100K();
1400   3              }
1401   2      
1402   2              /*restore the FTW*/
1403   2              PM_TW_CFG0 = pm_tw_cfg0_state;
1404   2              PM_TW_CFG2 = pm_tw_cfg2_state;
1405   2          }
1406   1          
1407   1          return status;
1408   1      }
1409          
C51 COMPILER V9.03   CYLIB                                                                 05/13/2012 22:25:57 PAGE 24  

1410          
1411          /*******************************************************************************
1412          * Function Name: CyXTAL_Stop
1413          ********************************************************************************
1414          * Summary:
1415          *   Disables the megahertz crystal oscillator.
1416          *
1417          *
1418          * Parameters:
1419          *   void.
1420          *
1421          *
1422          * Return:
1423          *   void.
1424          *
1425          *******************************************************************************/
1426          void CyXTAL_Stop(void) 
1427          {
1428   1          /* Disable the the oscillator. */
1429   1          FASTCLK_XMHZ_CSR &= ~XMHZ_CONTROL_ENABLE;
1430   1      }
1431          
1432          
1433          /*******************************************************************************
1434          * Function Name: CyXTAL_EnableErrStatus
1435          ********************************************************************************
1436          * Summary:
1437          *    Enables the generation of the XERR status bit for the megahertz crystal.
1438          *
1439          *
1440          * Parameters:
1441          *   void.
1442          *
1443          *
1444          * Return:
1445          *   void.
1446          *
1447          *******************************************************************************/
1448          void CyXTAL_EnableErrStatus(void) 
1449          {
1450   1          /*1'b0      XFB_DIS_0      enabled. If oscillator has insufficient amplitude, XERR bit will be high. *
             -/
1451   1          FASTCLK_XMHZ_CSR &= ~X32_CONTROL_XERR_DIS;
1452   1      }
1453          
1454          
1455          /*******************************************************************************
1456          * Function Name: CyXTAL_DisableErrStatus
1457          ********************************************************************************
1458          * Summary:
1459          *    Disables the generation of the XERR status bit for the megahertz crystal..
1460          *
1461          *
1462          * Parameters:
1463          *   void.
1464          *
1465          *
1466          * Return:
1467          *   void.
1468          *
1469          *******************************************************************************/
1470          void CyXTAL_DisableErrStatus(void) 
C51 COMPILER V9.03   CYLIB                                                                 05/13/2012 22:25:57 PAGE 25  

1471          {
1472   1          /*1'b0      XFB_DIS_0      enabled. If oscillator has insufficient amplitude, XERR bit will be high. *
             -/
1473   1          FASTCLK_XMHZ_CSR |= X32_CONTROL_XERR_DIS;
1474   1      }
1475          
1476          
1477          /*******************************************************************************
1478          * Function Name: CyXTAL_ReadStatus
1479          ********************************************************************************
1480          * Summary:
1481          *    Reads the XERR status bit for the megahertz crystal.  
1482          *    This status bit is a sticky clear on read value.
1483          *
1484          *
1485          * Parameters:
1486          *   void.
1487          *
1488          *
1489          * Return:
1490          *   Status
1491          *    0: No error
1492          *    1: Error.
1493          *
1494          *******************************************************************************/
1495          uint8 CyXTAL_ReadStatus(void) 
1496          {
1497   1          /*Bits      Name      Description
1498   1              7         xerr     High output indicates oscillator failure. 
1499   1          Only use this after start-up interval is completed. This can be used for 
1500   1          status and failure recovery.
1501   1          */
1502   1          return ((FASTCLK_XMHZ_CSR & X32_CONTROL_XERR_MASK) >> X32_CONTROL_XERR_POSITION);
1503   1      }
1504          
1505          
1506          /*******************************************************************************
1507          * Function Name: CyXTAL_EnableFaultRecovery
1508          ********************************************************************************
1509          * Summary:
1510          *    Enables the fault recovery circuit which will switch to the IMO 
1511          *    in the case of a fault in the megahertz crystal circuit.  
1512          *    The crystal must be up and running with the XERR bit at 0, 
1513          *    before calling this function to prevent immediate fault switchover.
1514          *    This function does not work as intended for PSoC5 TM in case of MHz XTAL 
1515          *    is driving Bus clock.
1516          *
1517          *
1518          * Parameters:
1519          *   void.
1520          *
1521          *
1522          * Return:
1523          *   void.
1524          *
1525          *******************************************************************************/
1526          void CyXTAL_EnableFaultRecovery(void) 
1527          {
1528   1          /*6th bit       xprot of FASTCLK_XMHZ_CSR 
1529   1          */
1530   1          FASTCLK_XMHZ_CSR |= X32_CONTROL_FAULT_RECOVER;
1531   1      }
C51 COMPILER V9.03   CYLIB                                                                 05/13/2012 22:25:57 PAGE 26  

1532          
1533          
1534          /*******************************************************************************
1535          * Function Name: CyXTAL_DisableFaultRecovery
1536          ********************************************************************************
1537          * Summary:
1538          *    Disables the fault recovery circuit which will switch to the IMO 
1539          *     in the case of a fault in the megahertz crystal circuit.
1540          *
1541          *
1542          * Parameters:
1543          *   void.
1544          *
1545          *
1546          * Return:
1547          *   void.
1548          *
1549          *******************************************************************************/
1550          void CyXTAL_DisableFaultRecovery(void) 
1551          {
1552   1          /*6th bit       xprot of FASTCLK_XMHZ_CSR 
1553   1          */
1554   1          FASTCLK_XMHZ_CSR &= ~X32_CONTROL_FAULT_RECOVER;
1555   1      }
1556          
1557          
1558          /*******************************************************************************
1559          * Function Name: CyXTAL_SetStartup
1560          ********************************************************************************
1561          * Summary:
1562          *   Sets the startup settings for the crystal. Logic model outputs 
1563          *   a frequency (setting + 4)MHz when enabled. 
1564          *   This is artificial as the actual frequency is determined by an attached 
1565          *   external crystal.
1566          *
1567          *
1568          * Parameters:
1569          *   setting: Valid range [0-31].  
1570          *    Value is dependent on the frequency and quality of the crystal being used.  
1571          *    PSoC3: Refer to the Register TRM for appropriate values for a specific crystal.
1572          *    PSoC5 TM: Use 0x0F for 4-8 MHz range and 0x19 for 8-25MHz range.
1573          *
1574          *
1575          * Return:
1576          *   void.
1577          *
1578          *******************************************************************************/
1579          void CyXTAL_SetStartup(uint8 setting) 
1580          {
1581   1          /*Valid range 0-31*/
1582   1          FASTCLK_XMHZ_CFG0 = (FASTCLK_XMHZ_CFG0 & ~FASTCLK_XMHZ_GAINMASK) | 
1583   1                               (setting & FASTCLK_XMHZ_GAINMASK);
1584   1      }
1585          
1586          
1587          #if CY_PSOC3_ES3
1588          /*******************************************************************************
1589          * Function Name: CyXTAL_SetFbVoltage
1590          ********************************************************************************
1591          * Summary:
1592          *   Sets the feedback reference voltage to use for the crystal circuit. 
1593          *   This function is only available for ES3 silicon.
C51 COMPILER V9.03   CYLIB                                                                 05/13/2012 22:25:57 PAGE 27  

1594          *
1595          * Parameters:
1596          *   setting: Valid range [0-15].
1597          *   Refer to the Register TRM for details on the mapping of the setting value to 
1598          *   specific voltages.
1599          *
1600          *
1601          * Return:
1602          *   void.
1603          *
1604          *
1605          * Side Effects and Restrictions:
1606          *   The feedback reference voltage must be greater than the watchdog reference 
1607          *   voltage.
1608          *
1609          *******************************************************************************/
1610          void CyXTAL_SetFbVoltage(uint8 setting) 
1611          {
1612   1          /*
1613   1          The register with this value has changed between ES2 and ES3 silicon.
1614   1          */
1615   1          FASTCLK_XMHZ_CFG1 = ((FASTCLK_XMHZ_CFG1 & ~FASTCLK_XMHZ_VREFMASK) | 
1616   1                               (setting & FASTCLK_XMHZ_VREFMASK));
1617   1      }
1618          
1619          
1620          /*******************************************************************************
1621          * Function Name: CyXTAL_SetWdVoltage
1622          ********************************************************************************
1623          * Summary:
1624          *   Sets the reference voltage used by the watchdog to detect a failure 
1625          *   in the crystal circuit. 
1626          *   This function is only available for ES3 silicon.
1627          *
1628          * Parameters:
1629          *   setting: Valid range [0-7].  
1630          *   Refer to the Register TRM for details on the mapping of the setting value to 
1631          *   specific voltages.
1632          *
1633          *
1634          * Return:
1635          *   void.
1636          *
1637          * Side Effects and Restrictions:
1638          *   The feedback reference voltage must be greater than the watchdog 
1639          *   reference voltage.
1640          *
1641          *******************************************************************************/
1642          void CyXTAL_SetWdVoltage(uint8 setting) 
1643          {
1644   1          /*
1645   1          The register with this value has changed between ES2 and ES3 silicon.
1646   1          */
1647   1          FASTCLK_XMHZ_CFG1 = ((FASTCLK_XMHZ_CFG1 & ~FASTCLK_XMHZ_VREF_WD_MASK) | 
1648   1                               ((setting << 4) & FASTCLK_XMHZ_VREF_WD_MASK));
1649   1      }
1650          
1651          #endif /*CY_PSOC3_ES3*/
1652          
1653          /* CYLIB CLOCK funcs end */
1654          
1655          
C51 COMPILER V9.03   CYLIB                                                                 05/13/2012 22:25:57 PAGE 28  

1656          /* CYLIB SYSTEM funcs begin */
1657          
1658          
1659          /*******************************************************************************
1660          * Function Name: CyHalt
1661          ********************************************************************************
1662          * Summary:
1663          *  Halts the CPU
1664          *
1665          *
1666          * Parameters:
1667          *   reason: Value to be used during debugging.
1668          *
1669          *
1670          * Return: 
1671          *   void.
1672          *
1673          *
1674          *******************************************************************************/
1675          void CyHalt(uint8 reason) CYREENTRANT
1676          {
1677   1          reason = reason;
1678   1      #if defined (__ARMCC_VERSION)
                  __breakpoint(0x0);
              #elif defined(__GNUC__)
                  __asm("    bkpt    1");
              #elif defined(__C51__)
1683   1          CYDEV_HALT_CPU;
1684   1      #endif
1685   1      }
1686          
1687          
1688          /*******************************************************************************
1689          * Function Name: CySoftwareReset
1690          ********************************************************************************
1691          * Summary:
1692          *  Forces a software reset of the device.
1693          *
1694          *
1695          * Parameters:
1696          *   None.
1697          *
1698          *
1699          * Return: 
1700          *   void.
1701          *
1702          *
1703          *******************************************************************************/
1704          void CySoftwareReset()
1705          {
1706   1          /* Perform a reset by writing the software reset bit in reset control register 2 */
1707   1          *RESET_CR2 = 0x1;
1708   1      }
1709          
1710          /* CYLIB SYSTEM funcs end */
1711          
1712          
1713          uint32 cydelay_freq_hz = BCLK__BUS_CLK__HZ;
1714          uint32 cydelay_freq_khz = (BCLK__BUS_CLK__HZ + 999u) / 1000u;
1715          uint8 cydelay_freq_mhz = (uint8)((BCLK__BUS_CLK__HZ + 999999u) / 1000000u);
1716          uint32 cydelay_32k_ms = 32768 * ((BCLK__BUS_CLK__HZ + 999u) / 1000u);
1717          
C51 COMPILER V9.03   CYLIB                                                                 05/13/2012 22:25:57 PAGE 29  

1718          
1719          /*******************************************************************************
1720          * Function Name: CyDelay
1721          ********************************************************************************
1722          * Summary:
1723          *   Blocks for milliseconds.
1724          *    Note: CyDelay has been implemented with the instruction cache assumed enabled. 
1725          *      When instruction cache is disabled on PSoC5, CyDelay will be two times 
1726          *      larger. Ex: With instruction cache disabled CyDelay(100) would result 
1727          *      in about 200ms delay instead of 100ms.
1728          *
1729          * Parameters:
1730          *   milliseconds: number of milliseconds to delay.
1731          *
1732          * Return:
1733          *   void.
1734          *
1735          *******************************************************************************/
1736          void CyDelay(uint32 milliseconds) CYREENTRANT
1737          {
1738   1          while (milliseconds > 32768)
1739   1          {
1740   2              /* This loop prevents overflow.
1741   2               * At 100MHz, milliseconds * delay_freq_khz overflows at about 42 seconds
1742   2               */
1743   2              CyDelayCycles(cydelay_32k_ms);
1744   2              milliseconds -= 32768;
1745   2          }
1746   1      
1747   1          CyDelayCycles(milliseconds * cydelay_freq_khz);
1748   1      }
1749          
1750          
1751          /*******************************************************************************
1752          * Function Name: CyDelayUs
1753          ********************************************************************************
1754          * Summary:
1755          *   Blocks for microseconds.
1756          *    Note: CyDelay has been implemented with the instruction cache assumed enabled. 
1757          *      When instruction cache is disabled on PSoC5, CyDelayUs will be two times 
1758          *      larger. Ex: With instruction cache disabled CyDelayUs(100) would result 
1759          *      in about 200us delay instead of 100us.
1760          *
1761          * Parameters:
1762          *   microseconds: number of microseconds to delay.
1763          *
1764          * Return:
1765          *   void.
1766          *
1767          *******************************************************************************/
1768          #if defined(__ARMCC_VERSION)
              void CyDelayUs(uint16 microseconds) CYREENTRANT
              {
                  CyDelayCycles((uint32)microseconds * cydelay_freq_mhz);
              }
              #elif defined(__GNUC__)
              void CyDelayUs(uint16 microseconds) CYREENTRANT
              {
                  CyDelayCycles((uint32)microseconds * cydelay_freq_mhz);
              }
              #endif
1779          
C51 COMPILER V9.03   CYLIB                                                                 05/13/2012 22:25:57 PAGE 30  

1780          
1781          /*******************************************************************************
1782          * Function Name: CyDelayFreq
1783          ********************************************************************************
1784          * Summary:
1785          *   Sets clock frequency for CyDelay.
1786          *
1787          * Parameters:
1788          *   freq: Frequency of bus clock in Hertz.
1789          *
1790          * Return:
1791          *   void.
1792          *
1793          *******************************************************************************/
1794          void CyDelayFreq(uint32 freq) CYREENTRANT
1795          {
1796   1          if (freq != 0u)
1797   1              cydelay_freq_hz = freq;
1798   1          else
1799   1              cydelay_freq_hz = BCLK__BUS_CLK__HZ;
1800   1          cydelay_freq_mhz = (uint8)((cydelay_freq_hz + 999999u) / 1000000u);
1801   1          cydelay_freq_khz = (cydelay_freq_hz + 999u) / 1000u;
1802   1          cydelay_32k_ms = 32768 * cydelay_freq_khz;
1803   1      }
1804          
1805          /*******************************************************************************
1806          * Function Name: CyWdtStart
1807          ********************************************************************************
1808          * Summary:
1809          *  Enables the watchdog timer.  
1810          *  The timer is configured for the specified count interval, the central timewheel 
1811          *  is cleared, the setting for low power mode is configured and the watchdog 
1812          *  timer is enabled.  
1813          *  Once enabled the watchdog cannot be disabled.  
1814          *  The watchdog must be cleared using the CyWdtClear() function before 
1815          *  three ticks of the watchdog timer occur.
1816          *  The ILO 1 KHz must be enabled for proper WDT operation.
1817          *
1818          * Parameters: 
1819          *   ticks: One of the four available timer periods.
1820          *         CYWDT_2_TICKS     -    2 CTW Ticks ==> 2ms (nominal)
1821          *         CYWDT_16_TICKS    -   16 CTW Ticks ==> 16ms (nominal)
1822          *         CYWDT_128_TICKS   -  128 CTW Ticks ==> 128ms (nominal)
1823          *         CYWDT_1024_TICKS  - 1024 CTW Ticks ==> 1024ms (nominal)
1824          *   lpMode: Low power mode configuration
1825          *         CYWDT_LPMODE_NOCHANGE - No Change
1826          *         CYWDT_LPMODE_MAXINTER - Switch to longest timer mode during sleep/hibernate
1827          *         CYWDT_LPMODE_DISABLED - Disable WDT during sleep/hibernate
1828          * 
1829          * Return: 
1830          *  None.
1831          *
1832          *******************************************************************************/
1833          void CyWdtStart(uint8 ticks, uint8 lpMode)
1834          {
1835   1      #if (CY_PSOC3_ES2 || CY_PSOC5_ES1)
                  CyILO_Start1K();
              #endif
1838   1      
1839   1          /* Set the number of ticks. */
1840   1          *CYWDT_CFG = (ticks & CYWDT_TICKS_MASK) | (*CYWDT_CFG & ~CYWDT_TICKS_MASK);
1841   1          
C51 COMPILER V9.03   CYLIB                                                                 05/13/2012 22:25:57 PAGE 31  

1842   1          /*Clear the central time wheel.*/
1843   1          *CYWDT_CFG = CYWDT_RESET | *CYWDT_CFG;
1844   1          *CYWDT_CFG = ~CYWDT_RESET & *CYWDT_CFG;
1845   1          
1846   1          /*To avoid warning of lpmode being unreferenced.*/
1847   1          lpMode = lpMode;
1848   1      #if (CY_PSOC3_ES3 || CY_PSOC5_ES2)
1849   1          /*Setting the low power mode*/
1850   1          *CYWDT_CFG = ((lpMode << CYWDT_LPMODE_SHIFT) & CYWDT_LPMODE_MASK) | (*CYWDT_CFG & ~CYWDT_LPMODE_MASK);
1851   1      #endif
1852   1          
1853   1          /* Enables the watchdog timer.*/
1854   1          *CYWDT_CFG = CYWDT_ENABLE_BIT | *CYWDT_CFG;
1855   1      }
1856          
1857          /*******************************************************************************
1858          * Function Name: CyWdtClear
1859          ********************************************************************************
1860          * Summary:
1861          *  Clears (feeds) the watchdog timer.
1862          *
1863          *
1864          * Parameters: 
1865          *  None.
1866          *
1867          *
1868          * Return: 
1869          *  None.
1870          *
1871          *******************************************************************************/
1872          void CyWdtClear(void)
1873          {
1874   1          /* Clears the Watchdog timer. */
1875   1      #if (((CYDEV_CHIP_MEMBER_USED == CYDEV_CHIP_MEMBER_3A) && (CYDEV_CHIP_REVISION_USED == CYDEV_CHIP_REVISION
             -_3A_ES2)) || \
1876   1           ((CYDEV_CHIP_MEMBER_USED == CYDEV_CHIP_MEMBER_5A) && (CYDEV_CHIP_REVISION_USED == CYDEV_CHIP_REVISION
             -_5A_ES1)))
                  /* PSoC3 ES2 and PSoC5 ES1 watchdog time clear requires workaround */
                  uint8 wdt_cfg_value = *CYWDT_CFG; 
                  *CYWDT_CR = 1; 
                  *CYWDT_CFG = 0; 
                  *CYWDT_CFG = wdt_cfg_value;
              #else
1883   1          *CYWDT_CR = 1;
1884   1      #endif 
1885   1      }
1886          
1887          /*******************************************************************************
1888          * Function Name: CyDisableInts
1889          ********************************************************************************
1890          * Summary:
1891          *  Disables the interrupt enable for each interrupt.
1892          *
1893          *
1894          * Parameters: 
1895          *  None.
1896          *
1897          *
1898          * Return: 
1899          *  32 bit mask of previously enabled interrupts.
1900          *
1901          *******************************************************************************/
C51 COMPILER V9.03   CYLIB                                                                 05/13/2012 22:25:57 PAGE 32  

1902          uint32 CyDisableInts(void) 
1903          {
1904   1          uint32 intState;
1905   1      
1906   1      
1907   1          /* Get the curreent interrutp state. */
1908   1          intState = CY_GET_REG32(CYINT_CLEAR);
1909   1      
1910   1          /* Disable all of the interrupts. */
1911   1          CY_SET_REG32(CYINT_CLEAR, 0xFFFFFFFF);
1912   1      
1913   1          return intState;
1914   1      }
1915          
1916          /*******************************************************************************
1917          * Function Name: CyEnableInts
1918          ********************************************************************************
1919          * Summary:
1920          *  Enables interrupts to a given state.
1921          *
1922          *
1923          * Parameters:
1924          *   mask, 32 bit mask of interrupts to enable.
1925          *
1926          *
1927          * Return: 
1928          *  void.
1929          *
1930          *******************************************************************************/
1931          void CyEnableInts(uint32 mask) 
1932          {
1933   1          /* Set interrupts as enabled. */
1934   1          CY_SET_REG32(CYINT_ENABLE, mask);
1935   1      }
1936          
1937          
1938          /*******************************************************************************
1939          * Function Name: CyIntSetVector
1940          ********************************************************************************
1941          * Summary:
1942          *   Sets the interrupt vector of the specified interrupt number.
1943          *
1944          *
1945          * Parameters:
1946          *   number: Valid range [0-31].  Interrupt number
1947          *
1948          *   address: Pointer to an interrupt service routine
1949          *
1950          * Return:
1951          *   Previous interrupt vector value.
1952          *
1953          *******************************************************************************/
1954          cyisraddress CyIntSetVector(uint8 number, cyisraddress address) 
1955          {
1956   1          cyisraddress oldIsr;
1957   1      
1958   1          CYASSERT(number <= CY_INT_NUMBER_MAX);
1959   1          /* Save old Interrupt service routine. */
1960   1          oldIsr = (cyisraddress) CY_GET_REG16(&CYINT_VECT_TABLE[number & CY_INT_NUMBER_MASK]);
1961   1      
1962   1          /* Set new Interrupt service routine. */
1963   1          CY_SET_REG16(&CYINT_VECT_TABLE[number], (uint16) address);
C51 COMPILER V9.03   CYLIB                                                                 05/13/2012 22:25:57 PAGE 33  

1964   1      
1965   1          return oldIsr;
1966   1      }
1967          
1968          /*******************************************************************************
1969          * Function Name: CyIntGetVector
1970          ********************************************************************************
1971          * Summary:
1972          *   Gets the interrupt vector of the specified interrupt number.
1973          *
1974          *
1975          * Parameters:
1976          *   number: Valid range [0-31].  Interrupt number
1977          *
1978          *
1979          * Return:
1980          *   Address of the ISR in the interrupt vector table.
1981          *
1982          *******************************************************************************/
1983          cyisraddress CyIntGetVector(uint8 number) 
1984          {
1985   1          CYASSERT(number <= CY_INT_NUMBER_MAX);
1986   1          return (cyisraddress) CY_GET_REG16(&CYINT_VECT_TABLE[number & CY_INT_NUMBER_MASK]);
1987   1      }
1988          
1989          /*******************************************************************************
1990          * Function Name: CyIntSetPriority
1991          ********************************************************************************
1992          * Summary:
1993          *   Sets the Priority of the Interrupt.
1994          *
1995          *
1996          * Parameters:
1997          *   priority: Priority of the interrupt. 0 - 7, 0 being the highest.
1998          *
1999          *   number: The number of the interrupt, 0 - 31.
2000          *
2001          * Return:
2002          *   void.
2003          *
2004          *
2005          *******************************************************************************/
2006          void CyIntSetPriority(uint8 number, uint8 priority) 
2007          {
2008   1          CYASSERT(priority <= CY_INT_PRIORITY_MAX);
2009   1          CYASSERT(number <= CY_INT_NUMBER_MAX);
2010   1          CYINT_PRIORITY[number & CY_INT_NUMBER_MASK] = (priority & CY_INT_PRIORITY_MASK) << 5;
2011   1      }
2012          
2013          /*******************************************************************************
2014          * Function Name: CyIntGetPriority
2015          ********************************************************************************
2016          * Summary:
2017          *   Gets the Priority of the Interrupt.
2018          *
2019          *
2020          * Parameters:
2021          *   number: The number of the interrupt, 0 - 31.
2022          *
2023          *
2024          * Return:
2025          *   Priority of the interrupt. 0 - 7, 0 being the highest.
C51 COMPILER V9.03   CYLIB                                                                 05/13/2012 22:25:57 PAGE 34  

2026          *
2027          *
2028          *******************************************************************************/
2029          uint8 CyIntGetPriority(uint8 number) 
2030          {
2031   1          uint8 priority;
2032   1      
2033   1          CYASSERT(number <= CY_INT_NUMBER_MAX);
2034   1      
2035   1          priority = CYINT_PRIORITY[number & CY_INT_NUMBER_MASK] >> 5;
2036   1      
2037   1          return priority;
2038   1      }
2039          
2040          /*******************************************************************************
2041          * Function Name: CyIntEnable
2042          ********************************************************************************
2043          * Summary:
2044          *   Enables the specified interrupt number.
2045          *
2046          *
2047          * Parameters:
2048          *   number: Valid range [0-31].  Interrupt number
2049          *
2050          *
2051          * Return:
2052          *   void.
2053          *
2054          *******************************************************************************/
2055          void CyIntEnable(uint8 number) CYREENTRANT
2056          {
2057   1          reg8 * enableReg;
2058   1      
2059   1          CYASSERT(number <= CY_INT_NUMBER_MAX);
2060   1          /* Get a pointer to the Interrupt enable register. */
2061   1          enableReg = CYINT_ENABLE + ((number & CY_INT_NUMBER_MASK) >> 3);
2062   1      
2063   1          /* Enable the interrupt. */
2064   1          *enableReg = 1 << (0x07 & number);
2065   1      }
2066          
2067          /*******************************************************************************
2068          * Function Name: CyIntGetState
2069          ********************************************************************************
2070          * Summary:
2071          *   Gets the enable state of the specified interrupt number.
2072          *
2073          *
2074          * Parameters:
2075          *   number: Valid range [0-31].  Interrupt number.
2076          *
2077          *
2078          * Return:
2079          *   Enable status: 1 if enabled, 0 if disabled
2080          *
2081          *******************************************************************************/
2082          uint8 CyIntGetState(uint8 number) 
2083          {
2084   1          reg8 * stateReg;
2085   1      
2086   1          CYASSERT(number <= CY_INT_NUMBER_MAX);
2087   1          /* Get a pointer to the Interrupt enable register. */
C51 COMPILER V9.03   CYLIB                                                                 05/13/2012 22:25:57 PAGE 35  

2088   1          stateReg = CYINT_ENABLE + ((number & CY_INT_NUMBER_MASK) >> 3);
2089   1      
2090   1          /* Get the state of the interrupt. */
2091   1          return (*stateReg & (1 << (0x07 & number))) ? 1:0;
2092   1      }
2093          
2094          /*******************************************************************************
2095          * Function Name: CyIntDisable
2096          ********************************************************************************
2097          * Summary:
2098          *   Disables the specified interrupt number.
2099          *
2100          *
2101          * Parameters:
2102          *   number: Valid range [0-31].  Interrupt number.
2103          *
2104          *
2105          * Return:
2106          *   void.
2107          *
2108          *******************************************************************************/
2109          void CyIntDisable(uint8 number) CYREENTRANT
2110          {
2111   1          reg8 * clearReg;
2112   1      
2113   1          CYASSERT(number <= CY_INT_NUMBER_MAX);
2114   1      
2115   1          /* Get a pointer to the Interrupt enable register. */
2116   1          clearReg = CYINT_CLEAR + ((number & CY_INT_NUMBER_MASK) >> 3);
2117   1      
2118   1          /* Enable the interrupt. */
2119   1          *clearReg = 1 << (0x07 & number);
2120   1      }
2121          
2122          /*******************************************************************************
2123          * Function Name: CyIntSetPending
2124          ********************************************************************************
2125          * Summary:
2126          *   Forces the specified interrupt number to be pending.
2127          *
2128          *
2129          * Parameters:
2130          *   number: Valid range [0-31].  Interrupt number.
2131          *
2132          *
2133          * Return:
2134          *   void.
2135          *
2136          *******************************************************************************/
2137          void CyIntSetPending(uint8 number) 
2138          {
2139   1          reg8 * pendReg;
2140   1      
2141   1      
2142   1          CYASSERT(number <= CY_INT_NUMBER_MAX);
2143   1          /* Get a pointer to the Interrupt set pending register. */
2144   1          pendReg = CYINT_SET_PEND + ((number & CY_INT_NUMBER_MASK) >> 3);
2145   1      
2146   1          /* Enable the interrupt. */
2147   1          *pendReg = 1 << (0x07 & number);
2148   1      }
2149          
C51 COMPILER V9.03   CYLIB                                                                 05/13/2012 22:25:57 PAGE 36  

2150          /*******************************************************************************
2151          * Function Name: CyIntClearPending
2152          ********************************************************************************
2153          * Summary:
2154          *   Clears any pending interrupt for the specified interrupt number.
2155          *
2156          * Parameters:
2157          *   number: Valid range [0-31].  Interrupt number.
2158          *
2159          *
2160          * Return:
2161          *   void.
2162          *
2163          *******************************************************************************/
2164          void CyIntClearPending(uint8 number) 
2165          {
2166   1          reg8 * pendReg;
2167   1      
2168   1      
2169   1          CYASSERT(number <= CY_INT_NUMBER_MAX);
2170   1          /* Get a pointer to the Interrupt clear pending register. */
2171   1          pendReg = CYINT_CLR_PEND + ((number & CY_INT_NUMBER_MASK) >> 3);
2172   1      
2173   1          /* Enable the interrupt. */
2174   1          *pendReg = 1 << (0x07 & number);
2175   1      }
2176          
2177          /* cystrcpy, cystrlen, CyGetSwapReg16 and CySetSwapReg16 are obsolete functions.
2178          and are not recommended for use in new code. */
2179          /*******************************************************************************
2180          * Function Name: cystrcpy
2181          ********************************************************************************
2182          * Summary:
2183          *   Recommended not use these function, these are defined for compatibility.
2184          *
2185          *******************************************************************************/
2186          char * cystrcpy(char * s1, char * s2)
2187          {
2188   1          return strcpy(s1, s2);
2189   1      }
2190          
2191          /*******************************************************************************
2192          * Function Name: cystrlen
2193          ********************************************************************************
2194          * Summary:
2195          *   Recommended not use these function, these are defined for compatibility.
2196          *
2197          *******************************************************************************/
2198          uint32 cystrlen(const char * s)
2199          {
2200   1          return strlen(s);
2201   1      }
2202          
2203          /*******************************************************************************
2204          * Function Name: CyGetSwapReg16
2205          ********************************************************************************
2206          * Summary:
2207          *   Recommended not use these function, these are defined for compatibility.
2208          *
2209          *******************************************************************************/
2210          uint16  CyGetSwapReg16(uint16 CYXDATA* addr)
2211          {
C51 COMPILER V9.03   CYLIB                                                                 05/13/2012 22:25:57 PAGE 37  

2212   1          return cyread16_nodpx((void CYFAR *) addr);
2213   1      }
2214          
2215          /*******************************************************************************
2216          * Function Name: CySetSwapReg16
2217          ********************************************************************************
2218          * Summary:
2219          *   Recommended not use these function, these are defined for compatibility.
2220          *
2221          *******************************************************************************/
2222          void CySetSwapReg16(uint16 CYXDATA* addr, uint16 value)    
2223          {
2224   1          cywrite16_nodpx((void CYFAR *) addr, value);
2225   1      }
C51 COMPILER V9.03   CYLIB                                                                 05/13/2012 22:25:57 PAGE 38  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION _CyPLL_OUT_Start (BEGIN)
                                           ; SOURCE LINE # 47
0000 900000      R     MOV     DPTR,#wait
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 48
                                           ; SOURCE LINE # 49
0005 900000      R     MOV     DPTR,#status
0008 E4                CLR     A
0009 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 54
000A 904220            MOV     DPTR,#04220H
000D E0                MOVX    A,@DPTR
000E FF                MOV     R7,A
000F EF                MOV     A,R7
0010 4401              ORL     A,#01H
0012 FF                MOV     R7,A
0013 EF                MOV     A,R7
0014 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 57
0015 900000      R     MOV     DPTR,#wait
0018 E0                MOVX    A,@DPTR
0019 FF                MOV     R7,A
001A EF                MOV     A,R7
001B 7003              JNZ     $ + 5H
001D 020000      R     LJMP    ?C0001
                                           ; SOURCE LINE # 58
                                           ; SOURCE LINE # 60
0020 904300            MOV     DPTR,#04300H
0023 E0                MOVX    A,@DPTR
0024 FF                MOV     R7,A
0025 900000      R     MOV     DPTR,#ilo_clock_state
0028 EF                MOV     A,R7
0029 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 61
002A 900000      R     MOV     DPTR,#ilo_clock_state
002D E0                MOVX    A,@DPTR
002E FF                MOV     R7,A
002F EF                MOV     A,R7
0030 20E203            JB      ACC.2,?C0002
                                           ; SOURCE LINE # 62
                                           ; SOURCE LINE # 63
0033 120000      R     LCALL   CyILO_Start100K
                                           ; SOURCE LINE # 64
0036         ?C0002:
                                           ; SOURCE LINE # 67
0036 904382            MOV     DPTR,#04382H
0039 E0                MOVX    A,@DPTR
003A FF                MOV     R7,A
003B 900000      R     MOV     DPTR,#pm_tw_cfg2_state
003E EF                MOV     A,R7
003F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 68
0040 904380            MOV     DPTR,#04380H
0043 E0                MOVX    A,@DPTR
0044 FF                MOV     R7,A
0045 900000      R     MOV     DPTR,#pm_tw_cfg0_state
0048 EF                MOV     A,R7
0049 F0                MOVX    @DPTR,A
C51 COMPILER V9.03   CYLIB                                                                 05/13/2012 22:25:57 PAGE 39  

                                           ; SOURCE LINE # 71
004A 904382            MOV     DPTR,#04382H
004D E0                MOVX    A,@DPTR
004E FF                MOV     R7,A
004F EF                MOV     A,R7
0050 54FC              ANL     A,#0FCH
0052 FF                MOV     R7,A
0053 EF                MOV     A,R7
0054 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 75
0055 904380            MOV     DPTR,#04380H
0058 7418              MOV     A,#018H
005A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 77
005B 904382            MOV     DPTR,#04382H
005E 7401              MOV     A,#01H
0060 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 79
0061 900000      R     MOV     DPTR,#status
0064 7410              MOV     A,#010H
0066 F0                MOVX    @DPTR,A
0067         ?C0003:
                                           ; SOURCE LINE # 81
0067 7F01              MOV     R7,#01H
0069 120000      E     LCALL   _CyPmReadStatus
006C EF                MOV     A,R7
006D 7017              JNZ     ?C0004
                                           ; SOURCE LINE # 82
                                           ; SOURCE LINE # 84
006F 904225            MOV     DPTR,#04225H
0072 E0                MOVX    A,@DPTR
0073 FF                MOV     R7,A
0074 EF                MOV     A,R7
0075 30E0EF            JNB     ACC.0,?C0003
                                           ; SOURCE LINE # 85
                                           ; SOURCE LINE # 86
0078 904225            MOV     DPTR,#04225H
007B E0                MOVX    A,@DPTR
007C FF                MOV     R7,A
007D EF                MOV     A,R7
007E 30E0E6            JNB     ACC.0,?C0003
                                           ; SOURCE LINE # 87
                                           ; SOURCE LINE # 89
0081 900000      R     MOV     DPTR,#status
0084 E4                CLR     A
0085 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 90
                                           ; SOURCE LINE # 91
                                           ; SOURCE LINE # 92
                                           ; SOURCE LINE # 93
0086         ?C0004:
                                           ; SOURCE LINE # 95
0086 900000      R     MOV     DPTR,#ilo_clock_state
0089 E0                MOVX    A,@DPTR
008A FF                MOV     R7,A
008B EF                MOV     A,R7
008C 20E203            JB      ACC.2,?C0007
                                           ; SOURCE LINE # 96
                                           ; SOURCE LINE # 97
008F 120000      R     LCALL   CyILO_Stop100K
                                           ; SOURCE LINE # 98
0092         ?C0007:
C51 COMPILER V9.03   CYLIB                                                                 05/13/2012 22:25:57 PAGE 40  

                                           ; SOURCE LINE # 101
0092 900000      R     MOV     DPTR,#pm_tw_cfg0_state
0095 E0                MOVX    A,@DPTR
0096 FF                MOV     R7,A
0097 904380            MOV     DPTR,#04380H
009A EF                MOV     A,R7
009B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 102
009C 900000      R     MOV     DPTR,#pm_tw_cfg2_state
009F E0                MOVX    A,@DPTR
00A0 FF                MOV     R7,A
00A1 904382            MOV     DPTR,#04382H
00A4 EF                MOV     A,R7
00A5 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 103
00A6         ?C0001:
                                           ; SOURCE LINE # 104
00A6 900000      R     MOV     DPTR,#status
00A9 E0                MOVX    A,@DPTR
00AA FF                MOV     R7,A
                                           ; SOURCE LINE # 105
00AB         ?C0008:
00AB 22                RET     
             ; FUNCTION _CyPLL_OUT_Start (END)

             ; FUNCTION CyPLL_OUT_Stop (BEGIN)
                                           ; SOURCE LINE # 123
                                           ; SOURCE LINE # 124
                                           ; SOURCE LINE # 126
0000 904220            MOV     DPTR,#04220H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 54FE              ANL     A,#0FEH
0008 FF                MOV     R7,A
0009 EF                MOV     A,R7
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 127
000B 22                RET     
             ; FUNCTION CyPLL_OUT_Stop (END)

             ; FUNCTION _CyPLL_OUT_SetPQ (BEGIN)
                                           ; SOURCE LINE # 151
0000 900000      R     MOV     DPTR,#P
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
0005 900000      R     MOV     DPTR,#Q
0008 ED                MOV     A,R5
0009 F0                MOVX    @DPTR,A
000A 900000      R     MOV     DPTR,#current
000D EB                MOV     A,R3
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 152
                                           ; SOURCE LINE # 153
000F 904220            MOV     DPTR,#04220H
0012 E0                MOVX    A,@DPTR
0013 FF                MOV     R7,A
0014 EF                MOV     A,R7
0015 30E016            JNB     ACC.0,?C0010
0018 904220            MOV     DPTR,#04220H
001B E0                MOVX    A,@DPTR
001C FF                MOV     R7,A
C51 COMPILER V9.03   CYLIB                                                                 05/13/2012 22:25:57 PAGE 41  

001D EF                MOV     A,R7
001E 20E004            JB      ACC.0,?C0011
0021 7F01              MOV     R7,#01H
0023 8002              SJMP    ?C0012
0025         ?C0011:
0025 7F00              MOV     R7,#00H
0027         ?C0012:
0027 E4                CLR     A
0028 FC                MOV     R4,A
0029 FD                MOV     R5,A
002A FE                MOV     R6,A
002B 120000      R     LCALL   _?CyHalt
002E         ?C0010:
                                           ; SOURCE LINE # 157
002E 900000      R     MOV     DPTR,#P
0031 E0                MOVX    A,@DPTR
0032 FF                MOV     R7,A
0033 EF                MOV     A,R7
0034 C3                CLR     C
0035 9404              SUBB    A,#04H
0037 400A              JC      ?C0013
                                           ; SOURCE LINE # 158
                                           ; SOURCE LINE # 159
0039 900000      R     MOV     DPTR,#P
003C E0                MOVX    A,@DPTR
003D FF                MOV     R7,A
003E 904222            MOV     DPTR,#04222H
0041 EF                MOV     A,R7
0042 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 160
0043         ?C0013:
                                           ; SOURCE LINE # 162
0043 900000      R     MOV     DPTR,#Q
0046 E0                MOVX    A,@DPTR
0047 FF                MOV     R7,A
0048 EF                MOV     A,R7
0049 D3                SETB    C
004A 9410              SUBB    A,#010H
004C 5018              JNC     ?C0014
004E 900000      R     MOV     DPTR,#Q
0051 E0                MOVX    A,@DPTR
0052 FF                MOV     R7,A
0053 EF                MOV     A,R7
0054 C3                CLR     C
0055 9401              SUBB    A,#01H
0057 400D              JC      ?C0014
                                           ; SOURCE LINE # 163
                                           ; SOURCE LINE # 164
0059 900000      R     MOV     DPTR,#Q
005C E0                MOVX    A,@DPTR
005D FF                MOV     R7,A
005E EF                MOV     A,R7
005F 14                DEC     A
0060 FF                MOV     R7,A
0061 904223            MOV     DPTR,#04223H
0064 EF                MOV     A,R7
0065 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 165
0066         ?C0014:
                                           ; SOURCE LINE # 166
0066 900000      R     MOV     DPTR,#current
0069 E0                MOVX    A,@DPTR
C51 COMPILER V9.03   CYLIB                                                                 05/13/2012 22:25:57 PAGE 42  

006A FF                MOV     R7,A
006B EF                MOV     A,R7
006C C3                CLR     C
006D 9401              SUBB    A,#01H
006F 4021              JC      ?C0016
0071 900000      R     MOV     DPTR,#current
0074 E0                MOVX    A,@DPTR
0075 FF                MOV     R7,A
0076 EF                MOV     A,R7
0077 D3                SETB    C
0078 9407              SUBB    A,#07H
007A 5016              JNC     ?C0016
                                           ; SOURCE LINE # 167
                                           ; SOURCE LINE # 175
007C 900000      R     MOV     DPTR,#current
007F E0                MOVX    A,@DPTR
0080 FF                MOV     R7,A
0081 EF                MOV     A,R7
0082 14                DEC     A
0083 FF                MOV     R7,A
0084 EF                MOV     A,R7
0085 C4                SWAP    A
0086 54F0              ANL     A,#0F0H
0088 FF                MOV     R7,A
0089 EF                MOV     A,R7
008A 4402              ORL     A,#02H
008C FF                MOV     R7,A
008D 904221            MOV     DPTR,#04221H
0090 EF                MOV     A,R7
0091 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 176
                                           ; SOURCE LINE # 177
0092         ?C0016:
0092 22                RET     
             ; FUNCTION _CyPLL_OUT_SetPQ (END)

             ; FUNCTION _CyPLL_OUT_SetSource (BEGIN)
                                           ; SOURCE LINE # 198
0000 900000      R     MOV     DPTR,#source
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 199
                                           ; SOURCE LINE # 200
0005 904220            MOV     DPTR,#04220H
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B 30E016            JNB     ACC.0,?C0017
000E 904220            MOV     DPTR,#04220H
0011 E0                MOVX    A,@DPTR
0012 FF                MOV     R7,A
0013 EF                MOV     A,R7
0014 20E004            JB      ACC.0,?C0018
0017 7F01              MOV     R7,#01H
0019 8002              SJMP    ?C0019
001B         ?C0018:
001B 7F00              MOV     R7,#00H
001D         ?C0019:
001D E4                CLR     A
001E FC                MOV     R4,A
001F FD                MOV     R5,A
0020 FE                MOV     R6,A
C51 COMPILER V9.03   CYLIB                                                                 05/13/2012 22:25:57 PAGE 43  

0021 120000      R     LCALL   _?CyHalt
0024         ?C0017:
                                           ; SOURCE LINE # 207
0024 900000      R     MOV     DPTR,#source
0027 E0                MOVX    A,@DPTR
0028 FF                MOV     R7,A
0029 EF                MOV     A,R7
002A 120000      E     LCALL   ?C?CCASE
002D 0000        R     DW      ?C0023
002F 00                DB      00H
0030 0000        R     DW      ?C0023
0032 01                DB      01H
0033 0000        R     DW      ?C0023
0035 02                DB      02H
0036 0000              DW      00H
0038 0000        R     DW      ?C0024
                                           ; SOURCE LINE # 208
                                           ; SOURCE LINE # 209
                                           ; SOURCE LINE # 210
                                           ; SOURCE LINE # 211
003A         ?C0023:
                                           ; SOURCE LINE # 212
003A 904000            MOV     DPTR,#04000H
003D E0                MOVX    A,@DPTR
003E FF                MOV     R7,A
003F EF                MOV     A,R7
0040 54FC              ANL     A,#0FCH
0042 FF                MOV     R7,A
0043 900000      R     MOV     DPTR,#source
0046 E0                MOVX    A,@DPTR
0047 FE                MOV     R6,A
0048 EF                MOV     A,R7
0049 4E                ORL     A,R6
004A FF                MOV     R7,A
004B 904000            MOV     DPTR,#04000H
004E EF                MOV     A,R7
004F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 213
                                           ; SOURCE LINE # 214
                                           ; SOURCE LINE # 215
0050         ?C0024:
0050 22                RET     
             ; FUNCTION _CyPLL_OUT_SetSource (END)

             ; FUNCTION _CyIMO_Start (BEGIN)
                                           ; SOURCE LINE # 242
0000 900000      R     MOV     DPTR,#wait
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 243
                                           ; SOURCE LINE # 249
0005 9043A0            MOV     DPTR,#043A0H
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B 4410              ORL     A,#010H
000D FF                MOV     R7,A
000E EF                MOV     A,R7
000F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 252
0010 900000      R     MOV     DPTR,#wait
0013 E0                MOVX    A,@DPTR
C51 COMPILER V9.03   CYLIB                                                                 05/13/2012 22:25:57 PAGE 44  

0014 FF                MOV     R7,A
0015 EF                MOV     A,R7
0016 6068              JZ      ?C0030
                                           ; SOURCE LINE # 253
                                           ; SOURCE LINE # 255
0018 904300            MOV     DPTR,#04300H
001B E0                MOVX    A,@DPTR
001C FF                MOV     R7,A
001D 900000      R     MOV     DPTR,#ilo_clock_state
0020 EF                MOV     A,R7
0021 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 256
0022 900000      R     MOV     DPTR,#ilo_clock_state
0025 E0                MOVX    A,@DPTR
0026 FF                MOV     R7,A
0027 EF                MOV     A,R7
0028 20E203            JB      ACC.2,?C0026
                                           ; SOURCE LINE # 257
                                           ; SOURCE LINE # 258
002B 120000      R     LCALL   CyILO_Start100K
                                           ; SOURCE LINE # 259
002E         ?C0026:
                                           ; SOURCE LINE # 262
002E 904382            MOV     DPTR,#04382H
0031 E0                MOVX    A,@DPTR
0032 FF                MOV     R7,A
0033 900000      R     MOV     DPTR,#pm_tw_cfg2_state
0036 EF                MOV     A,R7
0037 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 263
0038 904380            MOV     DPTR,#04380H
003B E0                MOVX    A,@DPTR
003C FF                MOV     R7,A
003D 900000      R     MOV     DPTR,#pm_tw_cfg0_state
0040 EF                MOV     A,R7
0041 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 266
0042 904382            MOV     DPTR,#04382H
0045 E0                MOVX    A,@DPTR
0046 FF                MOV     R7,A
0047 EF                MOV     A,R7
0048 54FC              ANL     A,#0FCH
004A FF                MOV     R7,A
004B EF                MOV     A,R7
004C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 270
004D 904380            MOV     DPTR,#04380H
0050 E4                CLR     A
0051 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 272
0052 904382            MOV     DPTR,#04382H
0055 7401              MOV     A,#01H
0057 F0                MOVX    @DPTR,A
0058         ?C0027:
                                           ; SOURCE LINE # 275
0058 7F01              MOV     R7,#01H
005A 120000      E     LCALL   _CyPmReadStatus
005D EF                MOV     A,R7
005E 60F8              JZ      ?C0027
                                           ; SOURCE LINE # 276
                                           ; SOURCE LINE # 278
0060         ?C0028:
C51 COMPILER V9.03   CYLIB                                                                 05/13/2012 22:25:57 PAGE 45  

                                           ; SOURCE LINE # 281
0060 900000      R     MOV     DPTR,#ilo_clock_state
0063 E0                MOVX    A,@DPTR
0064 FF                MOV     R7,A
0065 EF                MOV     A,R7
0066 20E203            JB      ACC.2,?C0029
                                           ; SOURCE LINE # 282
                                           ; SOURCE LINE # 283
0069 120000      R     LCALL   CyILO_Stop100K
                                           ; SOURCE LINE # 284
006C         ?C0029:
                                           ; SOURCE LINE # 286
006C 900000      R     MOV     DPTR,#pm_tw_cfg0_state
006F E0                MOVX    A,@DPTR
0070 FF                MOV     R7,A
0071 904380            MOV     DPTR,#04380H
0074 EF                MOV     A,R7
0075 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 287
0076 900000      R     MOV     DPTR,#pm_tw_cfg2_state
0079 E0                MOVX    A,@DPTR
007A FF                MOV     R7,A
007B 904382            MOV     DPTR,#04382H
007E EF                MOV     A,R7
007F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 288
                                           ; SOURCE LINE # 289
0080         ?C0030:
0080 22                RET     
             ; FUNCTION _CyIMO_Start (END)

             ; FUNCTION CyIMO_Stop (BEGIN)
                                           ; SOURCE LINE # 306
                                           ; SOURCE LINE # 307
                                           ; SOURCE LINE # 309
0000 9043A0            MOV     DPTR,#043A0H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 54EF              ANL     A,#0EFH
0008 FF                MOV     R7,A
0009 EF                MOV     A,R7
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 310
000B 22                RET     
             ; FUNCTION CyIMO_Stop (END)

             ; FUNCTION CyUSB_PowerOnCheck (BEGIN)
                                           ; SOURCE LINE # 328
                                           ; SOURCE LINE # 329
                                           ; SOURCE LINE # 330
0000 900000      R     MOV     DPTR,#powered_on
0003 E4                CLR     A
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 338
0005 904393            MOV     DPTR,#04393H
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B 5407              ANL     A,#07H
000D FF                MOV     R7,A
000E 7E00              MOV     R6,#00H
C51 COMPILER V9.03   CYLIB                                                                 05/13/2012 22:25:57 PAGE 46  

0010 EF                MOV     A,R7
0011 4E                ORL     A,R6
0012 700F              JNZ     ?C0034
0014 9043A5            MOV     DPTR,#043A5H
0017 E0                MOVX    A,@DPTR
0018 FF                MOV     R7,A
0019 EF                MOV     A,R7
001A 5401              ANL     A,#01H
001C FF                MOV     R7,A
001D 7E00              MOV     R6,#00H
001F EF                MOV     A,R7
0020 4E                ORL     A,R6
0021 7020              JNZ     ?C0033
0023         ?C0034:
0023 904393            MOV     DPTR,#04393H
0026 E0                MOVX    A,@DPTR
0027 FF                MOV     R7,A
0028 EF                MOV     A,R7
0029 5407              ANL     A,#07H
002B FF                MOV     R7,A
002C 7E00              MOV     R6,#00H
002E EF                MOV     A,R7
002F 6401              XRL     A,#01H
0031 4E                ORL     A,R6
0032 7015              JNZ     ?C0032
0034 9043B5            MOV     DPTR,#043B5H
0037 E0                MOVX    A,@DPTR
0038 FF                MOV     R7,A
0039 EF                MOV     A,R7
003A 5401              ANL     A,#01H
003C FF                MOV     R7,A
003D 7E00              MOV     R6,#00H
003F EF                MOV     A,R7
0040 4E                ORL     A,R6
0041 6006              JZ      ?C0032
0043         ?C0033:
                                           ; SOURCE LINE # 340
                                           ; SOURCE LINE # 341
0043 900000      R     MOV     DPTR,#powered_on
0046 7401              MOV     A,#01H
0048 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 342
0049         ?C0032:
                                           ; SOURCE LINE # 343
0049 900000      R     MOV     DPTR,#powered_on
004C E0                MOVX    A,@DPTR
004D FF                MOV     R7,A
                                           ; SOURCE LINE # 344
004E         ?C0035:
004E 22                RET     
             ; FUNCTION CyUSB_PowerOnCheck (END)

             ; FUNCTION _CyIMO_SetTrimValue (BEGIN)
                                           ; SOURCE LINE # 360
0000 900000      R     MOV     DPTR,#freq
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 361
                                           ; SOURCE LINE # 362
0005 120000      R     LCALL   CyUSB_PowerOnCheck
0008 900000      R     MOV     DPTR,#usb_power_on
000B EF                MOV     A,R7
C51 COMPILER V9.03   CYLIB                                                                 05/13/2012 22:25:57 PAGE 47  

000C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 365
000D 900000      R     MOV     DPTR,#usb_power_on
0010 E0                MOVX    A,@DPTR
0011 FF                MOV     R7,A
0012 EF                MOV     A,R7
0013 B4010B            CJNE    A,#01H,?C0036
                                           ; SOURCE LINE # 366
                                           ; SOURCE LINE # 368
0016 906009            MOV     DPTR,#06009H
0019 E0                MOVX    A,@DPTR
001A FF                MOV     R7,A
001B EF                MOV     A,R7
001C 54FD              ANL     A,#0FDH
001E FF                MOV     R7,A
001F EF                MOV     A,R7
0020 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 369
0021         ?C0036:
                                           ; SOURCE LINE # 370
0021 900000      R     MOV     DPTR,#freq
0024 E0                MOVX    A,@DPTR
0025 FF                MOV     R7,A
0026 EF                MOV     A,R7
0027 120000      E     LCALL   ?C?CCASE
002A 0000        R     DW      ?C0038
002C 00                DB      00H
002D 0000        R     DW      ?C0039
002F 01                DB      01H
0030 0000        R     DW      ?C0040
0032 02                DB      02H
0033 0000        R     DW      ?C0041
0035 03                DB      03H
0036 0000        R     DW      ?C0042
0038 04                DB      04H
0039 0000        R     DW      ?C0043
003B 05                DB      05H
003C 0000        R     DW      ?C0044
003E 06                DB      06H
003F 0000        R     DW      ?C0045
0041 08                DB      08H
0042 0000              DW      00H
0044 0000        R     DW      ?C0047
                                           ; SOURCE LINE # 371
                                           ; SOURCE LINE # 372
0046         ?C0038:
                                           ; SOURCE LINE # 373
0046 7B0C              MOV     R3,#0CH
0048 7A01              MOV     R2,#01H
004A 7908              MOV     R1,#08H
004C 120000      E     LCALL   _cyread8
004F 9046A1            MOV     DPTR,#046A1H
0052 EF                MOV     A,R7
0053 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 374
0054 22                RET     
                                           ; SOURCE LINE # 376
0055         ?C0039:
                                           ; SOURCE LINE # 377
0055 7B0C              MOV     R3,#0CH
0057 7A01              MOV     R2,#01H
0059 7909              MOV     R1,#09H
C51 COMPILER V9.03   CYLIB                                                                 05/13/2012 22:25:57 PAGE 48  

005B 120000      E     LCALL   _cyread8
005E 9046A1            MOV     DPTR,#046A1H
0061 EF                MOV     A,R7
0062 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 378
0063 22                RET     
                                           ; SOURCE LINE # 380
0064         ?C0040:
                                           ; SOURCE LINE # 381
0064 7B0C              MOV     R3,#0CH
0066 7A01              MOV     R2,#01H
0068 790A              MOV     R1,#0AH
006A 120000      E     LCALL   _cyread8
006D 9046A1            MOV     DPTR,#046A1H
0070 EF                MOV     A,R7
0071 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 382
0072 22                RET     
                                           ; SOURCE LINE # 384
0073         ?C0041:
                                           ; SOURCE LINE # 385
0073 7B0C              MOV     R3,#0CH
0075 7A01              MOV     R2,#01H
0077 790B              MOV     R1,#0BH
0079 120000      E     LCALL   _cyread8
007C 9046A1            MOV     DPTR,#046A1H
007F EF                MOV     A,R7
0080 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 386
0081 22                RET     
                                           ; SOURCE LINE # 388
0082         ?C0042:
                                           ; SOURCE LINE # 389
0082 7B0C              MOV     R3,#0CH
0084 7A01              MOV     R2,#01H
0086 7989              MOV     R1,#089H
0088 120000      E     LCALL   _cyread8
008B 9046A1            MOV     DPTR,#046A1H
008E EF                MOV     A,R7
008F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 390
0090 22                RET     
                                           ; SOURCE LINE # 392
0091         ?C0043:
                                           ; SOURCE LINE # 393
0091 7B0C              MOV     R3,#0CH
0093 7A01              MOV     R2,#01H
0095 790C              MOV     R1,#0CH
0097 120000      E     LCALL   _cyread8
009A 9046A1            MOV     DPTR,#046A1H
009D EF                MOV     A,R7
009E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 394
009F 22                RET     
                                           ; SOURCE LINE # 396
00A0         ?C0044:
                                           ; SOURCE LINE # 397
00A0 7B0C              MOV     R3,#0CH
00A2 7A01              MOV     R2,#01H
00A4 790D              MOV     R1,#0DH
00A6 120000      E     LCALL   _cyread8
00A9 9046A1            MOV     DPTR,#046A1H
C51 COMPILER V9.03   CYLIB                                                                 05/13/2012 22:25:57 PAGE 49  

00AC EF                MOV     A,R7
00AD F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 398
00AE 22                RET     
                                           ; SOURCE LINE # 400
00AF         ?C0045:
                                           ; SOURCE LINE # 401
00AF 7B0C              MOV     R3,#0CH
00B1 7A01              MOV     R2,#01H
00B3 790F              MOV     R1,#0FH
00B5 120000      E     LCALL   _cyread8
00B8 9046A1            MOV     DPTR,#046A1H
00BB EF                MOV     A,R7
00BC F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 403
00BD 900000      R     MOV     DPTR,#usb_power_on
00C0 E0                MOVX    A,@DPTR
00C1 FF                MOV     R7,A
00C2 EF                MOV     A,R7
00C3 B40111            CJNE    A,#01H,?C0049
                                           ; SOURCE LINE # 404
                                           ; SOURCE LINE # 406
00C6 906009            MOV     DPTR,#06009H
00C9 E0                MOVX    A,@DPTR
00CA FF                MOV     R7,A
00CB EF                MOV     A,R7
00CC 4402              ORL     A,#02H
00CE FF                MOV     R7,A
00CF EF                MOV     A,R7
00D0 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 407
                                           ; SOURCE LINE # 408
00D1 22                RET     
                                           ; SOURCE LINE # 410
00D2         ?C0047:
                                           ; SOURCE LINE # 411
00D2 7F00              MOV     R7,#00H
00D4 120000      R     LCALL   _?CyHalt
                                           ; SOURCE LINE # 412
                                           ; SOURCE LINE # 413
                                           ; SOURCE LINE # 415
00D7         ?C0049:
00D7 22                RET     
             ; FUNCTION _CyIMO_SetTrimValue (END)

             ; FUNCTION _CyIMO_SetFreq (BEGIN)
                                           ; SOURCE LINE # 449
0000 900000      R     MOV     DPTR,#freq
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 450
                                           ; SOURCE LINE # 472
0005 904200            MOV     DPTR,#04200H
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B 5407              ANL     A,#07H
000D FF                MOV     R7,A
000E 900000      R     MOV     DPTR,#current_freq
0011 EF                MOV     A,R7
0012 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 474
C51 COMPILER V9.03   CYLIB                                                                 05/13/2012 22:25:57 PAGE 50  

0013 900000      R     MOV     DPTR,#freq
0016 E0                MOVX    A,@DPTR
0017 FF                MOV     R7,A
0018 EF                MOV     A,R7
0019 B40804            CJNE    A,#08H,?C0050
001C 7F03              MOV     R7,#03H
001E 8005              SJMP    ?C0051
0020         ?C0050:
0020 900000      R     MOV     DPTR,#freq
0023 E0                MOVX    A,@DPTR
0024 FF                MOV     R7,A
0025         ?C0051:
0025 900000      R     MOV     DPTR,#next_freq
0028 EF                MOV     A,R7
0029 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 475
002A 900000      R     MOV     DPTR,#current_freq
002D E0                MOVX    A,@DPTR
002E FF                MOV     R7,A
002F EF                MOV     A,R7
0030 120000      E     LCALL   ?C?CCASE
0033 0000        R     DW      ?C0053
0035 00                DB      00H
0036 0000        R     DW      ?C0054
0038 01                DB      01H
0039 0000        R     DW      ?C0055
003B 02                DB      02H
003C 0000        R     DW      ?C0056
003E 03                DB      03H
003F 0000        R     DW      ?C0057
0041 04                DB      04H
0042 0000        R     DW      ?C0058
0044 05                DB      05H
0045 0000        R     DW      ?C0059
0047 06                DB      06H
0048 0000              DW      00H
004A 0000        R     DW      ?C0052
                                           ; SOURCE LINE # 476
                                           ; SOURCE LINE # 477
004C         ?C0053:
                                           ; SOURCE LINE # 478
004C 900000      R     MOV     DPTR,#current_freq
004F 7402              MOV     A,#02H
0051 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 479
0052 802D              SJMP    ?C0052
                                           ; SOURCE LINE # 481
0054         ?C0054:
                                           ; SOURCE LINE # 482
0054 900000      R     MOV     DPTR,#current_freq
0057 7401              MOV     A,#01H
0059 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 483
005A 8025              SJMP    ?C0052
                                           ; SOURCE LINE # 485
005C         ?C0055:
                                           ; SOURCE LINE # 486
005C 900000      R     MOV     DPTR,#current_freq
005F 7403              MOV     A,#03H
0061 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 487
0062 801D              SJMP    ?C0052
C51 COMPILER V9.03   CYLIB                                                                 05/13/2012 22:25:57 PAGE 51  

                                           ; SOURCE LINE # 489
0064         ?C0056:
                                           ; SOURCE LINE # 490
0064 900000      R     MOV     DPTR,#current_freq
0067 E4                CLR     A
0068 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 491
0069 8016              SJMP    ?C0052
                                           ; SOURCE LINE # 493
006B         ?C0057:
                                           ; SOURCE LINE # 494
006B 900000      R     MOV     DPTR,#current_freq
006E 7404              MOV     A,#04H
0070 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 495
0071 800E              SJMP    ?C0052
                                           ; SOURCE LINE # 497
0073         ?C0058:
                                           ; SOURCE LINE # 498
0073 900000      R     MOV     DPTR,#current_freq
0076 7405              MOV     A,#05H
0078 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 499
0079 8006              SJMP    ?C0052
                                           ; SOURCE LINE # 501
007B         ?C0059:
                                           ; SOURCE LINE # 502
007B 900000      R     MOV     DPTR,#current_freq
007E 7406              MOV     A,#06H
0080 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 503
                                           ; SOURCE LINE # 504
0081         ?C0052:
                                           ; SOURCE LINE # 506
0081 900000      R     MOV     DPTR,#current_freq
0084 E0                MOVX    A,@DPTR
0085 FF                MOV     R7,A
0086 900000      R     MOV     DPTR,#next_freq
0089 E0                MOVX    A,@DPTR
008A FE                MOV     R6,A
008B EE                MOV     A,R6
008C C3                CLR     C
008D 9F                SUBB    A,R7
008E 4008              JC      ?C0060
                                           ; SOURCE LINE # 507
                                           ; SOURCE LINE # 509
0090 900000      R     MOV     DPTR,#freq
0093 E0                MOVX    A,@DPTR
0094 FF                MOV     R7,A
0095 120000      R     LCALL   _CyIMO_SetTrimValue
                                           ; SOURCE LINE # 510
0098         ?C0060:
                                           ; SOURCE LINE # 513
0098 900000      R     MOV     DPTR,#freq
009B E0                MOVX    A,@DPTR
009C FF                MOV     R7,A
009D EF                MOV     A,R7
009E 120000      E     LCALL   ?C?CCASE
00A1 0000        R     DW      ?C0062
00A3 00                DB      00H
00A4 0000        R     DW      ?C0063
00A6 01                DB      01H
C51 COMPILER V9.03   CYLIB                                                                 05/13/2012 22:25:57 PAGE 52  

00A7 0000        R     DW      ?C0064
00A9 02                DB      02H
00AA 0000        R     DW      ?C0065
00AC 03                DB      03H
00AD 0000        R     DW      ?C0066
00AF 04                DB      04H
00B0 0000        R     DW      ?C0067
00B2 05                DB      05H
00B3 0000        R     DW      ?C0068
00B5 06                DB      06H
00B6 0000        R     DW      ?C0069
00B8 08                DB      08H
00B9 0000              DW      00H
00BB 0000        R     DW      ?C0070
                                           ; SOURCE LINE # 514
                                           ; SOURCE LINE # 515
00BD         ?C0062:
                                           ; SOURCE LINE # 516
00BD 904200            MOV     DPTR,#04200H
00C0 E0                MOVX    A,@DPTR
00C1 FF                MOV     R7,A
00C2 EF                MOV     A,R7
00C3 54F8              ANL     A,#0F8H
00C5 FF                MOV     R7,A
00C6 EF                MOV     A,R7
00C7 4403              ORL     A,#03H
00C9 FF                MOV     R7,A
00CA EF                MOV     A,R7
00CB 54BF              ANL     A,#0BFH
00CD FF                MOV     R7,A
00CE 904200            MOV     DPTR,#04200H
00D1 EF                MOV     A,R7
00D2 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 517
00D3 020000      R     LJMP    ?C0061
                                           ; SOURCE LINE # 519
00D6         ?C0063:
                                           ; SOURCE LINE # 520
00D6 904200            MOV     DPTR,#04200H
00D9 E0                MOVX    A,@DPTR
00DA FF                MOV     R7,A
00DB EF                MOV     A,R7
00DC 54F8              ANL     A,#0F8H
00DE FF                MOV     R7,A
00DF EF                MOV     A,R7
00E0 4401              ORL     A,#01H
00E2 FF                MOV     R7,A
00E3 EF                MOV     A,R7
00E4 54BF              ANL     A,#0BFH
00E6 FF                MOV     R7,A
00E7 904200            MOV     DPTR,#04200H
00EA EF                MOV     A,R7
00EB F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 521
00EC 020000      R     LJMP    ?C0061
                                           ; SOURCE LINE # 523
00EF         ?C0064:
                                           ; SOURCE LINE # 524
00EF 904200            MOV     DPTR,#04200H
00F2 E0                MOVX    A,@DPTR
00F3 FF                MOV     R7,A
00F4 EF                MOV     A,R7
C51 COMPILER V9.03   CYLIB                                                                 05/13/2012 22:25:57 PAGE 53  

00F5 54B8              ANL     A,#0B8H
00F7 FF                MOV     R7,A
00F8 EF                MOV     A,R7
00F9 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 525
00FA 8079              SJMP    ?C0061
                                           ; SOURCE LINE # 527
00FC         ?C0065:
                                           ; SOURCE LINE # 528
00FC 904200            MOV     DPTR,#04200H
00FF E0                MOVX    A,@DPTR
0100 FF                MOV     R7,A
0101 EF                MOV     A,R7
0102 54F8              ANL     A,#0F8H
0104 FF                MOV     R7,A
0105 EF                MOV     A,R7
0106 4402              ORL     A,#02H
0108 FF                MOV     R7,A
0109 EF                MOV     A,R7
010A 54BF              ANL     A,#0BFH
010C FF                MOV     R7,A
010D 904200            MOV     DPTR,#04200H
0110 EF                MOV     A,R7
0111 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 529
0112 8061              SJMP    ?C0061
                                           ; SOURCE LINE # 531
0114         ?C0066:
                                           ; SOURCE LINE # 532
0114 904200            MOV     DPTR,#04200H
0117 E0                MOVX    A,@DPTR
0118 FF                MOV     R7,A
0119 EF                MOV     A,R7
011A 54F8              ANL     A,#0F8H
011C FF                MOV     R7,A
011D EF                MOV     A,R7
011E 4404              ORL     A,#04H
0120 FF                MOV     R7,A
0121 EF                MOV     A,R7
0122 54BF              ANL     A,#0BFH
0124 FF                MOV     R7,A
0125 904200            MOV     DPTR,#04200H
0128 EF                MOV     A,R7
0129 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 533
012A 8049              SJMP    ?C0061
                                           ; SOURCE LINE # 535
012C         ?C0067:
                                           ; SOURCE LINE # 536
012C 904200            MOV     DPTR,#04200H
012F E0                MOVX    A,@DPTR
0130 FF                MOV     R7,A
0131 EF                MOV     A,R7
0132 54F8              ANL     A,#0F8H
0134 FF                MOV     R7,A
0135 EF                MOV     A,R7
0136 4405              ORL     A,#05H
0138 FF                MOV     R7,A
0139 EF                MOV     A,R7
013A 54BF              ANL     A,#0BFH
013C FF                MOV     R7,A
013D 904200            MOV     DPTR,#04200H
C51 COMPILER V9.03   CYLIB                                                                 05/13/2012 22:25:57 PAGE 54  

0140 EF                MOV     A,R7
0141 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 537
0142 8031              SJMP    ?C0061
                                           ; SOURCE LINE # 539
0144         ?C0068:
                                           ; SOURCE LINE # 540
0144 904200            MOV     DPTR,#04200H
0147 E0                MOVX    A,@DPTR
0148 FF                MOV     R7,A
0149 EF                MOV     A,R7
014A 54F8              ANL     A,#0F8H
014C FF                MOV     R7,A
014D EF                MOV     A,R7
014E 4406              ORL     A,#06H
0150 FF                MOV     R7,A
0151 EF                MOV     A,R7
0152 54BF              ANL     A,#0BFH
0154 FF                MOV     R7,A
0155 904200            MOV     DPTR,#04200H
0158 EF                MOV     A,R7
0159 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 541
015A 8019              SJMP    ?C0061
                                           ; SOURCE LINE # 543
015C         ?C0069:
                                           ; SOURCE LINE # 544
015C 904200            MOV     DPTR,#04200H
015F E0                MOVX    A,@DPTR
0160 FF                MOV     R7,A
0161 EF                MOV     A,R7
0162 54F8              ANL     A,#0F8H
0164 FF                MOV     R7,A
0165 EF                MOV     A,R7
0166 4442              ORL     A,#042H
0168 FF                MOV     R7,A
0169 904200            MOV     DPTR,#04200H
016C EF                MOV     A,R7
016D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 545
016E 8005              SJMP    ?C0061
                                           ; SOURCE LINE # 547
0170         ?C0070:
                                           ; SOURCE LINE # 549
0170 7F00              MOV     R7,#00H
0172 120000      R     LCALL   _?CyHalt
                                           ; SOURCE LINE # 550
                                           ; SOURCE LINE # 551
0175         ?C0061:
                                           ; SOURCE LINE # 554
0175 900000      R     MOV     DPTR,#freq
0178 E0                MOVX    A,@DPTR
0179 FF                MOV     R7,A
017A EF                MOV     A,R7
017B B40805            CJNE    A,#08H,?C0072
                                           ; SOURCE LINE # 555
                                           ; SOURCE LINE # 556
017E 120000      R     LCALL   CyIMO_EnableDoubler
                                           ; SOURCE LINE # 557
0181 8003              SJMP    ?C0073
0183         ?C0072:
                                           ; SOURCE LINE # 559
C51 COMPILER V9.03   CYLIB                                                                 05/13/2012 22:25:57 PAGE 55  

                                           ; SOURCE LINE # 560
0183 120000      R     LCALL   CyIMO_DisableDoubler
                                           ; SOURCE LINE # 561
0186         ?C0073:
                                           ; SOURCE LINE # 563
0186 900000      R     MOV     DPTR,#current_freq
0189 E0                MOVX    A,@DPTR
018A FF                MOV     R7,A
018B 900000      R     MOV     DPTR,#next_freq
018E E0                MOVX    A,@DPTR
018F FE                MOV     R6,A
0190 EE                MOV     A,R6
0191 C3                CLR     C
0192 9F                SUBB    A,R7
0193 5008              JNC     ?C0075
                                           ; SOURCE LINE # 564
                                           ; SOURCE LINE # 566
0195 900000      R     MOV     DPTR,#freq
0198 E0                MOVX    A,@DPTR
0199 FF                MOV     R7,A
019A 120000      R     LCALL   _CyIMO_SetTrimValue
                                           ; SOURCE LINE # 567
                                           ; SOURCE LINE # 568
019D         ?C0075:
019D 22                RET     
             ; FUNCTION _CyIMO_SetFreq (END)

             ; FUNCTION _CyIMO_SetSource (BEGIN)
                                           ; SOURCE LINE # 594
0000 900000      R     MOV     DPTR,#source
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 595
                                           ; SOURCE LINE # 613
0005 900000      R     MOV     DPTR,#source
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B 120000      E     LCALL   ?C?CCASE
000E 0000        R     DW      ?C0079
0010 00                DB      00H
0011 0000        R     DW      ?C0078
0013 01                DB      01H
0014 0000        R     DW      ?C0077
0016 02                DB      02H
0017 0000              DW      00H
0019 0000        R     DW      ?C0080
                                           ; SOURCE LINE # 614
                                           ; SOURCE LINE # 615
001B         ?C0077:
                                           ; SOURCE LINE # 616
001B 904000            MOV     DPTR,#04000H
001E E0                MOVX    A,@DPTR
001F FF                MOV     R7,A
0020 EF                MOV     A,R7
0021 54BF              ANL     A,#0BFH
0023 FF                MOV     R7,A
0024 EF                MOV     A,R7
0025 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 617
0026 904200            MOV     DPTR,#04200H
0029 E0                MOVX    A,@DPTR
C51 COMPILER V9.03   CYLIB                                                                 05/13/2012 22:25:57 PAGE 56  

002A FF                MOV     R7,A
002B EF                MOV     A,R7
002C 4420              ORL     A,#020H
002E FF                MOV     R7,A
002F EF                MOV     A,R7
0030 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 618
0031 22                RET     
                                           ; SOURCE LINE # 620
0032         ?C0078:
                                           ; SOURCE LINE # 621
0032 904000            MOV     DPTR,#04000H
0035 E0                MOVX    A,@DPTR
0036 FF                MOV     R7,A
0037 EF                MOV     A,R7
0038 4440              ORL     A,#040H
003A FF                MOV     R7,A
003B EF                MOV     A,R7
003C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 622
003D 904200            MOV     DPTR,#04200H
0040 E0                MOVX    A,@DPTR
0041 FF                MOV     R7,A
0042 EF                MOV     A,R7
0043 4420              ORL     A,#020H
0045 FF                MOV     R7,A
0046 EF                MOV     A,R7
0047 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 623
0048 22                RET     
                                           ; SOURCE LINE # 625
0049         ?C0079:
                                           ; SOURCE LINE # 626
0049 904200            MOV     DPTR,#04200H
004C E0                MOVX    A,@DPTR
004D FF                MOV     R7,A
004E EF                MOV     A,R7
004F 54DF              ANL     A,#0DFH
0051 FF                MOV     R7,A
0052 EF                MOV     A,R7
0053 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 627
0054 22                RET     
                                           ; SOURCE LINE # 629
0055         ?C0080:
                                           ; SOURCE LINE # 631
0055 7F00              MOV     R7,#00H
0057 120000      R     LCALL   _?CyHalt
                                           ; SOURCE LINE # 632
                                           ; SOURCE LINE # 633
                                           ; SOURCE LINE # 634
005A         ?C0082:
005A 22                RET     
             ; FUNCTION _CyIMO_SetSource (END)

             ; FUNCTION CyIMO_EnableDoubler (BEGIN)
                                           ; SOURCE LINE # 653
                                           ; SOURCE LINE # 654
                                           ; SOURCE LINE # 656
0000 904200            MOV     DPTR,#04200H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
C51 COMPILER V9.03   CYLIB                                                                 05/13/2012 22:25:57 PAGE 57  

0005 EF                MOV     A,R7
0006 4410              ORL     A,#010H
0008 FF                MOV     R7,A
0009 EF                MOV     A,R7
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 657
000B 22                RET     
             ; FUNCTION CyIMO_EnableDoubler (END)

             ; FUNCTION CyIMO_DisableDoubler (BEGIN)
                                           ; SOURCE LINE # 675
                                           ; SOURCE LINE # 676
                                           ; SOURCE LINE # 678
0000 904200            MOV     DPTR,#04200H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 54EF              ANL     A,#0EFH
0008 FF                MOV     R7,A
0009 EF                MOV     A,R7
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 679
000B 22                RET     
             ; FUNCTION CyIMO_DisableDoubler (END)

             ; FUNCTION _CyMasterClk_SetSource (BEGIN)
                                           ; SOURCE LINE # 705
0000 900000      R     MOV     DPTR,#source
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 706
                                           ; SOURCE LINE # 735
0005 904005            MOV     DPTR,#04005H
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A 900000      R     MOV     DPTR,#master_reg_1
000D EF                MOV     A,R7
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 737
000F 900000      R     MOV     DPTR,#source
0012 E0                MOVX    A,@DPTR
0013 FF                MOV     R7,A
0014 EF                MOV     A,R7
0015 5403              ANL     A,#03H
0017 FF                MOV     R7,A
0018 900000      R     MOV     DPTR,#master_reg_1
001B E0                MOVX    A,@DPTR
001C FE                MOV     R6,A
001D EE                MOV     A,R6
001E 54FC              ANL     A,#0FCH
0020 FE                MOV     R6,A
0021 EE                MOV     A,R6
0022 4F                ORL     A,R7
0023 FF                MOV     R7,A
0024 904005            MOV     DPTR,#04005H
0027 EF                MOV     A,R7
0028 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 746
0029 22                RET     
             ; FUNCTION _CyMasterClk_SetSource (END)

             ; FUNCTION _CyMasterClk_SetDivider (BEGIN)
C51 COMPILER V9.03   CYLIB                                                                 05/13/2012 22:25:57 PAGE 58  

                                           ; SOURCE LINE # 768
0000 900000      R     MOV     DPTR,#divider
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 769
                                           ; SOURCE LINE # 770
0005 900000      R     MOV     DPTR,#divider
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A 904004            MOV     DPTR,#04004H
000D EF                MOV     A,R7
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 771
000F 22                RET     
             ; FUNCTION _CyMasterClk_SetDivider (END)

             ; FUNCTION _CyBusClk_Internal_SetDivider (BEGIN)
                                           ; SOURCE LINE # 793
0000 900000      R     MOV     DPTR,#divider
0003 EE                MOV     A,R6
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 794
                                           ; SOURCE LINE # 796
0008 904014            MOV     DPTR,#04014H
000B E0                MOVX    A,@DPTR
000C FF                MOV     R7,A
000D EF                MOV     A,R7
000E 54F0              ANL     A,#0F0H
0010 FF                MOV     R7,A
0011 EF                MOV     A,R7
0012 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 797
0013 904010            MOV     DPTR,#04010H
0016 E4                CLR     A
0017 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 803
0018 904008            MOV     DPTR,#04008H
001B E0                MOVX    A,@DPTR
001C FF                MOV     R7,A
001D EF                MOV     A,R7
001E 4480              ORL     A,#080H
0020 FF                MOV     R7,A
0021 EF                MOV     A,R7
0022 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 806
0023 7B02              MOV     R3,#02H
0025 7A40              MOV     R2,#040H
0027 7902              MOV     R1,#02H
0029 900000      R     MOV     DPTR,#divider
002C E0                MOVX    A,@DPTR
002D FC                MOV     R4,A
002E A3                INC     DPTR
002F E0                MOVX    A,@DPTR
0030 FD                MOV     R5,A
0031 120000      E     LCALL   _cywrite16_nodpx
                                           ; SOURCE LINE # 809
0034 904001            MOV     DPTR,#04001H
0037 E0                MOVX    A,@DPTR
0038 FF                MOV     R7,A
C51 COMPILER V9.03   CYLIB                                                                 05/13/2012 22:25:57 PAGE 59  

0039 EF                MOV     A,R7
003A 4401              ORL     A,#01H
003C FF                MOV     R7,A
003D EF                MOV     A,R7
003E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 810
003F 22                RET     
             ; FUNCTION _CyBusClk_Internal_SetDivider (END)

             ; FUNCTION _CyBusClk_SetDivider (BEGIN)
                                           ; SOURCE LINE # 832
0000 900000      R     MOV     DPTR,#divider
0003 EE                MOV     A,R6
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 833
                                           ; SOURCE LINE # 838
0008 7B02              MOV     R3,#02H
000A 7A40              MOV     R2,#040H
000C 7906              MOV     R1,#06H
000E 120000      E     LCALL   _cyread16_nodpx
0011 900000      R     MOV     DPTR,#current_busclk_divider
0014 EE                MOV     A,R6
0015 F0                MOVX    @DPTR,A
0016 A3                INC     DPTR
0017 EF                MOV     A,R7
0018 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 841
0019 900000      R     MOV     DPTR,#divider
001C E0                MOVX    A,@DPTR
001D FE                MOV     R6,A
001E A3                INC     DPTR
001F E0                MOVX    A,@DPTR
0020 FF                MOV     R7,A
0021 EF                MOV     A,R7
0022 4E                ORL     A,R6
0023 600C              JZ      ?C0089
0025 900000      R     MOV     DPTR,#current_busclk_divider
0028 E0                MOVX    A,@DPTR
0029 FE                MOV     R6,A
002A A3                INC     DPTR
002B E0                MOVX    A,@DPTR
002C FF                MOV     R7,A
002D EF                MOV     A,R7
002E 4E                ORL     A,R6
002F 705D              JNZ     ?C0088
0031         ?C0089:
                                           ; SOURCE LINE # 842
                                           ; SOURCE LINE # 844
0031 904004            MOV     DPTR,#04004H
0034 E0                MOVX    A,@DPTR
0035 FF                MOV     R7,A
0036 900000      R     MOV     DPTR,#current_masterclk_divider
0039 EF                MOV     A,R7
003A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 845
003B 900000      R     MOV     DPTR,#current_masterclk_divider
003E E0                MOVX    A,@DPTR
003F FF                MOV     R7,A
0040 EF                MOV     A,R7
C51 COMPILER V9.03   CYLIB                                                                 05/13/2012 22:25:57 PAGE 60  

0041 C3                CLR     C
0042 9407              SUBB    A,#07H
0044 5005              JNC     ?C0090
                                           ; SOURCE LINE # 846
                                           ; SOURCE LINE # 848
0046 7F07              MOV     R7,#07H
0048 120000      R     LCALL   _CyMasterClk_SetDivider
                                           ; SOURCE LINE # 849
004B         ?C0090:
                                           ; SOURCE LINE # 850
004B 900000      R     MOV     DPTR,#divider
004E E0                MOVX    A,@DPTR
004F FE                MOV     R6,A
0050 A3                INC     DPTR
0051 E0                MOVX    A,@DPTR
0052 FF                MOV     R7,A
0053 EF                MOV     A,R7
0054 4E                ORL     A,R6
0055 7018              JNZ     ?C0091
                                           ; SOURCE LINE # 851
                                           ; SOURCE LINE # 855
0057 904008            MOV     DPTR,#04008H
005A E0                MOVX    A,@DPTR
005B FF                MOV     R7,A
005C EF                MOV     A,R7
005D 4440              ORL     A,#040H
005F FF                MOV     R7,A
0060 EF                MOV     A,R7
0061 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 856
0062 900000      R     MOV     DPTR,#divider
0065 E0                MOVX    A,@DPTR
0066 FE                MOV     R6,A
0067 A3                INC     DPTR
0068 E0                MOVX    A,@DPTR
0069 FF                MOV     R7,A
006A 120000      R     LCALL   _CyBusClk_Internal_SetDivider
                                           ; SOURCE LINE # 857
006D 8016              SJMP    ?C0092
006F         ?C0091:
                                           ; SOURCE LINE # 859
                                           ; SOURCE LINE # 863
006F 900000      R     MOV     DPTR,#divider
0072 E0                MOVX    A,@DPTR
0073 FE                MOV     R6,A
0074 A3                INC     DPTR
0075 E0                MOVX    A,@DPTR
0076 FF                MOV     R7,A
0077 120000      R     LCALL   _CyBusClk_Internal_SetDivider
                                           ; SOURCE LINE # 864
007A 904008            MOV     DPTR,#04008H
007D E0                MOVX    A,@DPTR
007E FF                MOV     R7,A
007F EF                MOV     A,R7
0080 54BF              ANL     A,#0BFH
0082 FF                MOV     R7,A
0083 EF                MOV     A,R7
0084 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 865
0085         ?C0092:
                                           ; SOURCE LINE # 867
0085 900000      R     MOV     DPTR,#current_masterclk_divider
C51 COMPILER V9.03   CYLIB                                                                 05/13/2012 22:25:57 PAGE 61  

0088 E0                MOVX    A,@DPTR
0089 FF                MOV     R7,A
008A 120000      R     LCALL   _CyMasterClk_SetDivider
                                           ; SOURCE LINE # 868
008D 22                RET     
008E         ?C0088:
                                           ; SOURCE LINE # 870
                                           ; SOURCE LINE # 871
008E 900000      R     MOV     DPTR,#divider
0091 E0                MOVX    A,@DPTR
0092 FE                MOV     R6,A
0093 A3                INC     DPTR
0094 E0                MOVX    A,@DPTR
0095 FF                MOV     R7,A
0096 120000      R     LCALL   _CyBusClk_Internal_SetDivider
                                           ; SOURCE LINE # 872
                                           ; SOURCE LINE # 873
0099         ?C0094:
0099 22                RET     
             ; FUNCTION _CyBusClk_SetDivider (END)

             ; FUNCTION _CyCpuClk_SetDivider (BEGIN)
                                           ; SOURCE LINE # 893
0000 900000      R     MOV     DPTR,#divider
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 894
                                           ; SOURCE LINE # 896
0005 900000      R     MOV     DPTR,#divider
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B C4                SWAP    A
000C 54F0              ANL     A,#0F0H
000E FF                MOV     R7,A
000F 904005            MOV     DPTR,#04005H
0012 E0                MOVX    A,@DPTR
0013 FE                MOV     R6,A
0014 EE                MOV     A,R6
0015 540F              ANL     A,#0FH
0017 FE                MOV     R6,A
0018 EF                MOV     A,R7
0019 4E                ORL     A,R6
001A FF                MOV     R7,A
001B 904005            MOV     DPTR,#04005H
001E EF                MOV     A,R7
001F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 900
0020 22                RET     
             ; FUNCTION _CyCpuClk_SetDivider (END)

             ; FUNCTION _CyUsbClk_SetSource (BEGIN)
                                           ; SOURCE LINE # 922
0000 900000      R     MOV     DPTR,#source
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 923
                                           ; SOURCE LINE # 925
0005 900000      R     MOV     DPTR,#source
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
C51 COMPILER V9.03   CYLIB                                                                 05/13/2012 22:25:57 PAGE 62  

000B 5403              ANL     A,#03H
000D FF                MOV     R7,A
000E 904009            MOV     DPTR,#04009H
0011 E0                MOVX    A,@DPTR
0012 FE                MOV     R6,A
0013 EE                MOV     A,R6
0014 54FC              ANL     A,#0FCH
0016 FE                MOV     R6,A
0017 EE                MOV     A,R6
0018 4F                ORL     A,R7
0019 FF                MOV     R7,A
001A 904009            MOV     DPTR,#04009H
001D EF                MOV     A,R7
001E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 926
001F 22                RET     
             ; FUNCTION _CyUsbClk_SetSource (END)

             ; FUNCTION CyILO_Start1K (BEGIN)
                                           ; SOURCE LINE # 944
                                           ; SOURCE LINE # 945
                                           ; SOURCE LINE # 947
0000 904300            MOV     DPTR,#04300H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 4402              ORL     A,#02H
0008 FF                MOV     R7,A
0009 EF                MOV     A,R7
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 948
000B 22                RET     
             ; FUNCTION CyILO_Start1K (END)

             ; FUNCTION CyILO_Stop1K (BEGIN)
                                           ; SOURCE LINE # 967
                                           ; SOURCE LINE # 968
                                           ; SOURCE LINE # 970
0000 904300            MOV     DPTR,#04300H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 54FD              ANL     A,#0FDH
0008 FF                MOV     R7,A
0009 EF                MOV     A,R7
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 971
000B 22                RET     
             ; FUNCTION CyILO_Stop1K (END)

             ; FUNCTION CyILO_Start100K (BEGIN)
                                           ; SOURCE LINE # 989
                                           ; SOURCE LINE # 990
                                           ; SOURCE LINE # 992
0000 904300            MOV     DPTR,#04300H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 4404              ORL     A,#04H
0008 FF                MOV     R7,A
0009 EF                MOV     A,R7
000A F0                MOVX    @DPTR,A
C51 COMPILER V9.03   CYLIB                                                                 05/13/2012 22:25:57 PAGE 63  

                                           ; SOURCE LINE # 993
000B 22                RET     
             ; FUNCTION CyILO_Start100K (END)

             ; FUNCTION CyILO_Stop100K (BEGIN)
                                           ; SOURCE LINE # 1011
                                           ; SOURCE LINE # 1012
                                           ; SOURCE LINE # 1014
0000 904300            MOV     DPTR,#04300H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 54FB              ANL     A,#0FBH
0008 FF                MOV     R7,A
0009 EF                MOV     A,R7
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1015
000B 22                RET     
             ; FUNCTION CyILO_Stop100K (END)

             ; FUNCTION CyILO_Enable33K (BEGIN)
                                           ; SOURCE LINE # 1035
                                           ; SOURCE LINE # 1036
                                           ; SOURCE LINE # 1038
0000 904300            MOV     DPTR,#04300H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 4420              ORL     A,#020H
0008 FF                MOV     R7,A
0009 EF                MOV     A,R7
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1039
000B 22                RET     
             ; FUNCTION CyILO_Enable33K (END)

             ; FUNCTION CyILO_Disable33K (BEGIN)
                                           ; SOURCE LINE # 1059
                                           ; SOURCE LINE # 1060
                                           ; SOURCE LINE # 1062
0000 904300            MOV     DPTR,#04300H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 54DF              ANL     A,#0DFH
0008 FF                MOV     R7,A
0009 EF                MOV     A,R7
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1063
000B 22                RET     
             ; FUNCTION CyILO_Disable33K (END)

             ; FUNCTION _CyILO_SetSource (BEGIN)
                                           ; SOURCE LINE # 1085
0000 900000      R     MOV     DPTR,#source
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1086
                                           ; SOURCE LINE # 1088
0005 900000      R     MOV     DPTR,#source
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
C51 COMPILER V9.03   CYLIB                                                                 05/13/2012 22:25:57 PAGE 64  

000A EF                MOV     A,R7
000B 25E0              ADD     A,ACC
000D 25E0              ADD     A,ACC
000F FF                MOV     R7,A
0010 EF                MOV     A,R7
0011 540C              ANL     A,#0CH
0013 FF                MOV     R7,A
0014 904000            MOV     DPTR,#04000H
0017 E0                MOVX    A,@DPTR
0018 FE                MOV     R6,A
0019 EE                MOV     A,R6
001A 54F3              ANL     A,#0F3H
001C FE                MOV     R6,A
001D EE                MOV     A,R6
001E 4F                ORL     A,R7
001F FF                MOV     R7,A
0020 904000            MOV     DPTR,#04000H
0023 EF                MOV     A,R7
0024 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1089
0025 22                RET     
             ; FUNCTION _CyILO_SetSource (END)

             ; FUNCTION _CyILO_SetPowerMode (BEGIN)
                                           ; SOURCE LINE # 1111
0000 900000      R     MOV     DPTR,#mode
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1112
                                           ; SOURCE LINE # 1116
0005 904300            MOV     DPTR,#04300H
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A 900000      R     MOV     DPTR,#state
000D EF                MOV     A,R7
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1119
000F 900000      R     MOV     DPTR,#mode
0012 E0                MOVX    A,@DPTR
0013 FF                MOV     R7,A
0014 EF                MOV     A,R7
0015 6010              JZ      ?C0104
                                           ; SOURCE LINE # 1120
                                           ; SOURCE LINE # 1121
0017 900000      R     MOV     DPTR,#state
001A E0                MOVX    A,@DPTR
001B FF                MOV     R7,A
001C EF                MOV     A,R7
001D 4410              ORL     A,#010H
001F FF                MOV     R7,A
0020 904300            MOV     DPTR,#04300H
0023 EF                MOV     A,R7
0024 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1122
0025 800E              SJMP    ?C0105
0027         ?C0104:
                                           ; SOURCE LINE # 1124
                                           ; SOURCE LINE # 1125
0027 900000      R     MOV     DPTR,#state
002A E0                MOVX    A,@DPTR
002B FF                MOV     R7,A
002C EF                MOV     A,R7
C51 COMPILER V9.03   CYLIB                                                                 05/13/2012 22:25:57 PAGE 65  

002D 54EF              ANL     A,#0EFH
002F FF                MOV     R7,A
0030 904300            MOV     DPTR,#04300H
0033 EF                MOV     A,R7
0034 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1126
0035         ?C0105:
                                           ; SOURCE LINE # 1129
0035 900000      R     MOV     DPTR,#state
0038 E0                MOVX    A,@DPTR
0039 FF                MOV     R7,A
003A EF                MOV     A,R7
003B 5410              ANL     A,#010H
003D FF                MOV     R7,A
003E EF                MOV     A,R7
003F C4                SWAP    A
0040 540F              ANL     A,#0FH
0042 FF                MOV     R7,A
                                           ; SOURCE LINE # 1130
0043         ?C0106:
0043 22                RET     
             ; FUNCTION _CyILO_SetPowerMode (END)

             ; FUNCTION CyXTAL_32KHZ_Start (BEGIN)
                                           ; SOURCE LINE # 1148
                                           ; SOURCE LINE # 1149
                                           ; SOURCE LINE # 1151
0000 7B01              MOV     R3,#01H
0002 7A00        R     MOV     R2,#HIGH timeout
0004 7900        R     MOV     R1,#LOW timeout
0006 900000      R     MOV     DPTR,#timeout_p
0009 120000      E     LCALL   ?C?PSTXDATA
                                           ; SOURCE LINE # 1153
000C 90430A            MOV     DPTR,#0430AH
000F 74F3              MOV     A,#0F3H
0011 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1155
0012 904698            MOV     DPTR,#04698H
0015 7403              MOV     A,#03H
0017 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1159
0018 904309            MOV     DPTR,#04309H
001B E0                MOVX    A,@DPTR
001C FF                MOV     R7,A
001D EF                MOV     A,R7
001E 54F3              ANL     A,#0F3H
0020 FF                MOV     R7,A
0021 EF                MOV     A,R7
0022 4404              ORL     A,#04H
0024 FF                MOV     R7,A
0025 904309            MOV     DPTR,#04309H
0028 EF                MOV     A,R7
0029 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1163
002A 904308            MOV     DPTR,#04308H
002D E0                MOVX    A,@DPTR
002E FF                MOV     R7,A
002F EF                MOV     A,R7
0030 4404              ORL     A,#04H
0032 FF                MOV     R7,A
0033 EF                MOV     A,R7
0034 F0                MOVX    @DPTR,A
C51 COMPILER V9.03   CYLIB                                                                 05/13/2012 22:25:57 PAGE 66  

                                           ; SOURCE LINE # 1167
0035 904308            MOV     DPTR,#04308H
0038 E0                MOVX    A,@DPTR
0039 FF                MOV     R7,A
003A EF                MOV     A,R7
003B 4401              ORL     A,#01H
003D FF                MOV     R7,A
003E EF                MOV     A,R7
003F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1168
0040 7FE8              MOV     R7,#0E8H
0042 7E03              MOV     R6,#03H
0044 7D00              MOV     R5,#00H
0046 7C00              MOV     R4,#00H
0048 900000      R     MOV     DPTR,#timeout
004B 120000      E     LCALL   ?C?LSTXDATA
004E         ?C0107:
004E 900000      R     MOV     DPTR,#timeout_p
0051 120000      E     LCALL   ?C?PLDXDATA
0054 120000      E     LCALL   ?C?LLDPTR
0057 EC                MOV     A,R4
0058 4D                ORL     A,R5
0059 4E                ORL     A,R6
005A 4F                ORL     A,R7
005B 602D              JZ      ?C0108
                                           ; SOURCE LINE # 1169
                                           ; SOURCE LINE # 1170
005D 904308            MOV     DPTR,#04308H
0060 E0                MOVX    A,@DPTR
0061 FF                MOV     R7,A
0062 EF                MOV     A,R7
0063 20E524            JB      ACC.5,?C0108
                                           ; SOURCE LINE # 1171
0066         ?C0110:
                                           ; SOURCE LINE # 1172
0066 7F01              MOV     R7,#01H
0068 7E00              MOV     R6,#00H
006A 7D00              MOV     R5,#00H
006C 7C00              MOV     R4,#00H
006E 120000      R     LCALL   _?CyDelay
                                           ; SOURCE LINE # 1173
0071 900000      R     MOV     DPTR,#timeout
0074 120000      E     LCALL   ?C?LLDXDATA
0077 7BFF              MOV     R3,#0FFH
0079 7AFF              MOV     R2,#0FFH
007B 79FF              MOV     R1,#0FFH
007D 78FF              MOV     R0,#0FFH
007F 120000      E     LCALL   ?C?LADD
0082 900000      R     MOV     DPTR,#timeout
0085 120000      E     LCALL   ?C?LSTXDATA
0088 80C4              SJMP    ?C0107
008A         ?C0108:
                                           ; SOURCE LINE # 1176
008A 120000      R     LCALL   CyXTAL_32KHZ_ReadStatus
008D EF                MOV     A,R7
008E 30E505            JNB     ACC.5,?C0112
                                           ; SOURCE LINE # 1177
                                           ; SOURCE LINE # 1178
0091 7F00              MOV     R7,#00H
0093 120000      R     LCALL   _CyXTAL_32KHZ_SetPowerMode
                                           ; SOURCE LINE # 1179
                                           ; SOURCE LINE # 1180
C51 COMPILER V9.03   CYLIB                                                                 05/13/2012 22:25:57 PAGE 67  

0096         ?C0112:
0096 22                RET     
             ; FUNCTION CyXTAL_32KHZ_Start (END)

             ; FUNCTION CyXTAL_32KHZ_Stop (BEGIN)
                                           ; SOURCE LINE # 1198
                                           ; SOURCE LINE # 1199
                                           ; SOURCE LINE # 1202
0000 90430A            MOV     DPTR,#0430AH
0003 74F3              MOV     A,#0F3H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1203
0006 904698            MOV     DPTR,#04698H
0009 E4                CLR     A
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1204
000B 904309            MOV     DPTR,#04309H
000E E0                MOVX    A,@DPTR
000F FF                MOV     R7,A
0010 EF                MOV     A,R7
0011 54F3              ANL     A,#0F3H
0013 FF                MOV     R7,A
0014 EF                MOV     A,R7
0015 4404              ORL     A,#04H
0017 FF                MOV     R7,A
0018 904309            MOV     DPTR,#04309H
001B EF                MOV     A,R7
001C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1208
001D 904308            MOV     DPTR,#04308H
0020 E0                MOVX    A,@DPTR
0021 FF                MOV     R7,A
0022 EF                MOV     A,R7
0023 54FE              ANL     A,#0FEH
0025 FF                MOV     R7,A
0026 EF                MOV     A,R7
0027 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1209
0028 22                RET     
             ; FUNCTION CyXTAL_32KHZ_Stop (END)

             ; FUNCTION CyXTAL_32KHZ_ReadStatus (BEGIN)
                                           ; SOURCE LINE # 1234
                                           ; SOURCE LINE # 1235
                                           ; SOURCE LINE # 1237
0000 904308            MOV     DPTR,#04308H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 900000      R     MOV     DPTR,#status
0008 EF                MOV     A,R7
0009 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1241
000A 900000      R     MOV     DPTR,#status
000D E0                MOVX    A,@DPTR
000E FF                MOV     R7,A
000F EF                MOV     A,R7
0010 5430              ANL     A,#030H
0012 FF                MOV     R7,A
                                           ; SOURCE LINE # 1242
0013         ?C0114:
0013 22                RET     
             ; FUNCTION CyXTAL_32KHZ_ReadStatus (END)
C51 COMPILER V9.03   CYLIB                                                                 05/13/2012 22:25:57 PAGE 68  


             ; FUNCTION _CyXTAL_32KHZ_SetPowerMode (BEGIN)
                                           ; SOURCE LINE # 1263
0000 900000      R     MOV     DPTR,#mode
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1264
                                           ; SOURCE LINE # 1268
0005 904308            MOV     DPTR,#04308H
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A 900000      R     MOV     DPTR,#state
000D EF                MOV     A,R7
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1272
000F 90430A            MOV     DPTR,#0430AH
0012 74F3              MOV     A,#0F3H
0014 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1276
0015 900000      R     MOV     DPTR,#mode
0018 E0                MOVX    A,@DPTR
0019 FF                MOV     R7,A
001A EF                MOV     A,R7
001B 6401              XRL     A,#01H
001D 702F              JNZ     ?C0115
                                           ; SOURCE LINE # 1277
                                           ; SOURCE LINE # 1279
001F 904698            MOV     DPTR,#04698H
0022 7401              MOV     A,#01H
0024 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1280
0025 904309            MOV     DPTR,#04309H
0028 E0                MOVX    A,@DPTR
0029 FF                MOV     R7,A
002A EF                MOV     A,R7
002B 54F3              ANL     A,#0F3H
002D FF                MOV     R7,A
002E EF                MOV     A,R7
002F 4408              ORL     A,#08H
0031 FF                MOV     R7,A
0032 904309            MOV     DPTR,#04309H
0035 EF                MOV     A,R7
0036 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1282
0037 7F14              MOV     R7,#014H
0039 7E00              MOV     R6,#00H
003B 120000      E     LCALL   _CyDelayUs
                                           ; SOURCE LINE # 1284
003E 900000      R     MOV     DPTR,#state
0041 E0                MOVX    A,@DPTR
0042 FF                MOV     R7,A
0043 EF                MOV     A,R7
0044 4402              ORL     A,#02H
0046 FF                MOV     R7,A
0047 904308            MOV     DPTR,#04308H
004A EF                MOV     A,R7
004B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1285
004C 8026              SJMP    ?C0116
004E         ?C0115:
                                           ; SOURCE LINE # 1287
                                           ; SOURCE LINE # 1289
C51 COMPILER V9.03   CYLIB                                                                 05/13/2012 22:25:57 PAGE 69  

004E 904698            MOV     DPTR,#04698H
0051 7406              MOV     A,#06H
0053 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1290
0054 904309            MOV     DPTR,#04309H
0057 E0                MOVX    A,@DPTR
0058 FF                MOV     R7,A
0059 EF                MOV     A,R7
005A 54F3              ANL     A,#0F3H
005C FF                MOV     R7,A
005D EF                MOV     A,R7
005E 4404              ORL     A,#04H
0060 FF                MOV     R7,A
0061 904309            MOV     DPTR,#04309H
0064 EF                MOV     A,R7
0065 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1293
0066 900000      R     MOV     DPTR,#state
0069 E0                MOVX    A,@DPTR
006A FF                MOV     R7,A
006B EF                MOV     A,R7
006C 54FD              ANL     A,#0FDH
006E FF                MOV     R7,A
006F 904308            MOV     DPTR,#04308H
0072 EF                MOV     A,R7
0073 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1294
0074         ?C0116:
                                           ; SOURCE LINE # 1298
0074 900000      R     MOV     DPTR,#state
0077 E0                MOVX    A,@DPTR
0078 FF                MOV     R7,A
0079 EF                MOV     A,R7
007A 5402              ANL     A,#02H
007C FF                MOV     R7,A
007D EF                MOV     A,R7
007E C3                CLR     C
007F 13                RRC     A
0080 FF                MOV     R7,A
                                           ; SOURCE LINE # 1299
0081         ?C0117:
0081 22                RET     
             ; FUNCTION _CyXTAL_32KHZ_SetPowerMode (END)

             ; FUNCTION _CyXTAL_Start (BEGIN)
                                           ; SOURCE LINE # 1336
0000 900000      R     MOV     DPTR,#wait
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1337
                                           ; SOURCE LINE # 1338
0005 900000      R     MOV     DPTR,#status
0008 E4                CLR     A
0009 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1339
000A 900000      R     MOV     DPTR,#pm_tw_cfg2_state
000D E4                CLR     A
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1340
000F 900000      R     MOV     DPTR,#pm_tw_cfg0_state
0012 E4                CLR     A
0013 F0                MOVX    @DPTR,A
C51 COMPILER V9.03   CYLIB                                                                 05/13/2012 22:25:57 PAGE 70  

                                           ; SOURCE LINE # 1341
0014 900000      R     MOV     DPTR,#ilo_clock_state
0017 E4                CLR     A
0018 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1342
0019 900000      R     MOV     DPTR,#count
001C E4                CLR     A
001D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1343
001E 900000      R     MOV     DPTR,#wait
0021 E0                MOVX    A,@DPTR
0022 FF                MOV     R7,A
0023 900000      R     MOV     DPTR,#wait_msec
0026 EF                MOV     A,R7
0027 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1345
0028 904210            MOV     DPTR,#04210H
002B E0                MOVX    A,@DPTR
002C FF                MOV     R7,A
002D EF                MOV     A,R7
002E 4401              ORL     A,#01H
0030 FF                MOV     R7,A
0031 EF                MOV     A,R7
0032 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1347
0033 900000      R     MOV     DPTR,#wait
0036 E0                MOVX    A,@DPTR
0037 FF                MOV     R7,A
0038 EF                MOV     A,R7
0039 D3                SETB    C
003A 9400              SUBB    A,#00H
003C 4047              JC      ?C0120
                                           ; SOURCE LINE # 1348
                                           ; SOURCE LINE # 1350
003E 904300            MOV     DPTR,#04300H
0041 E0                MOVX    A,@DPTR
0042 FF                MOV     R7,A
0043 900000      R     MOV     DPTR,#ilo_clock_state
0046 EF                MOV     A,R7
0047 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1351
0048 900000      R     MOV     DPTR,#ilo_clock_state
004B E0                MOVX    A,@DPTR
004C FF                MOV     R7,A
004D EF                MOV     A,R7
004E 20E203            JB      ACC.2,?C0119
                                           ; SOURCE LINE # 1352
                                           ; SOURCE LINE # 1353
0051 120000      R     LCALL   CyILO_Start100K
                                           ; SOURCE LINE # 1354
0054         ?C0119:
                                           ; SOURCE LINE # 1355
0054 900000      R     MOV     DPTR,#status
0057 7410              MOV     A,#010H
0059 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1358
005A 904382            MOV     DPTR,#04382H
005D E0                MOVX    A,@DPTR
005E FF                MOV     R7,A
005F 900000      R     MOV     DPTR,#pm_tw_cfg2_state
0062 EF                MOV     A,R7
0063 F0                MOVX    @DPTR,A
C51 COMPILER V9.03   CYLIB                                                                 05/13/2012 22:25:57 PAGE 71  

                                           ; SOURCE LINE # 1359
0064 904380            MOV     DPTR,#04380H
0067 E0                MOVX    A,@DPTR
0068 FF                MOV     R7,A
0069 900000      R     MOV     DPTR,#pm_tw_cfg0_state
006C EF                MOV     A,R7
006D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1362
006E 904382            MOV     DPTR,#04382H
0071 E0                MOVX    A,@DPTR
0072 FF                MOV     R7,A
0073 EF                MOV     A,R7
0074 54FC              ANL     A,#0FCH
0076 FF                MOV     R7,A
0077 EF                MOV     A,R7
0078 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1366
0079 904380            MOV     DPTR,#04380H
007C 7418              MOV     A,#018H
007E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1368
007F 904382            MOV     DPTR,#04382H
0082 7401              MOV     A,#01H
0084 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1369
                                           ; SOURCE LINE # 1371
0085         ?C0120:
0085 900000      R     MOV     DPTR,#wait_msec
0088 E0                MOVX    A,@DPTR
0089 FF                MOV     R7,A
008A EF                MOV     A,R7
008B D3                SETB    C
008C 9400              SUBB    A,#00H
008E 403E              JC      ?C0121
                                           ; SOURCE LINE # 1372
                                           ; SOURCE LINE # 1374
0090 904210            MOV     DPTR,#04210H
0093 E0                MOVX    A,@DPTR
0094 FF                MOV     R7,A
                                           ; SOURCE LINE # 1377
0095 900000      R     MOV     DPTR,#count
0098 7404              MOV     A,#04H
009A F0                MOVX    @DPTR,A
009B         ?C0123:
009B 900000      R     MOV     DPTR,#count
009E E0                MOVX    A,@DPTR
009F FF                MOV     R7,A
00A0 EF                MOV     A,R7
00A1 D3                SETB    C
00A2 9400              SUBB    A,#00H
00A4 4010              JC      ?C0124
                                           ; SOURCE LINE # 1378
00A6         ?C0126:
                                           ; SOURCE LINE # 1380
00A6 7F01              MOV     R7,#01H
00A8 120000      E     LCALL   _CyPmReadStatus
00AB EF                MOV     A,R7
00AC 60F8              JZ      ?C0126
                                           ; SOURCE LINE # 1381
                                           ; SOURCE LINE # 1383
00AE         ?C0127:
                                           ; SOURCE LINE # 1384
C51 COMPILER V9.03   CYLIB                                                                 05/13/2012 22:25:57 PAGE 72  

00AE         ?C0125:
00AE 900000      R     MOV     DPTR,#count
00B1 E0                MOVX    A,@DPTR
00B2 14                DEC     A
00B3 F0                MOVX    @DPTR,A
00B4 80E5              SJMP    ?C0123
00B6         ?C0124:
                                           ; SOURCE LINE # 1387
00B6 904210            MOV     DPTR,#04210H
00B9 E0                MOVX    A,@DPTR
00BA FF                MOV     R7,A
00BB EF                MOV     A,R7
00BC 20E707            JB      ACC.7,?C0122
                                           ; SOURCE LINE # 1388
                                           ; SOURCE LINE # 1389
00BF 900000      R     MOV     DPTR,#status
00C2 E4                CLR     A
00C3 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1390
00C4 8008              SJMP    ?C0121
                                           ; SOURCE LINE # 1391
                                           ; SOURCE LINE # 1392
00C6         ?C0122:
00C6 900000      R     MOV     DPTR,#wait_msec
00C9 E0                MOVX    A,@DPTR
00CA 14                DEC     A
00CB F0                MOVX    @DPTR,A
00CC 80B7              SJMP    ?C0120
00CE         ?C0121:
                                           ; SOURCE LINE # 1394
00CE 900000      R     MOV     DPTR,#wait
00D1 E0                MOVX    A,@DPTR
00D2 FF                MOV     R7,A
00D3 EF                MOV     A,R7
00D4 D3                SETB    C
00D5 9400              SUBB    A,#00H
00D7 4020              JC      ?C0129
                                           ; SOURCE LINE # 1395
                                           ; SOURCE LINE # 1396
00D9 900000      R     MOV     DPTR,#ilo_clock_state
00DC E0                MOVX    A,@DPTR
00DD FF                MOV     R7,A
00DE EF                MOV     A,R7
00DF 20E203            JB      ACC.2,?C0130
                                           ; SOURCE LINE # 1397
                                           ; SOURCE LINE # 1399
00E2 120000      R     LCALL   CyILO_Stop100K
                                           ; SOURCE LINE # 1400
00E5         ?C0130:
                                           ; SOURCE LINE # 1403
00E5 900000      R     MOV     DPTR,#pm_tw_cfg0_state
00E8 E0                MOVX    A,@DPTR
00E9 FF                MOV     R7,A
00EA 904380            MOV     DPTR,#04380H
00ED EF                MOV     A,R7
00EE F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1404
00EF 900000      R     MOV     DPTR,#pm_tw_cfg2_state
00F2 E0                MOVX    A,@DPTR
00F3 FF                MOV     R7,A
00F4 904382            MOV     DPTR,#04382H
00F7 EF                MOV     A,R7
C51 COMPILER V9.03   CYLIB                                                                 05/13/2012 22:25:57 PAGE 73  

00F8 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1405
00F9         ?C0129:
                                           ; SOURCE LINE # 1407
00F9 900000      R     MOV     DPTR,#status
00FC E0                MOVX    A,@DPTR
00FD FF                MOV     R7,A
                                           ; SOURCE LINE # 1408
00FE         ?C0131:
00FE 22                RET     
             ; FUNCTION _CyXTAL_Start (END)

             ; FUNCTION CyXTAL_Stop (BEGIN)
                                           ; SOURCE LINE # 1426
                                           ; SOURCE LINE # 1427
                                           ; SOURCE LINE # 1429
0000 904210            MOV     DPTR,#04210H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 54FE              ANL     A,#0FEH
0008 FF                MOV     R7,A
0009 EF                MOV     A,R7
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1430
000B 22                RET     
             ; FUNCTION CyXTAL_Stop (END)

             ; FUNCTION CyXTAL_EnableErrStatus (BEGIN)
                                           ; SOURCE LINE # 1448
                                           ; SOURCE LINE # 1449
                                           ; SOURCE LINE # 1451
0000 904210            MOV     DPTR,#04210H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 54FB              ANL     A,#0FBH
0008 FF                MOV     R7,A
0009 EF                MOV     A,R7
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1452
000B 22                RET     
             ; FUNCTION CyXTAL_EnableErrStatus (END)

             ; FUNCTION CyXTAL_DisableErrStatus (BEGIN)
                                           ; SOURCE LINE # 1470
                                           ; SOURCE LINE # 1471
                                           ; SOURCE LINE # 1473
0000 904210            MOV     DPTR,#04210H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 4404              ORL     A,#04H
0008 FF                MOV     R7,A
0009 EF                MOV     A,R7
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1474
000B 22                RET     
             ; FUNCTION CyXTAL_DisableErrStatus (END)

             ; FUNCTION CyXTAL_ReadStatus (BEGIN)
                                           ; SOURCE LINE # 1495
C51 COMPILER V9.03   CYLIB                                                                 05/13/2012 22:25:57 PAGE 74  

                                           ; SOURCE LINE # 1496
                                           ; SOURCE LINE # 1502
0000 904210            MOV     DPTR,#04210H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 5480              ANL     A,#080H
0008 FF                MOV     R7,A
0009 EF                MOV     A,R7
000A C4                SWAP    A
000B 13                RRC     A
000C 13                RRC     A
000D 13                RRC     A
000E 5401              ANL     A,#01H
0010 FF                MOV     R7,A
                                           ; SOURCE LINE # 1503
0011         ?C0135:
0011 22                RET     
             ; FUNCTION CyXTAL_ReadStatus (END)

             ; FUNCTION CyXTAL_EnableFaultRecovery (BEGIN)
                                           ; SOURCE LINE # 1526
                                           ; SOURCE LINE # 1527
                                           ; SOURCE LINE # 1530
0000 904210            MOV     DPTR,#04210H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 4440              ORL     A,#040H
0008 FF                MOV     R7,A
0009 EF                MOV     A,R7
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1531
000B 22                RET     
             ; FUNCTION CyXTAL_EnableFaultRecovery (END)

             ; FUNCTION CyXTAL_DisableFaultRecovery (BEGIN)
                                           ; SOURCE LINE # 1550
                                           ; SOURCE LINE # 1551
                                           ; SOURCE LINE # 1554
0000 904210            MOV     DPTR,#04210H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 54BF              ANL     A,#0BFH
0008 FF                MOV     R7,A
0009 EF                MOV     A,R7
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1555
000B 22                RET     
             ; FUNCTION CyXTAL_DisableFaultRecovery (END)

             ; FUNCTION _CyXTAL_SetStartup (BEGIN)
                                           ; SOURCE LINE # 1579
0000 900000      R     MOV     DPTR,#setting
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1580
                                           ; SOURCE LINE # 1582
0005 900000      R     MOV     DPTR,#setting
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
C51 COMPILER V9.03   CYLIB                                                                 05/13/2012 22:25:57 PAGE 75  

000A EF                MOV     A,R7
000B 541F              ANL     A,#01FH
000D FF                MOV     R7,A
000E 904212            MOV     DPTR,#04212H
0011 E0                MOVX    A,@DPTR
0012 FE                MOV     R6,A
0013 EE                MOV     A,R6
0014 54E0              ANL     A,#0E0H
0016 FE                MOV     R6,A
0017 EE                MOV     A,R6
0018 4F                ORL     A,R7
0019 FF                MOV     R7,A
001A 904212            MOV     DPTR,#04212H
001D EF                MOV     A,R7
001E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1584
001F 22                RET     
             ; FUNCTION _CyXTAL_SetStartup (END)

             ; FUNCTION _CyXTAL_SetFbVoltage (BEGIN)
                                           ; SOURCE LINE # 1610
0000 900000      R     MOV     DPTR,#setting
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1611
                                           ; SOURCE LINE # 1615
0005 900000      R     MOV     DPTR,#setting
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B 540F              ANL     A,#0FH
000D FF                MOV     R7,A
000E 904213            MOV     DPTR,#04213H
0011 E0                MOVX    A,@DPTR
0012 FE                MOV     R6,A
0013 EE                MOV     A,R6
0014 54F0              ANL     A,#0F0H
0016 FE                MOV     R6,A
0017 EE                MOV     A,R6
0018 4F                ORL     A,R7
0019 FF                MOV     R7,A
001A 904213            MOV     DPTR,#04213H
001D EF                MOV     A,R7
001E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1617
001F 22                RET     
             ; FUNCTION _CyXTAL_SetFbVoltage (END)

             ; FUNCTION _CyXTAL_SetWdVoltage (BEGIN)
                                           ; SOURCE LINE # 1642
0000 900000      R     MOV     DPTR,#setting
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1643
                                           ; SOURCE LINE # 1647
0005 900000      R     MOV     DPTR,#setting
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B C4                SWAP    A
000C 54F0              ANL     A,#0F0H
000E FF                MOV     R7,A
C51 COMPILER V9.03   CYLIB                                                                 05/13/2012 22:25:57 PAGE 76  

000F EF                MOV     A,R7
0010 5470              ANL     A,#070H
0012 FF                MOV     R7,A
0013 904213            MOV     DPTR,#04213H
0016 E0                MOVX    A,@DPTR
0017 FE                MOV     R6,A
0018 EE                MOV     A,R6
0019 548F              ANL     A,#08FH
001B FE                MOV     R6,A
001C EE                MOV     A,R6
001D 4F                ORL     A,R7
001E FF                MOV     R7,A
001F 904213            MOV     DPTR,#04213H
0022 EF                MOV     A,R7
0023 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1649
0024 22                RET     
             ; FUNCTION _CyXTAL_SetWdVoltage (END)

             ; FUNCTION _?CyHalt (BEGIN)
                                           ; SOURCE LINE # 1675
0000 90FFFF            MOV     DPTR,#0FFFFH
0003 120000      E     LCALL   ?C?ADDXBP
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1677
0008 850083      E     MOV     DPH,?C_XBP
000B 850082      E     MOV     DPL,?C_XBP+01H
000E E0                MOVX    A,@DPTR
000F FF                MOV     R7,A
0010 850083      E     MOV     DPH,?C_XBP
0013 850082      E     MOV     DPL,?C_XBP+01H
0016 EF                MOV     A,R7
0017 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1683
0018 9046EA            MOV     DPTR,#046EAH
001B 7401              MOV     A,#01H
001D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1685
001E 900001            MOV     DPTR,#01H
0021 120000      E     LCALL   ?C?ADDXBP
0024 22                RET     
             ; FUNCTION _?CyHalt (END)

             ; FUNCTION CySoftwareReset (BEGIN)
                                           ; SOURCE LINE # 1704
                                           ; SOURCE LINE # 1705
                                           ; SOURCE LINE # 1707
0000 9046F6            MOV     DPTR,#046F6H
0003 7401              MOV     A,#01H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1708
0006 22                RET     
             ; FUNCTION CySoftwareReset (END)

             ; FUNCTION _?CyDelay (BEGIN)
                                           ; SOURCE LINE # 1736
0000 90FFFC            MOV     DPTR,#0FFFCH
0003 120000      E     LCALL   ?C?ADDXBP
0006 120000      E     LCALL   ?C?LSTXDATA
0009         ?C0143:
                                           ; SOURCE LINE # 1738
C51 COMPILER V9.03   CYLIB                                                                 05/13/2012 22:25:57 PAGE 77  

0009 7F00              MOV     R7,#00H
000B 7E80              MOV     R6,#080H
000D 7D00              MOV     R5,#00H
000F 7C00              MOV     R4,#00H
0011 850083      E     MOV     DPH,?C_XBP
0014 850082      E     MOV     DPL,?C_XBP+01H
0017 120000      E     LCALL   ?C?LLDXDATA0
001A D3                SETB    C
001B 120000      E     LCALL   ?C?ULCMP
001E 4030              JC      ?C0144
                                           ; SOURCE LINE # 1739
                                           ; SOURCE LINE # 1743
0020 900000      R     MOV     DPTR,#cydelay_32k_ms
0023 120000      E     LCALL   ?C?LLDXDATA
0026 120000      E     LCALL   _CyDelayCycles
                                           ; SOURCE LINE # 1744
0029 850083      E     MOV     DPH,?C_XBP
002C 850082      E     MOV     DPL,?C_XBP+01H
002F C083              PUSH    DPH
0031 C082              PUSH    DPL
0033 120000      E     LCALL   ?C?LLDXDATA
0036 C3                CLR     C
0037 EF                MOV     A,R7
0038 9400              SUBB    A,#00H
003A FF                MOV     R7,A
003B EE                MOV     A,R6
003C 9480              SUBB    A,#080H
003E FE                MOV     R6,A
003F ED                MOV     A,R5
0040 9400              SUBB    A,#00H
0042 FD                MOV     R5,A
0043 EC                MOV     A,R4
0044 9400              SUBB    A,#00H
0046 FC                MOV     R4,A
0047 D082              POP     DPL
0049 D083              POP     DPH
004B 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1745
004E 80B9              SJMP    ?C0143
0050         ?C0144:
                                           ; SOURCE LINE # 1747
0050 900000      R     MOV     DPTR,#cydelay_freq_khz
0053 120000      E     LCALL   ?C?LLDXDATA
0056 850083      E     MOV     DPH,?C_XBP
0059 850082      E     MOV     DPL,?C_XBP+01H
005C 120000      E     LCALL   ?C?LLDXDATA0
005F 120000      E     LCALL   ?C?LMUL
0062 120000      E     LCALL   _CyDelayCycles
                                           ; SOURCE LINE # 1748
0065 900004            MOV     DPTR,#04H
0068 120000      E     LCALL   ?C?ADDXBP
006B 22                RET     
             ; FUNCTION _?CyDelay (END)

             ; FUNCTION _?CyDelayFreq (BEGIN)
                                           ; SOURCE LINE # 1794
0000 90FFFC            MOV     DPTR,#0FFFCH
0003 120000      E     LCALL   ?C?ADDXBP
0006 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1796
0009 850083      E     MOV     DPH,?C_XBP
000C 850082      E     MOV     DPL,?C_XBP+01H
C51 COMPILER V9.03   CYLIB                                                                 05/13/2012 22:25:57 PAGE 78  

000F 120000      E     LCALL   ?C?LLDXDATA
0012 EF                MOV     A,R7
0013 4E                ORL     A,R6
0014 6011              JZ      ?C0146
                                           ; SOURCE LINE # 1797
0016 850083      E     MOV     DPH,?C_XBP
0019 850082      E     MOV     DPL,?C_XBP+01H
001C 120000      E     LCALL   ?C?LLDXDATA
001F 900000      R     MOV     DPTR,#cydelay_freq_hz
0022 120000      E     LCALL   ?C?LSTXDATA
0025 800E              SJMP    ?C0147
0027         ?C0146:
                                           ; SOURCE LINE # 1799
0027 7F00              MOV     R7,#00H
0029 7E36              MOV     R6,#036H
002B 7D6E              MOV     R5,#06EH
002D 7C01              MOV     R4,#01H
002F 900000      R     MOV     DPTR,#cydelay_freq_hz
0032 120000      E     LCALL   ?C?LSTXDATA
0035         ?C0147:
                                           ; SOURCE LINE # 1800
0035 900000      R     MOV     DPTR,#cydelay_freq_hz
0038 120000      E     LCALL   ?C?LLDXDATA
003B EF                MOV     A,R7
003C 243F              ADD     A,#03FH
003E FF                MOV     R7,A
003F EE                MOV     A,R6
0040 3442              ADDC    A,#042H
0042 FE                MOV     R6,A
0043 ED                MOV     A,R5
0044 340F              ADDC    A,#0FH
0046 FD                MOV     R5,A
0047 EC                MOV     A,R4
0048 3400              ADDC    A,#00H
004A FC                MOV     R4,A
004B 7B40              MOV     R3,#040H
004D 7A42              MOV     R2,#042H
004F 790F              MOV     R1,#0FH
0051 7800              MOV     R0,#00H
0053 120000      E     LCALL   ?C?ULDIV
0056 900000      R     MOV     DPTR,#cydelay_freq_mhz
0059 EF                MOV     A,R7
005A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1801
005B 900000      R     MOV     DPTR,#cydelay_freq_hz
005E 120000      E     LCALL   ?C?LLDXDATA
0061 EF                MOV     A,R7
0062 24E7              ADD     A,#0E7H
0064 FF                MOV     R7,A
0065 EE                MOV     A,R6
0066 3403              ADDC    A,#03H
0068 FE                MOV     R6,A
0069 ED                MOV     A,R5
006A 3400              ADDC    A,#00H
006C FD                MOV     R5,A
006D EC                MOV     A,R4
006E 3400              ADDC    A,#00H
0070 FC                MOV     R4,A
0071 7BE8              MOV     R3,#0E8H
0073 7A03              MOV     R2,#03H
0075 7900              MOV     R1,#00H
0077 7800              MOV     R0,#00H
C51 COMPILER V9.03   CYLIB                                                                 05/13/2012 22:25:57 PAGE 79  

0079 120000      E     LCALL   ?C?ULDIV
007C 900000      R     MOV     DPTR,#cydelay_freq_khz
007F 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1802
0082 7F00              MOV     R7,#00H
0084 7E80              MOV     R6,#080H
0086 7D00              MOV     R5,#00H
0088 7C00              MOV     R4,#00H
008A 900000      R     MOV     DPTR,#cydelay_freq_khz
008D 120000      E     LCALL   ?C?LLDXDATA0
0090 120000      E     LCALL   ?C?LMUL
0093 900000      R     MOV     DPTR,#cydelay_32k_ms
0096 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1803
0099 900004            MOV     DPTR,#04H
009C 120000      E     LCALL   ?C?ADDXBP
009F 22                RET     
             ; FUNCTION _?CyDelayFreq (END)

             ; FUNCTION _CyWdtStart (BEGIN)
                                           ; SOURCE LINE # 1833
0000 900000      R     MOV     DPTR,#ticks
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
0005 900000      R     MOV     DPTR,#lpMode
0008 ED                MOV     A,R5
0009 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1834
                                           ; SOURCE LINE # 1840
000A 904383            MOV     DPTR,#04383H
000D E0                MOVX    A,@DPTR
000E FF                MOV     R7,A
000F EF                MOV     A,R7
0010 54FC              ANL     A,#0FCH
0012 FF                MOV     R7,A
0013 900000      R     MOV     DPTR,#ticks
0016 E0                MOVX    A,@DPTR
0017 FE                MOV     R6,A
0018 EE                MOV     A,R6
0019 5403              ANL     A,#03H
001B FE                MOV     R6,A
001C EE                MOV     A,R6
001D 4F                ORL     A,R7
001E FF                MOV     R7,A
001F 904383            MOV     DPTR,#04383H
0022 EF                MOV     A,R7
0023 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1843
0024 904383            MOV     DPTR,#04383H
0027 E0                MOVX    A,@DPTR
0028 FF                MOV     R7,A
0029 EF                MOV     A,R7
002A 4480              ORL     A,#080H
002C FF                MOV     R7,A
002D EF                MOV     A,R7
002E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1844
002F 904383            MOV     DPTR,#04383H
0032 E0                MOVX    A,@DPTR
0033 FF                MOV     R7,A
0034 EF                MOV     A,R7
0035 547F              ANL     A,#07FH
C51 COMPILER V9.03   CYLIB                                                                 05/13/2012 22:25:57 PAGE 80  

0037 FF                MOV     R7,A
0038 EF                MOV     A,R7
0039 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1847
003A 900000      R     MOV     DPTR,#lpMode
003D E0                MOVX    A,@DPTR
003E FF                MOV     R7,A
003F 900000      R     MOV     DPTR,#lpMode
0042 EF                MOV     A,R7
0043 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1850
0044 900000      R     MOV     DPTR,#lpMode
0047 E0                MOVX    A,@DPTR
0048 FF                MOV     R7,A
0049 EF                MOV     A,R7
004A C4                SWAP    A
004B 33                RLC     A
004C 54E0              ANL     A,#0E0H
004E FF                MOV     R7,A
004F EF                MOV     A,R7
0050 5460              ANL     A,#060H
0052 FF                MOV     R7,A
0053 904383            MOV     DPTR,#04383H
0056 E0                MOVX    A,@DPTR
0057 FE                MOV     R6,A
0058 EE                MOV     A,R6
0059 549F              ANL     A,#09FH
005B FE                MOV     R6,A
005C EF                MOV     A,R7
005D 4E                ORL     A,R6
005E FF                MOV     R7,A
005F 904383            MOV     DPTR,#04383H
0062 EF                MOV     A,R7
0063 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1854
0064 904383            MOV     DPTR,#04383H
0067 E0                MOVX    A,@DPTR
0068 FF                MOV     R7,A
0069 EF                MOV     A,R7
006A 4410              ORL     A,#010H
006C FF                MOV     R7,A
006D EF                MOV     A,R7
006E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1855
006F 22                RET     
             ; FUNCTION _CyWdtStart (END)

             ; FUNCTION CyWdtClear (BEGIN)
                                           ; SOURCE LINE # 1872
                                           ; SOURCE LINE # 1873
                                           ; SOURCE LINE # 1883
0000 904384            MOV     DPTR,#04384H
0003 7401              MOV     A,#01H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1885
0006 22                RET     
             ; FUNCTION CyWdtClear (END)

             ; FUNCTION CyDisableInts (BEGIN)
                                           ; SOURCE LINE # 1902
                                           ; SOURCE LINE # 1903
                                           ; SOURCE LINE # 1908
C51 COMPILER V9.03   CYLIB                                                                 05/13/2012 22:25:57 PAGE 81  

0000 7B02              MOV     R3,#02H
0002 7A44              MOV     R2,#044H
0004 79C8              MOV     R1,#0C8H
0006 120000      E     LCALL   _cyread32_nodpx
0009 900000      R     MOV     DPTR,#intState
000C 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1911
000F 7B02              MOV     R3,#02H
0011 7A44              MOV     R2,#044H
0013 79C8              MOV     R1,#0C8H
0015 7FFF              MOV     R7,#0FFH
0017 7EFF              MOV     R6,#0FFH
0019 7DFF              MOV     R5,#0FFH
001B 7CFF              MOV     R4,#0FFH
001D 120000      E     LCALL   _cywrite32_nodpx
                                           ; SOURCE LINE # 1913
0020 900000      R     MOV     DPTR,#intState
0023 120000      E     LCALL   ?C?LLDXDATA
                                           ; SOURCE LINE # 1914
0026         ?C0151:
0026 22                RET     
             ; FUNCTION CyDisableInts (END)

             ; FUNCTION _CyEnableInts (BEGIN)
                                           ; SOURCE LINE # 1931
0000 900000      R     MOV     DPTR,#mask
0003 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1932
                                           ; SOURCE LINE # 1934
0006 7B02              MOV     R3,#02H
0008 7A44              MOV     R2,#044H
000A 79C0              MOV     R1,#0C0H
000C 900000      R     MOV     DPTR,#mask
000F 120000      E     LCALL   ?C?LLDXDATA
0012 120000      E     LCALL   _cywrite32_nodpx
                                           ; SOURCE LINE # 1935
0015 22                RET     
             ; FUNCTION _CyEnableInts (END)

             ; FUNCTION _CyIntSetVector (BEGIN)
                                           ; SOURCE LINE # 1954
0000 900000      R     MOV     DPTR,#number
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
0005 900000      R     MOV     DPTR,#address
0008 EC                MOV     A,R4
0009 F0                MOVX    @DPTR,A
000A A3                INC     DPTR
000B ED                MOV     A,R5
000C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1955
                                           ; SOURCE LINE # 1956
                                           ; SOURCE LINE # 1958
000D 900000      R     MOV     DPTR,#number
0010 E0                MOVX    A,@DPTR
0011 FF                MOV     R7,A
0012 EF                MOV     A,R7
0013 D3                SETB    C
0014 941F              SUBB    A,#01FH
0016 5003              JNC     ?C0154
0018 D3                SETB    C
0019 8001              SJMP    ?C0155
C51 COMPILER V9.03   CYLIB                                                                 05/13/2012 22:25:57 PAGE 82  

001B         ?C0154:
001B C3                CLR     C
001C         ?C0155:
001C 4020              JC      ?C0153
001E 900000      R     MOV     DPTR,#number
0021 E0                MOVX    A,@DPTR
0022 FF                MOV     R7,A
0023 EF                MOV     A,R7
0024 D3                SETB    C
0025 941F              SUBB    A,#01FH
0027 500A              JNC     ?C0156
0029 7F01              MOV     R7,#01H
002B 7E00              MOV     R6,#00H
002D 7D00              MOV     R5,#00H
002F 7C00              MOV     R4,#00H
0031 8008              SJMP    ?C0157
0033         ?C0156:
0033 7F00              MOV     R7,#00H
0035 7E00              MOV     R6,#00H
0037 7D00              MOV     R5,#00H
0039 7C00              MOV     R4,#00H
003B         ?C0157:
003B 120000      R     LCALL   _?CyHalt
003E         ?C0153:
                                           ; SOURCE LINE # 1960
003E 900000      R     MOV     DPTR,#number
0041 E0                MOVX    A,@DPTR
0042 FF                MOV     R7,A
0043 EF                MOV     A,R7
0044 541F              ANL     A,#01FH
0046 FF                MOV     R7,A
0047 7E00              MOV     R6,#00H
0049 EF                MOV     A,R7
004A 25E0              ADD     A,ACC
004C FF                MOV     R7,A
004D EE                MOV     A,R6
004E 33                RLC     A
004F FE                MOV     R6,A
0050 EF                MOV     A,R7
0051 2400              ADD     A,#00H
0053 FF                MOV     R7,A
0054 EE                MOV     A,R6
0055 3444              ADDC    A,#044H
0057 FE                MOV     R6,A
0058 AA06              MOV     R2,AR6
005A A907              MOV     R1,AR7
005C 7B01              MOV     R3,#01H
005E 120000      E     LCALL   _cyread16_nodpx
0061 900000      R     MOV     DPTR,#oldIsr
0064 EE                MOV     A,R6
0065 F0                MOVX    @DPTR,A
0066 A3                INC     DPTR
0067 EF                MOV     A,R7
0068 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1963
0069 900000      R     MOV     DPTR,#number
006C E0                MOVX    A,@DPTR
006D FF                MOV     R7,A
006E 7E02              MOV     R6,#02H
0070 EF                MOV     A,R7
0071 8EF0              MOV     B,R6
0073 A4                MUL     AB
C51 COMPILER V9.03   CYLIB                                                                 05/13/2012 22:25:57 PAGE 83  

0074 FF                MOV     R7,A
0075 AEF0              MOV     R6,B
0077 EF                MOV     A,R7
0078 2400              ADD     A,#00H
007A FF                MOV     R7,A
007B EE                MOV     A,R6
007C 3444              ADDC    A,#044H
007E FE                MOV     R6,A
007F AA06              MOV     R2,AR6
0081 A907              MOV     R1,AR7
0083 7B01              MOV     R3,#01H
0085 900000      R     MOV     DPTR,#address
0088 E0                MOVX    A,@DPTR
0089 FE                MOV     R6,A
008A A3                INC     DPTR
008B E0                MOVX    A,@DPTR
008C FF                MOV     R7,A
008D AD07              MOV     R5,AR7
008F AC06              MOV     R4,AR6
0091 120000      E     LCALL   _cywrite16_nodpx
                                           ; SOURCE LINE # 1965
0094 900000      R     MOV     DPTR,#oldIsr
0097 E0                MOVX    A,@DPTR
0098 FE                MOV     R6,A
0099 A3                INC     DPTR
009A E0                MOVX    A,@DPTR
009B FF                MOV     R7,A
                                           ; SOURCE LINE # 1966
009C         ?C0158:
009C 22                RET     
             ; FUNCTION _CyIntSetVector (END)

             ; FUNCTION _CyIntGetVector (BEGIN)
                                           ; SOURCE LINE # 1983
0000 900000      R     MOV     DPTR,#number
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1984
                                           ; SOURCE LINE # 1985
0005 900000      R     MOV     DPTR,#number
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B D3                SETB    C
000C 941F              SUBB    A,#01FH
000E 5003              JNC     ?C0160
0010 D3                SETB    C
0011 8001              SJMP    ?C0161
0013         ?C0160:
0013 C3                CLR     C
0014         ?C0161:
0014 4020              JC      ?C0159
0016 900000      R     MOV     DPTR,#number
0019 E0                MOVX    A,@DPTR
001A FF                MOV     R7,A
001B EF                MOV     A,R7
001C D3                SETB    C
001D 941F              SUBB    A,#01FH
001F 500A              JNC     ?C0162
0021 7F01              MOV     R7,#01H
0023 7E00              MOV     R6,#00H
0025 7D00              MOV     R5,#00H
C51 COMPILER V9.03   CYLIB                                                                 05/13/2012 22:25:57 PAGE 84  

0027 7C00              MOV     R4,#00H
0029 8008              SJMP    ?C0163
002B         ?C0162:
002B 7F00              MOV     R7,#00H
002D 7E00              MOV     R6,#00H
002F 7D00              MOV     R5,#00H
0031 7C00              MOV     R4,#00H
0033         ?C0163:
0033 120000      R     LCALL   _?CyHalt
0036         ?C0159:
                                           ; SOURCE LINE # 1986
0036 900000      R     MOV     DPTR,#number
0039 E0                MOVX    A,@DPTR
003A FF                MOV     R7,A
003B EF                MOV     A,R7
003C 541F              ANL     A,#01FH
003E FF                MOV     R7,A
003F 7E00              MOV     R6,#00H
0041 EF                MOV     A,R7
0042 25E0              ADD     A,ACC
0044 FF                MOV     R7,A
0045 EE                MOV     A,R6
0046 33                RLC     A
0047 FE                MOV     R6,A
0048 EF                MOV     A,R7
0049 2400              ADD     A,#00H
004B FF                MOV     R7,A
004C EE                MOV     A,R6
004D 3444              ADDC    A,#044H
004F FE                MOV     R6,A
0050 AA06              MOV     R2,AR6
0052 A907              MOV     R1,AR7
0054 7B01              MOV     R3,#01H
0056 120000      E     LCALL   _cyread16_nodpx
                                           ; SOURCE LINE # 1987
0059         ?C0164:
0059 22                RET     
             ; FUNCTION _CyIntGetVector (END)

             ; FUNCTION _CyIntSetPriority (BEGIN)
                                           ; SOURCE LINE # 2006
0000 900000      R     MOV     DPTR,#number
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
0005 900000      R     MOV     DPTR,#priority
0008 ED                MOV     A,R5
0009 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2007
                                           ; SOURCE LINE # 2008
000A 900000      R     MOV     DPTR,#priority
000D E0                MOVX    A,@DPTR
000E FF                MOV     R7,A
000F EF                MOV     A,R7
0010 D3                SETB    C
0011 9407              SUBB    A,#07H
0013 5003              JNC     ?C0166
0015 D3                SETB    C
0016 8001              SJMP    ?C0167
0018         ?C0166:
0018 C3                CLR     C
0019         ?C0167:
0019 4020              JC      ?C0165
C51 COMPILER V9.03   CYLIB                                                                 05/13/2012 22:25:57 PAGE 85  

001B 900000      R     MOV     DPTR,#priority
001E E0                MOVX    A,@DPTR
001F FF                MOV     R7,A
0020 EF                MOV     A,R7
0021 D3                SETB    C
0022 9407              SUBB    A,#07H
0024 500A              JNC     ?C0168
0026 7F01              MOV     R7,#01H
0028 7E00              MOV     R6,#00H
002A 7D00              MOV     R5,#00H
002C 7C00              MOV     R4,#00H
002E 8008              SJMP    ?C0169
0030         ?C0168:
0030 7F00              MOV     R7,#00H
0032 7E00              MOV     R6,#00H
0034 7D00              MOV     R5,#00H
0036 7C00              MOV     R4,#00H
0038         ?C0169:
0038 120000      R     LCALL   _?CyHalt
003B         ?C0165:
                                           ; SOURCE LINE # 2009
003B 900000      R     MOV     DPTR,#number
003E E0                MOVX    A,@DPTR
003F FF                MOV     R7,A
0040 EF                MOV     A,R7
0041 D3                SETB    C
0042 941F              SUBB    A,#01FH
0044 5003              JNC     ?C0171
0046 D3                SETB    C
0047 8001              SJMP    ?C0172
0049         ?C0171:
0049 C3                CLR     C
004A         ?C0172:
004A 4020              JC      ?C0170
004C 900000      R     MOV     DPTR,#number
004F E0                MOVX    A,@DPTR
0050 FF                MOV     R7,A
0051 EF                MOV     A,R7
0052 D3                SETB    C
0053 941F              SUBB    A,#01FH
0055 500A              JNC     ?C0173
0057 7F01              MOV     R7,#01H
0059 7E00              MOV     R6,#00H
005B 7D00              MOV     R5,#00H
005D 7C00              MOV     R4,#00H
005F 8008              SJMP    ?C0174
0061         ?C0173:
0061 7F00              MOV     R7,#00H
0063 7E00              MOV     R6,#00H
0065 7D00              MOV     R5,#00H
0067 7C00              MOV     R4,#00H
0069         ?C0174:
0069 120000      R     LCALL   _?CyHalt
006C         ?C0170:
                                           ; SOURCE LINE # 2010
006C 900000      R     MOV     DPTR,#priority
006F E0                MOVX    A,@DPTR
0070 FF                MOV     R7,A
0071 EF                MOV     A,R7
0072 5407              ANL     A,#07H
0074 FF                MOV     R7,A
0075 7E00              MOV     R6,#00H
C51 COMPILER V9.03   CYLIB                                                                 05/13/2012 22:25:57 PAGE 86  

0077 EF                MOV     A,R7
0078 75F020            MOV     B,#020H
007B A4                MUL     AB
007C FF                MOV     R7,A
007D AEF0              MOV     R6,B
007F 900000      R     MOV     DPTR,#number
0082 E0                MOVX    A,@DPTR
0083 FE                MOV     R6,A
0084 EE                MOV     A,R6
0085 541F              ANL     A,#01FH
0087 FE                MOV     R6,A
0088 7480              MOV     A,#080H
008A 2E                ADD     A,R6
008B F582              MOV     DPL,A
008D E4                CLR     A
008E 3444              ADDC    A,#044H
0090 F583              MOV     DPH,A
0092 EF                MOV     A,R7
0093 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2011
0094 22                RET     
             ; FUNCTION _CyIntSetPriority (END)

             ; FUNCTION _CyIntGetPriority (BEGIN)
                                           ; SOURCE LINE # 2029
0000 900000      R     MOV     DPTR,#number
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2030
                                           ; SOURCE LINE # 2031
                                           ; SOURCE LINE # 2033
0005 900000      R     MOV     DPTR,#number
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B D3                SETB    C
000C 941F              SUBB    A,#01FH
000E 5003              JNC     ?C0177
0010 D3                SETB    C
0011 8001              SJMP    ?C0178
0013         ?C0177:
0013 C3                CLR     C
0014         ?C0178:
0014 4020              JC      ?C0176
0016 900000      R     MOV     DPTR,#number
0019 E0                MOVX    A,@DPTR
001A FF                MOV     R7,A
001B EF                MOV     A,R7
001C D3                SETB    C
001D 941F              SUBB    A,#01FH
001F 500A              JNC     ?C0179
0021 7F01              MOV     R7,#01H
0023 7E00              MOV     R6,#00H
0025 7D00              MOV     R5,#00H
0027 7C00              MOV     R4,#00H
0029 8008              SJMP    ?C0180
002B         ?C0179:
002B 7F00              MOV     R7,#00H
002D 7E00              MOV     R6,#00H
002F 7D00              MOV     R5,#00H
0031 7C00              MOV     R4,#00H
0033         ?C0180:
C51 COMPILER V9.03   CYLIB                                                                 05/13/2012 22:25:57 PAGE 87  

0033 120000      R     LCALL   _?CyHalt
0036         ?C0176:
                                           ; SOURCE LINE # 2035
0036 900000      R     MOV     DPTR,#number
0039 E0                MOVX    A,@DPTR
003A FF                MOV     R7,A
003B EF                MOV     A,R7
003C 541F              ANL     A,#01FH
003E FF                MOV     R7,A
003F 7480              MOV     A,#080H
0041 2F                ADD     A,R7
0042 F582              MOV     DPL,A
0044 E4                CLR     A
0045 3444              ADDC    A,#044H
0047 F583              MOV     DPH,A
0049 E0                MOVX    A,@DPTR
004A FF                MOV     R7,A
004B EF                MOV     A,R7
004C C4                SWAP    A
004D 13                RRC     A
004E 5407              ANL     A,#07H
0050 FF                MOV     R7,A
0051 900000      R     MOV     DPTR,#priority
0054 EF                MOV     A,R7
0055 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2037
0056 900000      R     MOV     DPTR,#priority
0059 E0                MOVX    A,@DPTR
005A FF                MOV     R7,A
                                           ; SOURCE LINE # 2038
005B         ?C0181:
005B 22                RET     
             ; FUNCTION _CyIntGetPriority (END)

             ; FUNCTION _?CyIntEnable (BEGIN)
                                           ; SOURCE LINE # 2055
0000 90FFFF            MOV     DPTR,#0FFFFH
0003 120000      E     LCALL   ?C?ADDXBP
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
0008 90FFFE            MOV     DPTR,#0FFFEH
000B 120000      E     LCALL   ?C?ADDXBP
                                           ; SOURCE LINE # 2057
                                           ; SOURCE LINE # 2059
000E 850083      E     MOV     DPH,?C_XBP
0011 850082      E     MOV     DPL,?C_XBP+01H
0014 A3                INC     DPTR
0015 A3                INC     DPTR
0016 E0                MOVX    A,@DPTR
0017 FF                MOV     R7,A
0018 EF                MOV     A,R7
0019 D3                SETB    C
001A 941F              SUBB    A,#01FH
001C 5003              JNC     ?C0183
001E D3                SETB    C
001F 8001              SJMP    ?C0184
0021         ?C0183:
0021 C3                CLR     C
0022         ?C0184:
0022 4025              JC      ?C0182
0024 850083      E     MOV     DPH,?C_XBP
0027 850082      E     MOV     DPL,?C_XBP+01H
C51 COMPILER V9.03   CYLIB                                                                 05/13/2012 22:25:57 PAGE 88  

002A A3                INC     DPTR
002B A3                INC     DPTR
002C E0                MOVX    A,@DPTR
002D FF                MOV     R7,A
002E EF                MOV     A,R7
002F D3                SETB    C
0030 941F              SUBB    A,#01FH
0032 500A              JNC     ?C0185
0034 7F01              MOV     R7,#01H
0036 7E00              MOV     R6,#00H
0038 7D00              MOV     R5,#00H
003A 7C00              MOV     R4,#00H
003C 8008              SJMP    ?C0186
003E         ?C0185:
003E 7F00              MOV     R7,#00H
0040 7E00              MOV     R6,#00H
0042 7D00              MOV     R5,#00H
0044 7C00              MOV     R4,#00H
0046         ?C0186:
0046 120000      R     LCALL   _?CyHalt
0049         ?C0182:
                                           ; SOURCE LINE # 2061
0049 850083      E     MOV     DPH,?C_XBP
004C 850082      E     MOV     DPL,?C_XBP+01H
004F A3                INC     DPTR
0050 A3                INC     DPTR
0051 E0                MOVX    A,@DPTR
0052 FF                MOV     R7,A
0053 EF                MOV     A,R7
0054 541F              ANL     A,#01FH
0056 FF                MOV     R7,A
0057 7E00              MOV     R6,#00H
0059 EF                MOV     A,R7
005A 7803              MOV     R0,#03H
005C         ?C0218:
005C CE                XCH     A,R6
005D C3                CLR     C
005E 13                RRC     A
005F CE                XCH     A,R6
0060 13                RRC     A
0061 D8F9              DJNZ    R0,?C0218
0063 FF                MOV     R7,A
0064 EF                MOV     A,R7
0065 24C0              ADD     A,#0C0H
0067 FF                MOV     R7,A
0068 EE                MOV     A,R6
0069 3444              ADDC    A,#044H
006B FE                MOV     R6,A
006C 850083      E     MOV     DPH,?C_XBP
006F 850082      E     MOV     DPL,?C_XBP+01H
0072 EE                MOV     A,R6
0073 F0                MOVX    @DPTR,A
0074 A3                INC     DPTR
0075 EF                MOV     A,R7
0076 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2064
0077 850083      E     MOV     DPH,?C_XBP
007A 850082      E     MOV     DPL,?C_XBP+01H
007D A3                INC     DPTR
007E A3                INC     DPTR
007F E0                MOVX    A,@DPTR
0080 FF                MOV     R7,A
C51 COMPILER V9.03   CYLIB                                                                 05/13/2012 22:25:57 PAGE 89  

0081 EF                MOV     A,R7
0082 5407              ANL     A,#07H
0084 FF                MOV     R7,A
0085 7401              MOV     A,#01H
0087 A807              MOV     R0,AR7
0089 08                INC     R0
008A 8002              SJMP    ?C0220
008C         ?C0219:
008C C3                CLR     C
008D 33                RLC     A
008E         ?C0220:
008E D8FC              DJNZ    R0,?C0219
0090 FF                MOV     R7,A
0091 850083      E     MOV     DPH,?C_XBP
0094 850082      E     MOV     DPL,?C_XBP+01H
0097 E0                MOVX    A,@DPTR
0098 FC                MOV     R4,A
0099 A3                INC     DPTR
009A E0                MOVX    A,@DPTR
009B FD                MOV     R5,A
009C 8D82              MOV     DPL,R5
009E 8C83              MOV     DPH,R4
00A0 EF                MOV     A,R7
00A1 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2065
00A2 900003            MOV     DPTR,#03H
00A5 120000      E     LCALL   ?C?ADDXBP
00A8 22                RET     
             ; FUNCTION _?CyIntEnable (END)

             ; FUNCTION _CyIntGetState (BEGIN)
                                           ; SOURCE LINE # 2082
0000 900000      R     MOV     DPTR,#number
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2083
                                           ; SOURCE LINE # 2084
                                           ; SOURCE LINE # 2086
0005 900000      R     MOV     DPTR,#number
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B D3                SETB    C
000C 941F              SUBB    A,#01FH
000E 5003              JNC     ?C0189
0010 D3                SETB    C
0011 8001              SJMP    ?C0190
0013         ?C0189:
0013 C3                CLR     C
0014         ?C0190:
0014 4020              JC      ?C0188
0016 900000      R     MOV     DPTR,#number
0019 E0                MOVX    A,@DPTR
001A FF                MOV     R7,A
001B EF                MOV     A,R7
001C D3                SETB    C
001D 941F              SUBB    A,#01FH
001F 500A              JNC     ?C0191
0021 7F01              MOV     R7,#01H
0023 7E00              MOV     R6,#00H
0025 7D00              MOV     R5,#00H
0027 7C00              MOV     R4,#00H
C51 COMPILER V9.03   CYLIB                                                                 05/13/2012 22:25:57 PAGE 90  

0029 8008              SJMP    ?C0192
002B         ?C0191:
002B 7F00              MOV     R7,#00H
002D 7E00              MOV     R6,#00H
002F 7D00              MOV     R5,#00H
0031 7C00              MOV     R4,#00H
0033         ?C0192:
0033 120000      R     LCALL   _?CyHalt
0036         ?C0188:
                                           ; SOURCE LINE # 2088
0036 900000      R     MOV     DPTR,#number
0039 E0                MOVX    A,@DPTR
003A FF                MOV     R7,A
003B EF                MOV     A,R7
003C 541F              ANL     A,#01FH
003E FF                MOV     R7,A
003F 7E00              MOV     R6,#00H
0041 EF                MOV     A,R7
0042 7803              MOV     R0,#03H
0044         ?C0221:
0044 CE                XCH     A,R6
0045 C3                CLR     C
0046 13                RRC     A
0047 CE                XCH     A,R6
0048 13                RRC     A
0049 D8F9              DJNZ    R0,?C0221
004B FF                MOV     R7,A
004C EF                MOV     A,R7
004D 24C0              ADD     A,#0C0H
004F FF                MOV     R7,A
0050 EE                MOV     A,R6
0051 3444              ADDC    A,#044H
0053 FE                MOV     R6,A
0054 900000      R     MOV     DPTR,#stateReg
0057 EE                MOV     A,R6
0058 F0                MOVX    @DPTR,A
0059 A3                INC     DPTR
005A EF                MOV     A,R7
005B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2091
005C 900000      R     MOV     DPTR,#stateReg
005F E0                MOVX    A,@DPTR
0060 FE                MOV     R6,A
0061 A3                INC     DPTR
0062 E0                MOVX    A,@DPTR
0063 FF                MOV     R7,A
0064 8F82              MOV     DPL,R7
0066 8E83              MOV     DPH,R6
0068 E0                MOVX    A,@DPTR
0069 FF                MOV     R7,A
006A EF                MOV     A,R7
006B FD                MOV     R5,A
006C 7C00              MOV     R4,#00H
006E 900000      R     MOV     DPTR,#number
0071 E0                MOVX    A,@DPTR
0072 FF                MOV     R7,A
0073 EF                MOV     A,R7
0074 5407              ANL     A,#07H
0076 FF                MOV     R7,A
0077 7401              MOV     A,#01H
0079 7E00              MOV     R6,#00H
007B A807              MOV     R0,AR7
C51 COMPILER V9.03   CYLIB                                                                 05/13/2012 22:25:57 PAGE 91  

007D 08                INC     R0
007E 8005              SJMP    ?C0223
0080         ?C0222:
0080 C3                CLR     C
0081 33                RLC     A
0082 CE                XCH     A,R6
0083 33                RLC     A
0084 CE                XCH     A,R6
0085         ?C0223:
0085 D8F9              DJNZ    R0,?C0222
0087 FF                MOV     R7,A
0088 EE                MOV     A,R6
0089 5C                ANL     A,R4
008A FE                MOV     R6,A
008B EF                MOV     A,R7
008C 5D                ANL     A,R5
008D FF                MOV     R7,A
008E EF                MOV     A,R7
008F 4E                ORL     A,R6
0090 6004              JZ      ?C0193
0092 7F01              MOV     R7,#01H
0094 8002              SJMP    ?C0194
0096         ?C0193:
0096 7F00              MOV     R7,#00H
0098         ?C0194:
                                           ; SOURCE LINE # 2092
0098         ?C0195:
0098 22                RET     
             ; FUNCTION _CyIntGetState (END)

             ; FUNCTION _?CyIntDisable (BEGIN)
                                           ; SOURCE LINE # 2109
0000 90FFFF            MOV     DPTR,#0FFFFH
0003 120000      E     LCALL   ?C?ADDXBP
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
0008 90FFFE            MOV     DPTR,#0FFFEH
000B 120000      E     LCALL   ?C?ADDXBP
                                           ; SOURCE LINE # 2111
                                           ; SOURCE LINE # 2113
000E 850083      E     MOV     DPH,?C_XBP
0011 850082      E     MOV     DPL,?C_XBP+01H
0014 A3                INC     DPTR
0015 A3                INC     DPTR
0016 E0                MOVX    A,@DPTR
0017 FF                MOV     R7,A
0018 EF                MOV     A,R7
0019 D3                SETB    C
001A 941F              SUBB    A,#01FH
001C 5003              JNC     ?C0197
001E D3                SETB    C
001F 8001              SJMP    ?C0198
0021         ?C0197:
0021 C3                CLR     C
0022         ?C0198:
0022 4025              JC      ?C0196
0024 850083      E     MOV     DPH,?C_XBP
0027 850082      E     MOV     DPL,?C_XBP+01H
002A A3                INC     DPTR
002B A3                INC     DPTR
002C E0                MOVX    A,@DPTR
002D FF                MOV     R7,A
C51 COMPILER V9.03   CYLIB                                                                 05/13/2012 22:25:57 PAGE 92  

002E EF                MOV     A,R7
002F D3                SETB    C
0030 941F              SUBB    A,#01FH
0032 500A              JNC     ?C0199
0034 7F01              MOV     R7,#01H
0036 7E00              MOV     R6,#00H
0038 7D00              MOV     R5,#00H
003A 7C00              MOV     R4,#00H
003C 8008              SJMP    ?C0200
003E         ?C0199:
003E 7F00              MOV     R7,#00H
0040 7E00              MOV     R6,#00H
0042 7D00              MOV     R5,#00H
0044 7C00              MOV     R4,#00H
0046         ?C0200:
0046 120000      R     LCALL   _?CyHalt
0049         ?C0196:
                                           ; SOURCE LINE # 2116
0049 850083      E     MOV     DPH,?C_XBP
004C 850082      E     MOV     DPL,?C_XBP+01H
004F A3                INC     DPTR
0050 A3                INC     DPTR
0051 E0                MOVX    A,@DPTR
0052 FF                MOV     R7,A
0053 EF                MOV     A,R7
0054 541F              ANL     A,#01FH
0056 FF                MOV     R7,A
0057 7E00              MOV     R6,#00H
0059 EF                MOV     A,R7
005A 7803              MOV     R0,#03H
005C         ?C0224:
005C CE                XCH     A,R6
005D C3                CLR     C
005E 13                RRC     A
005F CE                XCH     A,R6
0060 13                RRC     A
0061 D8F9              DJNZ    R0,?C0224
0063 FF                MOV     R7,A
0064 EF                MOV     A,R7
0065 24C8              ADD     A,#0C8H
0067 FF                MOV     R7,A
0068 EE                MOV     A,R6
0069 3444              ADDC    A,#044H
006B FE                MOV     R6,A
006C 850083      E     MOV     DPH,?C_XBP
006F 850082      E     MOV     DPL,?C_XBP+01H
0072 EE                MOV     A,R6
0073 F0                MOVX    @DPTR,A
0074 A3                INC     DPTR
0075 EF                MOV     A,R7
0076 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2119
0077 850083      E     MOV     DPH,?C_XBP
007A 850082      E     MOV     DPL,?C_XBP+01H
007D A3                INC     DPTR
007E A3                INC     DPTR
007F E0                MOVX    A,@DPTR
0080 FF                MOV     R7,A
0081 EF                MOV     A,R7
0082 5407              ANL     A,#07H
0084 FF                MOV     R7,A
0085 7401              MOV     A,#01H
C51 COMPILER V9.03   CYLIB                                                                 05/13/2012 22:25:57 PAGE 93  

0087 A807              MOV     R0,AR7
0089 08                INC     R0
008A 8002              SJMP    ?C0226
008C         ?C0225:
008C C3                CLR     C
008D 33                RLC     A
008E         ?C0226:
008E D8FC              DJNZ    R0,?C0225
0090 FF                MOV     R7,A
0091 850083      E     MOV     DPH,?C_XBP
0094 850082      E     MOV     DPL,?C_XBP+01H
0097 E0                MOVX    A,@DPTR
0098 FC                MOV     R4,A
0099 A3                INC     DPTR
009A E0                MOVX    A,@DPTR
009B FD                MOV     R5,A
009C 8D82              MOV     DPL,R5
009E 8C83              MOV     DPH,R4
00A0 EF                MOV     A,R7
00A1 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2120
00A2 900003            MOV     DPTR,#03H
00A5 120000      E     LCALL   ?C?ADDXBP
00A8 22                RET     
             ; FUNCTION _?CyIntDisable (END)

             ; FUNCTION _CyIntSetPending (BEGIN)
                                           ; SOURCE LINE # 2137
0000 900000      R     MOV     DPTR,#number
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2138
                                           ; SOURCE LINE # 2139
                                           ; SOURCE LINE # 2142
0005 900000      R     MOV     DPTR,#number
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B D3                SETB    C
000C 941F              SUBB    A,#01FH
000E 5003              JNC     ?C0203
0010 D3                SETB    C
0011 8001              SJMP    ?C0204
0013         ?C0203:
0013 C3                CLR     C
0014         ?C0204:
0014 4020              JC      ?C0202
0016 900000      R     MOV     DPTR,#number
0019 E0                MOVX    A,@DPTR
001A FF                MOV     R7,A
001B EF                MOV     A,R7
001C D3                SETB    C
001D 941F              SUBB    A,#01FH
001F 500A              JNC     ?C0205
0021 7F01              MOV     R7,#01H
0023 7E00              MOV     R6,#00H
0025 7D00              MOV     R5,#00H
0027 7C00              MOV     R4,#00H
0029 8008              SJMP    ?C0206
002B         ?C0205:
002B 7F00              MOV     R7,#00H
002D 7E00              MOV     R6,#00H
C51 COMPILER V9.03   CYLIB                                                                 05/13/2012 22:25:57 PAGE 94  

002F 7D00              MOV     R5,#00H
0031 7C00              MOV     R4,#00H
0033         ?C0206:
0033 120000      R     LCALL   _?CyHalt
0036         ?C0202:
                                           ; SOURCE LINE # 2144
0036 900000      R     MOV     DPTR,#number
0039 E0                MOVX    A,@DPTR
003A FF                MOV     R7,A
003B EF                MOV     A,R7
003C 541F              ANL     A,#01FH
003E FF                MOV     R7,A
003F 7E00              MOV     R6,#00H
0041 EF                MOV     A,R7
0042 7803              MOV     R0,#03H
0044         ?C0227:
0044 CE                XCH     A,R6
0045 C3                CLR     C
0046 13                RRC     A
0047 CE                XCH     A,R6
0048 13                RRC     A
0049 D8F9              DJNZ    R0,?C0227
004B FF                MOV     R7,A
004C EF                MOV     A,R7
004D 24D0              ADD     A,#0D0H
004F FF                MOV     R7,A
0050 EE                MOV     A,R6
0051 3444              ADDC    A,#044H
0053 FE                MOV     R6,A
0054 900000      R     MOV     DPTR,#pendReg
0057 EE                MOV     A,R6
0058 F0                MOVX    @DPTR,A
0059 A3                INC     DPTR
005A EF                MOV     A,R7
005B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2147
005C 900000      R     MOV     DPTR,#number
005F E0                MOVX    A,@DPTR
0060 FF                MOV     R7,A
0061 EF                MOV     A,R7
0062 5407              ANL     A,#07H
0064 FF                MOV     R7,A
0065 7401              MOV     A,#01H
0067 A807              MOV     R0,AR7
0069 08                INC     R0
006A 8002              SJMP    ?C0229
006C         ?C0228:
006C C3                CLR     C
006D 33                RLC     A
006E         ?C0229:
006E D8FC              DJNZ    R0,?C0228
0070 FF                MOV     R7,A
0071 900000      R     MOV     DPTR,#pendReg
0074 E0                MOVX    A,@DPTR
0075 FC                MOV     R4,A
0076 A3                INC     DPTR
0077 E0                MOVX    A,@DPTR
0078 FD                MOV     R5,A
0079 8D82              MOV     DPL,R5
007B 8C83              MOV     DPH,R4
007D EF                MOV     A,R7
007E F0                MOVX    @DPTR,A
C51 COMPILER V9.03   CYLIB                                                                 05/13/2012 22:25:57 PAGE 95  

                                           ; SOURCE LINE # 2148
007F 22                RET     
             ; FUNCTION _CyIntSetPending (END)

             ; FUNCTION _CyIntClearPending (BEGIN)
                                           ; SOURCE LINE # 2164
0000 900000      R     MOV     DPTR,#number
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2165
                                           ; SOURCE LINE # 2166
                                           ; SOURCE LINE # 2169
0005 900000      R     MOV     DPTR,#number
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B D3                SETB    C
000C 941F              SUBB    A,#01FH
000E 5003              JNC     ?C0209
0010 D3                SETB    C
0011 8001              SJMP    ?C0210
0013         ?C0209:
0013 C3                CLR     C
0014         ?C0210:
0014 4020              JC      ?C0208
0016 900000      R     MOV     DPTR,#number
0019 E0                MOVX    A,@DPTR
001A FF                MOV     R7,A
001B EF                MOV     A,R7
001C D3                SETB    C
001D 941F              SUBB    A,#01FH
001F 500A              JNC     ?C0211
0021 7F01              MOV     R7,#01H
0023 7E00              MOV     R6,#00H
0025 7D00              MOV     R5,#00H
0027 7C00              MOV     R4,#00H
0029 8008              SJMP    ?C0212
002B         ?C0211:
002B 7F00              MOV     R7,#00H
002D 7E00              MOV     R6,#00H
002F 7D00              MOV     R5,#00H
0031 7C00              MOV     R4,#00H
0033         ?C0212:
0033 120000      R     LCALL   _?CyHalt
0036         ?C0208:
                                           ; SOURCE LINE # 2171
0036 900000      R     MOV     DPTR,#number
0039 E0                MOVX    A,@DPTR
003A FF                MOV     R7,A
003B EF                MOV     A,R7
003C 541F              ANL     A,#01FH
003E FF                MOV     R7,A
003F 7E00              MOV     R6,#00H
0041 EF                MOV     A,R7
0042 7803              MOV     R0,#03H
0044         ?C0230:
0044 CE                XCH     A,R6
0045 C3                CLR     C
0046 13                RRC     A
0047 CE                XCH     A,R6
0048 13                RRC     A
0049 D8F9              DJNZ    R0,?C0230
C51 COMPILER V9.03   CYLIB                                                                 05/13/2012 22:25:57 PAGE 96  

004B FF                MOV     R7,A
004C EF                MOV     A,R7
004D 24D8              ADD     A,#0D8H
004F FF                MOV     R7,A
0050 EE                MOV     A,R6
0051 3444              ADDC    A,#044H
0053 FE                MOV     R6,A
0054 900000      R     MOV     DPTR,#pendReg
0057 EE                MOV     A,R6
0058 F0                MOVX    @DPTR,A
0059 A3                INC     DPTR
005A EF                MOV     A,R7
005B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2174
005C 900000      R     MOV     DPTR,#number
005F E0                MOVX    A,@DPTR
0060 FF                MOV     R7,A
0061 EF                MOV     A,R7
0062 5407              ANL     A,#07H
0064 FF                MOV     R7,A
0065 7401              MOV     A,#01H
0067 A807              MOV     R0,AR7
0069 08                INC     R0
006A 8002              SJMP    ?C0232
006C         ?C0231:
006C C3                CLR     C
006D 33                RLC     A
006E         ?C0232:
006E D8FC              DJNZ    R0,?C0231
0070 FF                MOV     R7,A
0071 900000      R     MOV     DPTR,#pendReg
0074 E0                MOVX    A,@DPTR
0075 FC                MOV     R4,A
0076 A3                INC     DPTR
0077 E0                MOVX    A,@DPTR
0078 FD                MOV     R5,A
0079 8D82              MOV     DPL,R5
007B 8C83              MOV     DPH,R4
007D EF                MOV     A,R7
007E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2175
007F 22                RET     
             ; FUNCTION _CyIntClearPending (END)

             ; FUNCTION _cystrcpy (BEGIN)
                                           ; SOURCE LINE # 2186
0000 900000      R     MOV     DPTR,#s1
0003 120000      E     LCALL   ?C?PSTXDATA
                                           ; SOURCE LINE # 2187
                                           ; SOURCE LINE # 2188
0006 900000      R     MOV     DPTR,#s2
0009 120000      E     LCALL   ?C?PLDXDATA
000C C003              PUSH    AR3
000E C002              PUSH    AR2
0010 C001              PUSH    AR1
0012 900000      R     MOV     DPTR,#s1
0015 120000      E     LCALL   ?C?PLDXDATA
0018 A801              MOV     R0,AR1
001A AC02              MOV     R4,AR2
001C AD03              MOV     R5,AR3
001E D001              POP     AR1
0020 D002              POP     AR2
C51 COMPILER V9.03   CYLIB                                                                 05/13/2012 22:25:57 PAGE 97  

0022 D003              POP     AR3
0024 120000      E     LCALL   ?C?STRCPYAMD
                                           ; SOURCE LINE # 2189
0027         ?C0214:
0027 22                RET     
             ; FUNCTION _cystrcpy (END)

             ; FUNCTION _cystrlen (BEGIN)
                                           ; SOURCE LINE # 2198
0000 900000      R     MOV     DPTR,#s
0003 120000      E     LCALL   ?C?PSTXDATA
                                           ; SOURCE LINE # 2199
                                           ; SOURCE LINE # 2200
0006 900000      R     MOV     DPTR,#s
0009 120000      E     LCALL   ?C?PLDXDATA
000C 120000      E     LCALL   _strlen
000F EE                MOV     A,R6
0010 33                RLC     A
0011 95E0              SUBB    A,ACC
0013 FD                MOV     R5,A
0014 FC                MOV     R4,A
                                           ; SOURCE LINE # 2201
0015         ?C0215:
0015 22                RET     
             ; FUNCTION _cystrlen (END)

             ; FUNCTION _CyGetSwapReg16 (BEGIN)
                                           ; SOURCE LINE # 2210
0000 900000      R     MOV     DPTR,#addr
0003 EE                MOV     A,R6
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2211
                                           ; SOURCE LINE # 2212
0008 900000      R     MOV     DPTR,#addr
000B E0                MOVX    A,@DPTR
000C FE                MOV     R6,A
000D A3                INC     DPTR
000E E0                MOVX    A,@DPTR
000F FF                MOV     R7,A
0010 AA06              MOV     R2,AR6
0012 A907              MOV     R1,AR7
0014 7B01              MOV     R3,#01H
0016 120000      E     LCALL   _cyread16_nodpx
                                           ; SOURCE LINE # 2213
0019         ?C0216:
0019 22                RET     
             ; FUNCTION _CyGetSwapReg16 (END)

             ; FUNCTION _CySetSwapReg16 (BEGIN)
                                           ; SOURCE LINE # 2222
0000 900000      R     MOV     DPTR,#addr
0003 EE                MOV     A,R6
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
0008 900000      R     MOV     DPTR,#value
000B EC                MOV     A,R4
000C F0                MOVX    @DPTR,A
C51 COMPILER V9.03   CYLIB                                                                 05/13/2012 22:25:57 PAGE 98  

000D A3                INC     DPTR
000E ED                MOV     A,R5
000F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2223
                                           ; SOURCE LINE # 2224
0010 900000      R     MOV     DPTR,#addr
0013 E0                MOVX    A,@DPTR
0014 FE                MOV     R6,A
0015 A3                INC     DPTR
0016 E0                MOVX    A,@DPTR
0017 FF                MOV     R7,A
0018 AA06              MOV     R2,AR6
001A A907              MOV     R1,AR7
001C 7B01              MOV     R3,#01H
001E 900000      R     MOV     DPTR,#value
0021 E0                MOVX    A,@DPTR
0022 FC                MOV     R4,A
0023 A3                INC     DPTR
0024 E0                MOVX    A,@DPTR
0025 FD                MOV     R5,A
0026 120000      E     LCALL   _cywrite16_nodpx
                                           ; SOURCE LINE # 2225
0029 22                RET     
             ; FUNCTION _CySetSwapReg16 (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   4529    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     14      99
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
