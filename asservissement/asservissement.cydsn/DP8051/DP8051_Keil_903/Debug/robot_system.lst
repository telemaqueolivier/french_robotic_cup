C51 COMPILER V9.03   ROBOT_SYSTEM                                                          05/13/2012 22:25:52 PAGE 1   


C51 COMPILER V9.03, COMPILATION OF MODULE ROBOT_SYSTEM
OBJECT MODULE PLACED IN .\DP8051\DP8051_Keil_903\Debug\robot_system.obj
COMPILER INVOKED BY: C:\Program Files\Cypress\PSoC Creator\2.0\PSoC Creator\import\keil\pk51\9.03\C51\BIN\c51.exe .\robo
                    -t_system.c NOIV LARGE MODDP2 OMF2 VB(1) PR(.\DP8051\DP8051_Keil_903\Debug\robot_system.lst) CD DB NOIP OT(2,SIZE) INCDIR
                    -(Generated_Source\PSoC3) OJ(.\DP8051\DP8051_Keil_903\Debug\robot_system.obj)

line level    source

   1          /*  
   2           *  Copyright Droids Corporation, Microb Technology, Eirbot (2005), Projet & Tech' (2008-20011)
   3           * 
   4           *  This program is free software; you can redistribute it and/or modify
   5           *  it under the terms of the GNU General Public License as published by
   6           *  the Free Software Foundation; either version 2 of the License, or
   7           *  (at your option) any later version.
   8           *
   9           *  This program is distributed in the hope that it will be useful,
  10           *  but WITHOUT ANY WARRANTY; without even the implied warranty of
  11           *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12           *  GNU General Public License for more details.
  13           *
  14           *  You should have received a copy of the GNU General Public License
  15           *  along with this program; if not, write to the Free Software
  16           *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  17           *
  18           *  Olivier MATZ <zer0@droids-corp.org> 
  19           *      Fay????al GUENNAR <f.guennar@gmail.com>
  20           */
  21           
  22          #include "robot_system.h"
  23          #include <string.h>
  24          #include "encoders.h"
  25          #include "pwm.h"
  26          #include "options.h"
  27          
  28          void rs_init(struct robot_system* rs)
  29          {
  30   1              memset(rs, 0, sizeof(struct robot_system));
  31   1              encoders_init(&rs->wext_prev);
  32   1              pwm_init();
  33   1      }
  34          
  35          void rs_update(struct robot_system* rs)
  36          {
  37   1              encoders_read(&rs->wext_prev);
  38   1              polar_from_wheels(&rs->wext_prev, &rs->pext_prev);
  39   1      }
  40          
  41          void rs_set_angle(struct robot_system* rs, int32_t angle)
  42          {
  43   1          struct polar p;
  44   1          struct wheels w;
  45   1      
  46   1          p.distance = rs->virtual_pwm.distance ;
  47   1          rs->virtual_pwm.angle = angle;
  48   1         
  49   1          p.angle = angle;
  50   1              wheels_from_polar(&p, &w);
  51   1      
  52   1              pwm_left(w.left);
  53   1              pwm_right(w.right);
C51 COMPILER V9.03   ROBOT_SYSTEM                                                          05/13/2012 22:25:52 PAGE 2   

  54   1      
  55   1      }
  56          
  57          void rs_set_distance(struct robot_system* rs, int32_t distance)
  58          {
  59   1          struct polar p2;
  60   1          struct wheels w2;
  61   1      
  62   1          p2.angle = rs->virtual_pwm.angle ;
  63   1          rs->virtual_pwm.distance = distance;
  64   1          p2.distance = distance;
  65   1          wheels_from_polar(&p2, &w2);
  66   1      
  67   1          pwm_left(w2.left);
  68   1              pwm_right(w2.right);
  69   1      }
  70          
  71          void rs_set_angle_value(struct robot_system * rs, int32_t val)
  72          {
  73   1              rs->pext_prev.angle = val;
  74   1      }
C51 COMPILER V9.03   ROBOT_SYSTEM                                                          05/13/2012 22:25:52 PAGE 3   

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION _rs_init (BEGIN)
                                           ; SOURCE LINE # 28
0000 900000      R     MOV     DPTR,#rs
0003 120000      E     LCALL   ?C?PSTXDATA
                                           ; SOURCE LINE # 29
                                           ; SOURCE LINE # 30
0006 7E00              MOV     R6,#00H
0008 7F20              MOV     R7,#020H
000A 7D00              MOV     R5,#00H
000C 900000      R     MOV     DPTR,#rs
000F 120000      E     LCALL   ?C?PLDXDATA
0012 120000      E     LCALL   ?C?MEMSET
                                           ; SOURCE LINE # 31
0015 900000      R     MOV     DPTR,#rs
0018 120000      E     LCALL   ?C?PLDXDATA
001B E9                MOV     A,R1
001C 2408              ADD     A,#08H
001E F9                MOV     R1,A
001F EA                MOV     A,R2
0020 3400              ADDC    A,#00H
0022 FA                MOV     R2,A
0023 120000      E     LCALL   _encoders_init
                                           ; SOURCE LINE # 32
0026 120000      E     LCALL   pwm_init
                                           ; SOURCE LINE # 33
0029 22                RET     
             ; FUNCTION _rs_init (END)

             ; FUNCTION _rs_update (BEGIN)
                                           ; SOURCE LINE # 35
0000 900000      R     MOV     DPTR,#rs
0003 120000      E     LCALL   ?C?PSTXDATA
                                           ; SOURCE LINE # 36
                                           ; SOURCE LINE # 37
0006 900000      R     MOV     DPTR,#rs
0009 120000      E     LCALL   ?C?PLDXDATA
000C E9                MOV     A,R1
000D 2408              ADD     A,#08H
000F F9                MOV     R1,A
0010 EA                MOV     A,R2
0011 3400              ADDC    A,#00H
0013 FA                MOV     R2,A
0014 120000      E     LCALL   _encoders_read
                                           ; SOURCE LINE # 38
0017 900000      R     MOV     DPTR,#rs
001A 120000      E     LCALL   ?C?PLDXDATA
001D E9                MOV     A,R1
001E 2408              ADD     A,#08H
0020 F9                MOV     R1,A
0021 EA                MOV     A,R2
0022 3400              ADDC    A,#00H
0024 FA                MOV     R2,A
0025 C003              PUSH    AR3
0027 C002              PUSH    AR2
0029 C001              PUSH    AR1
002B 900000      R     MOV     DPTR,#rs
002E 120000      E     LCALL   ?C?PLDXDATA
0031 900000      E     MOV     DPTR,#?_polar_from_wheels?BYTE+03H
0034 120000      E     LCALL   ?C?PSTXDATA
C51 COMPILER V9.03   ROBOT_SYSTEM                                                          05/13/2012 22:25:52 PAGE 4   

0037 D001              POP     AR1
0039 D002              POP     AR2
003B D003              POP     AR3
003D 120000      E     LCALL   _polar_from_wheels
                                           ; SOURCE LINE # 39
0040 22                RET     
             ; FUNCTION _rs_update (END)

             ; FUNCTION _rs_set_angle (BEGIN)
                                           ; SOURCE LINE # 41
0000 900000      R     MOV     DPTR,#rs
0003 120000      E     LCALL   ?C?PSTXDATA
0006 900000      R     MOV     DPTR,#angle
0009 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 42
                                           ; SOURCE LINE # 46
000C 900000      R     MOV     DPTR,#rs
000F 120000      E     LCALL   ?C?PLDXDATA
0012 E9                MOV     A,R1
0013 2410              ADD     A,#010H
0015 F9                MOV     R1,A
0016 EA                MOV     A,R2
0017 3400              ADDC    A,#00H
0019 FA                MOV     R2,A
001A 120000      E     LCALL   ?C?LLDPTR
001D 900000      R     MOV     DPTR,#p
0020 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 47
0023 900000      R     MOV     DPTR,#angle
0026 120000      E     LCALL   ?C?LLDXDATA
0029 900000      R     MOV     DPTR,#rs
002C 120000      E     LCALL   ?C?PLDXDATA
002F E9                MOV     A,R1
0030 2414              ADD     A,#014H
0032 F9                MOV     R1,A
0033 EA                MOV     A,R2
0034 3400              ADDC    A,#00H
0036 FA                MOV     R2,A
0037 120000      E     LCALL   ?C?LSTPTR
                                           ; SOURCE LINE # 49
003A 900000      R     MOV     DPTR,#angle
003D 120000      E     LCALL   ?C?LLDXDATA
0040 900000      R     MOV     DPTR,#p+04H
0043 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 50
0046 7B01              MOV     R3,#01H
0048 7A00        R     MOV     R2,#HIGH p
004A 7900        R     MOV     R1,#LOW p
004C C003              PUSH    AR3
004E C002              PUSH    AR2
0050 C001              PUSH    AR1
0052 7B01              MOV     R3,#01H
0054 7A00        R     MOV     R2,#HIGH w
0056 7900        R     MOV     R1,#LOW w
0058 900000      E     MOV     DPTR,#?_wheels_from_polar?BYTE+03H
005B 120000      E     LCALL   ?C?PSTXDATA
005E D001              POP     AR1
0060 D002              POP     AR2
0062 D003              POP     AR3
0064 120000      E     LCALL   _wheels_from_polar
                                           ; SOURCE LINE # 52
0067 900000      R     MOV     DPTR,#w
C51 COMPILER V9.03   ROBOT_SYSTEM                                                          05/13/2012 22:25:52 PAGE 5   

006A 120000      E     LCALL   ?C?LLDXDATA
006D 120000      E     LCALL   _pwm_left
                                           ; SOURCE LINE # 53
0070 900000      R     MOV     DPTR,#w+04H
0073 120000      E     LCALL   ?C?LLDXDATA
0076 120000      E     LCALL   _pwm_right
                                           ; SOURCE LINE # 55
0079 22                RET     
             ; FUNCTION _rs_set_angle (END)

             ; FUNCTION _rs_set_distance (BEGIN)
                                           ; SOURCE LINE # 57
0000 900000      R     MOV     DPTR,#rs
0003 120000      E     LCALL   ?C?PSTXDATA
0006 900000      R     MOV     DPTR,#distance
0009 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 58
                                           ; SOURCE LINE # 62
000C 900000      R     MOV     DPTR,#rs
000F 120000      E     LCALL   ?C?PLDXDATA
0012 E9                MOV     A,R1
0013 2414              ADD     A,#014H
0015 F9                MOV     R1,A
0016 EA                MOV     A,R2
0017 3400              ADDC    A,#00H
0019 FA                MOV     R2,A
001A 120000      E     LCALL   ?C?LLDPTR
001D 900000      R     MOV     DPTR,#p2+04H
0020 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 63
0023 900000      R     MOV     DPTR,#distance
0026 120000      E     LCALL   ?C?LLDXDATA
0029 900000      R     MOV     DPTR,#rs
002C 120000      E     LCALL   ?C?PLDXDATA
002F E9                MOV     A,R1
0030 2410              ADD     A,#010H
0032 F9                MOV     R1,A
0033 EA                MOV     A,R2
0034 3400              ADDC    A,#00H
0036 FA                MOV     R2,A
0037 120000      E     LCALL   ?C?LSTPTR
                                           ; SOURCE LINE # 64
003A 900000      R     MOV     DPTR,#distance
003D 120000      E     LCALL   ?C?LLDXDATA
0040 900000      R     MOV     DPTR,#p2
0043 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 65
0046 7B01              MOV     R3,#01H
0048 7A00        R     MOV     R2,#HIGH p2
004A 7900        R     MOV     R1,#LOW p2
004C C003              PUSH    AR3
004E C002              PUSH    AR2
0050 C001              PUSH    AR1
0052 7B01              MOV     R3,#01H
0054 7A00        R     MOV     R2,#HIGH w2
0056 7900        R     MOV     R1,#LOW w2
0058 900000      E     MOV     DPTR,#?_wheels_from_polar?BYTE+03H
005B 120000      E     LCALL   ?C?PSTXDATA
005E D001              POP     AR1
0060 D002              POP     AR2
0062 D003              POP     AR3
0064 120000      E     LCALL   _wheels_from_polar
C51 COMPILER V9.03   ROBOT_SYSTEM                                                          05/13/2012 22:25:52 PAGE 6   

                                           ; SOURCE LINE # 67
0067 900000      R     MOV     DPTR,#w2
006A 120000      E     LCALL   ?C?LLDXDATA
006D 120000      E     LCALL   _pwm_left
                                           ; SOURCE LINE # 68
0070 900000      R     MOV     DPTR,#w2+04H
0073 120000      E     LCALL   ?C?LLDXDATA
0076 120000      E     LCALL   _pwm_right
                                           ; SOURCE LINE # 69
0079 22                RET     
             ; FUNCTION _rs_set_distance (END)

             ; FUNCTION _rs_set_angle_value (BEGIN)
                                           ; SOURCE LINE # 71
0000 900000      R     MOV     DPTR,#rs
0003 120000      E     LCALL   ?C?PSTXDATA
0006 900000      R     MOV     DPTR,#val
0009 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 72
                                           ; SOURCE LINE # 73
000C 900000      R     MOV     DPTR,#val
000F 120000      E     LCALL   ?C?LLDXDATA
0012 900000      R     MOV     DPTR,#rs
0015 120000      E     LCALL   ?C?PLDXDATA
0018 E9                MOV     A,R1
0019 2404              ADD     A,#04H
001B F9                MOV     R1,A
001C EA                MOV     A,R2
001D 3400              ADDC    A,#00H
001F FA                MOV     R2,A
0020 120000      E     LCALL   ?C?LSTPTR
                                           ; SOURCE LINE # 74
0023 22                RET     
             ; FUNCTION _rs_set_angle_value (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    387    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----      59
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
