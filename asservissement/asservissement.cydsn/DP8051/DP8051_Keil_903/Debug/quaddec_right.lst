C51 COMPILER V9.03   QUADDEC_RIGHT                                                         05/13/2012 22:25:54 PAGE 1   


C51 COMPILER V9.03, COMPILATION OF MODULE QUADDEC_RIGHT
OBJECT MODULE PLACED IN .\DP8051\DP8051_Keil_903\Debug\quaddec_right.obj
COMPILER INVOKED BY: C:\Program Files\Cypress\PSoC Creator\2.0\PSoC Creator\import\keil\pk51\9.03\C51\BIN\c51.exe .\Gene
                    -rated_Source\PSoC3\quaddec_right.c NOIV LARGE MODDP2 OMF2 VB(1) PR(.\DP8051\DP8051_Keil_903\Debug\quaddec_right.lst) CD 
                    -DB NOIP OT(2,SIZE) INCDIR(Generated_Source\PSoC3) OJ(.\DP8051\DP8051_Keil_903\Debug\quaddec_right.obj)

line level    source

   1          /*******************************************************************************
   2          * File Name: quaddec_right.c  
   3          * Version 1.50
   4          *
   5          * Description:
   6          *  This file provides the source code to the API for the Quadrature Decoder
   7          *  component.
   8          *
   9          * Note:
  10          *  None.
  11          *   
  12          ********************************************************************************
  13          * Copyright 2008-2010, Cypress Semiconductor Corporation.  All rights reserved.
  14          * You may use this file only in accordance with the license, terms, conditions, 
  15          * disclaimers, and limitations in the end user license agreement accompanying 
  16          * the software package with which this file was provided.
  17          *******************************************************************************/
  18          
  19          #include "CyLib.h"
  20          #include "quaddec_right.h"
  21          
  22          #if(quaddec_right_COUNTER_SIZE == 32u)
  23              extern volatile int32 quaddec_right_count32SoftPart;    
  24          #endif /*quaddec_right_COUNTER_SIZE == 32u*/
  25          
  26          uint8 quaddec_right_initVar = 0u;
  27          
  28          
  29          /*******************************************************************************
  30          * Function Name: quaddec_right_Init
  31          ********************************************************************************
  32          *
  33          * Summary:   
  34          *  Inits/Restores default QuadDec configuration provided with customizer.
  35          *
  36          * Parameters:  
  37          *  None.
  38          *
  39          * Return: 
  40          *  None.
  41          *
  42          *******************************************************************************/
  43          void quaddec_right_Init(void) 
  44          {      
  45   1          #if (quaddec_right_COUNTER_SIZE == 32u)
  46   1            
  47   1              /* Disable Interrupt. */
  48   1              CyIntDisable(quaddec_right_ISR_NUMBER);
  49   1              
  50   1              /* Set the ISR to point to the quaddec_right_isr Interrupt. */
  51   1              CyIntSetVector(quaddec_right_ISR_NUMBER, quaddec_right_ISR);
  52   1              
  53   1              /* Set the priority. */
C51 COMPILER V9.03   QUADDEC_RIGHT                                                         05/13/2012 22:25:54 PAGE 2   

  54   1              CyIntSetPriority(quaddec_right_ISR_NUMBER, quaddec_right_ISR_PRIORITY);       
  55   1              
  56   1          #endif /* quaddec_right_COUNTER_SIZE == 32u */    
  57   1      }
  58          
  59          
  60          /*******************************************************************************
  61          * Function Name: quaddec_right_Enable
  62          ********************************************************************************
  63          *
  64          * Summary:   
  65          *  This function enable interrupts from Component and also enable Component's 
  66          *  isr for 32-bit counter.
  67          *
  68          * Parameters:  
  69          *  None.
  70          *
  71          * Return: 
  72          *  None.
  73          *
  74          *******************************************************************************/
  75          void quaddec_right_Enable(void) 
  76          {
  77   1          uint8 enableInterrupts = 0u;
  78   1          
  79   1          quaddec_right_SetInterruptMask(quaddec_right_INIT_INT_MASK);
  80   1          
  81   1          enableInterrupts = CyEnterCriticalSection();
  82   1          
  83   1          /* Enable interrupts from Statusi register */
  84   1          quaddec_right_SR_AUX_CONTROL |= quaddec_right_INTERRUPTS_ENABLE;
  85   1          
  86   1          CyExitCriticalSection(enableInterrupts);
  87   1          
  88   1          #if (quaddec_right_COUNTER_SIZE == 32u)
  89   1              /* Enable Component interrupts */
  90   1              CyIntEnable(quaddec_right_ISR_NUMBER);
  91   1          #endif /* quaddec_right_COUNTER_SIZE == 32u */
  92   1      }
  93          
  94          
  95          /*******************************************************************************
  96          * Function Name: quaddec_right_Start
  97          ********************************************************************************
  98          *
  99          * Summary:
 100          *  Initializes UDBs and other relevant hardware. 
 101          *  Resets counter to 0, enables or disables all relevant interrupts.
 102          *  Starts monitoring the inputs and counting.
 103          *
 104          * Parameters:  
 105          *  None.
 106          *
 107          * Return: 
 108          *  None.
 109          *
 110          * Global variables:
 111          *  quaddec_right_initVar - used to check initial configuration, modified on 
 112          *  first function call.
 113          *
 114          * Reentrant:
 115          *  No.
C51 COMPILER V9.03   QUADDEC_RIGHT                                                         05/13/2012 22:25:54 PAGE 3   

 116          *
 117          *******************************************************************************/
 118          void quaddec_right_Start(void)
 119          {  
 120   1          #if (quaddec_right_COUNTER_SIZE == 8u)
                  
                      quaddec_right_Cnt8_Start();
                      quaddec_right_Cnt8_WriteCounter(quaddec_right_COUNTER_INIT_VALUE);
                      
                  #else /* (quaddec_right_COUNTER_SIZE == 16u) || (quaddec_right_COUNTER_SIZE == 32u) */
 126   1          
 127   1              quaddec_right_Cnt16_Start();
 128   1              quaddec_right_Cnt16_WriteCounter(quaddec_right_COUNTER_INIT_VALUE);
 129   1              
 130   1          #endif /* quaddec_right_COUNTER_SIZE == 8u */        
 131   1          
 132   1          if(quaddec_right_initVar == 0u)
 133   1          {
 134   2              quaddec_right_Init();
 135   2              quaddec_right_initVar = 1u;
 136   2          }        
 137   1      
 138   1          quaddec_right_Enable();
 139   1      }
 140          
 141          
 142          /*******************************************************************************
 143          * Function Name: quaddec_right_Stop
 144          ********************************************************************************
 145          *
 146          * Summary:
 147          *  Turns off UDBs and other relevant hardware.
 148          *
 149          * Parameters:  
 150          *  None.  
 151          *
 152          * Return: 
 153          *  None.
 154          *
 155          *******************************************************************************/
 156          void quaddec_right_Stop(void) 
 157          {                        
 158   1          uint8 enableInterrupts = 0u;
 159   1          
 160   1          #if (quaddec_right_COUNTER_SIZE == 8u)
                      quaddec_right_Cnt8_Stop();
                  #else /* (quaddec_right_COUNTER_SIZE == 16u) || (quaddec_right_COUNTER_SIZE == 32u) */
 163   1              quaddec_right_Cnt16_Stop();                                          /* counter disable */
 164   1          #endif /* (quaddec_right_COUNTER_SIZE == 8u) */
 165   1          
 166   1          enableInterrupts = CyEnterCriticalSection();
 167   1          
 168   1          /* Disable interrupts interrupts from Statusi register */
 169   1          quaddec_right_SR_AUX_CONTROL &= ~quaddec_right_INTERRUPTS_ENABLE;
 170   1          
 171   1          CyExitCriticalSection(enableInterrupts);
 172   1          
 173   1          #if (quaddec_right_COUNTER_SIZE == 32u)
 174   1              CyIntDisable(quaddec_right_ISR_NUMBER);                              /* interrupt disable */
 175   1          #endif /* quaddec_right_COUNTER_SIZE == 32u */
 176   1      }
 177          
C51 COMPILER V9.03   QUADDEC_RIGHT                                                         05/13/2012 22:25:54 PAGE 4   

 178          
 179          /*******************************************************************************
 180          * Function Name: quaddec_right_GetCounter
 181          ********************************************************************************
 182          *
 183          * Summary:
 184          *  Reports the current value of the counter.
 185          *
 186          * Parameters:  
 187          *  None.  
 188          *
 189          * Return: 
 190          *  The counter value. Return type is signed and per 
 191          *  the counter size setting. A positive value indicates 
 192          *  clockwise movement (B before A).
 193          *
 194          * Global variables:
 195          *  quaddec_right_count32SoftPart - used to get hi 16 bit for current value 
 196          *  of the 32-bit counter, when Counter size equal 32-bit.
 197          *
 198          *******************************************************************************/
 199          int32 quaddec_right_GetCounter(void) 
 200          {
 201   1          int32 count;
 202   1          uint16 tmpCnt;   
 203   1          
 204   1          #if (quaddec_right_COUNTER_SIZE == 32u)  
 205   1          
 206   1              int16 hwCount;   
 207   1              
 208   1          #endif /* quaddec_right_COUNTER_SIZE == 32u */
 209   1          
 210   1          #if (quaddec_right_COUNTER_SIZE == 8u)
                  
                      tmpCnt = quaddec_right_Cnt8_ReadCounter();
                      count = tmpCnt ^ 0x80u;
                      
                  #endif /* quaddec_right_COUNTER_SIZE == 8u */
 216   1          
 217   1          #if (quaddec_right_COUNTER_SIZE == 16u)
                  
                      tmpCnt = quaddec_right_Cnt16_ReadCounter();
                      count = tmpCnt ^ 0x8000u;    
                      
                  #endif /* quaddec_right_COUNTER_SIZE == 16u */ 
 223   1          
 224   1          #if (quaddec_right_COUNTER_SIZE == 32u)
 225   1          
 226   1              CyIntDisable(quaddec_right_ISR_NUMBER);
 227   1              
 228   1              tmpCnt = quaddec_right_Cnt16_ReadCounter();
 229   1              hwCount = tmpCnt ^ 0x8000u;
 230   1              count = quaddec_right_count32SoftPart + hwCount;
 231   1              
 232   1              CyIntEnable(quaddec_right_ISR_NUMBER);
 233   1              
 234   1          #endif /* quaddec_right_COUNTER_SIZE == 32u */
 235   1              
 236   1          return(count);    
 237   1      }
 238          
 239          
C51 COMPILER V9.03   QUADDEC_RIGHT                                                         05/13/2012 22:25:54 PAGE 5   

 240          /*******************************************************************************
 241          * Function Name: quaddec_right_SetCounter
 242          ********************************************************************************
 243          *
 244          * Summary:
 245          *  Sets the current value of the counter.
 246          *
 247          * Parameters:  
 248          *  value:  The new value. Parameter type is signed and per the counter size  
 249          *  setting.  
 250          *
 251          * Return: 
 252          *  None.
 253          *
 254          * Global variables:
 255          *  quaddec_right_count32SoftPart - modified to set hi 16 bit for current value 
 256          *  of the 32-bit counter, when Counter size equal 32-bit.
 257          *
 258          * Reentrant:
 259          *  No.
 260          *
 261          *******************************************************************************/
 262          void quaddec_right_SetCounter(int32 value)
 263          {    
 264   1          #if ((quaddec_right_COUNTER_SIZE == 8u) || (quaddec_right_COUNTER_SIZE == 16u))        
                      uint16 count;         
                  #endif  /* (quaddec_right_COUNTER_SIZE == 8u) || (quaddec_right_COUNTER_SIZE == 16u) */   
 267   1          
 268   1          #if (quaddec_right_COUNTER_SIZE == 8u)     
                  
                      count = (value ^ 0x80u);
                      quaddec_right_Cnt8_WriteCounter(count);
                      
                  #endif  /* quaddec_right_COUNTER_SIZE == 8u */
 274   1          
 275   1          #if (quaddec_right_COUNTER_SIZE == 16u) 
                  
                      count = (value ^ 0x8000u);
                      quaddec_right_Cnt16_WriteCounter(count);
                      
                  #endif  /* quaddec_right_COUNTER_SIZE == 16u */
 281   1          
 282   1          #if (quaddec_right_COUNTER_SIZE == 32u)
 283   1          
 284   1              CyIntDisable(quaddec_right_ISR_NUMBER);
 285   1              
 286   1              quaddec_right_Cnt16_WriteCounter(0x8000u);
 287   1              quaddec_right_count32SoftPart = value;
 288   1              
 289   1              CyIntEnable(quaddec_right_ISR_NUMBER);
 290   1              
 291   1          #endif  /* quaddec_right_COUNTER_SIZE == 32u */
 292   1      }
 293          
 294          
 295          /*******************************************************************************
 296          * Function Name: quaddec_right_GetEvents
 297          ********************************************************************************
 298          * 
 299          * Summary:
 300          *   Reports the current status of events.
 301          *
C51 COMPILER V9.03   QUADDEC_RIGHT                                                         05/13/2012 22:25:54 PAGE 6   

 302          * Parameters:  
 303          *  None.  
 304          *
 305          * Return: 
 306          *  The events, as bits in an unsigned 8-bit value:
 307          *        Bit      Description
 308          *
 309          *        0        Counter overflow.
 310          *        1        Counter underflow.
 311          *        2        Counter reset due to index, if index input is used.
 312          *        3        Invalid A, B inputs state transition.
 313          *
 314          *******************************************************************************/
 315          uint8 quaddec_right_GetEvents(void) 
 316          {   
 317   1          return(quaddec_right_STATUS_REG & quaddec_right_INIT_INT_MASK);
 318   1      }
 319          
 320          
 321          /*******************************************************************************
 322          * Function Name: quaddec_right_SetInterruptMask
 323          ********************************************************************************
 324          *
 325          * Summary:
 326          *  Enables / disables interrupts due to the events. 
 327          *  For the 32-bit counter, the overflow, underflow and reset interrupts cannot 
 328          *  be disabled, these bits are ignored.
 329          *
 330          * Parameters:  
 331          *  mask:  Enable / disable bits in an 8-bit value,where 1 enables the interrupt. 
 332          *
 333          * Return: 
 334          *  None.
 335          *
 336          *******************************************************************************/
 337          void quaddec_right_SetInterruptMask(uint8 mask) 
 338          {
 339   1          #if (quaddec_right_COUNTER_SIZE == 32u)
 340   1          
 341   1              /* Underflow, Overflow and Reset interrupts for 32-bit Counter are always enable */
 342   1              mask |= (quaddec_right_COUNTER_OVERFLOW | quaddec_right_COUNTER_UNDERFLOW |
 343   1                       quaddec_right_COUNTER_RESET);
 344   1                       
 345   1          #endif /* quaddec_right_COUNTER_SIZE == 32u */
 346   1          
 347   1          quaddec_right_STATUS_MASK = mask;
 348   1      }
 349          
 350          
 351          /*******************************************************************************
 352          * Function Name: quaddec_right_GetInterruptMask
 353          ********************************************************************************
 354          * 
 355          * Summary:
 356          *  Reports the current interrupt mask settings.
 357          *
 358          * Parameters:  
 359          *  None.
 360          *
 361          * Return: 
 362          *  Enable / disable bits in an 8-bit value, where 1 enables the interrupt.
 363          *  For the 32-bit counter, the overflow and underflow enable bits are always 
C51 COMPILER V9.03   QUADDEC_RIGHT                                                         05/13/2012 22:25:54 PAGE 7   

 364          *  set.
 365          *
 366          *******************************************************************************/
 367          uint8 quaddec_right_GetInterruptMask(void) 
 368          {
 369   1          return(quaddec_right_STATUS_MASK & quaddec_right_INIT_INT_MASK);
 370   1      }
 371          
 372          
 373          /* [] END OF FILE */
C51 COMPILER V9.03   QUADDEC_RIGHT                                                         05/13/2012 22:25:54 PAGE 8   

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION quaddec_right_Init (BEGIN)
                                           ; SOURCE LINE # 43
                                           ; SOURCE LINE # 44
                                           ; SOURCE LINE # 48
0000 7F18              MOV     R7,#018H
0002 120000      E     LCALL   _?CyIntDisable
                                           ; SOURCE LINE # 51
0005 7C00        E     MOV     R4,#HIGH quaddec_right_ISR
0007 7D00        E     MOV     R5,#LOW quaddec_right_ISR
0009 7F18              MOV     R7,#018H
000B 120000      E     LCALL   _CyIntSetVector
                                           ; SOURCE LINE # 54
000E 7D07              MOV     R5,#07H
0010 7F18              MOV     R7,#018H
0012 120000      E     LCALL   _CyIntSetPriority
                                           ; SOURCE LINE # 57
0015 22                RET     
             ; FUNCTION quaddec_right_Init (END)

             ; FUNCTION quaddec_right_Enable (BEGIN)
                                           ; SOURCE LINE # 75
                                           ; SOURCE LINE # 76
                                           ; SOURCE LINE # 77
0000 900000      R     MOV     DPTR,#enableInterrupts
0003 E4                CLR     A
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 79
0005 7F0F              MOV     R7,#0FH
0007 120000      R     LCALL   _quaddec_right_SetInterruptMask
                                           ; SOURCE LINE # 81
000A 120000      E     LCALL   CyEnterCriticalSection
000D 900000      R     MOV     DPTR,#enableInterrupts
0010 EF                MOV     A,R7
0011 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 84
0012 906497            MOV     DPTR,#06497H
0015 E0                MOVX    A,@DPTR
0016 FF                MOV     R7,A
0017 EF                MOV     A,R7
0018 4410              ORL     A,#010H
001A FF                MOV     R7,A
001B EF                MOV     A,R7
001C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 86
001D 900000      R     MOV     DPTR,#enableInterrupts
0020 E0                MOVX    A,@DPTR
0021 FF                MOV     R7,A
0022 120000      E     LCALL   _CyExitCriticalSection
                                           ; SOURCE LINE # 90
0025 7F18              MOV     R7,#018H
0027 120000      E     LCALL   _?CyIntEnable
                                           ; SOURCE LINE # 92
002A 22                RET     
             ; FUNCTION quaddec_right_Enable (END)

             ; FUNCTION quaddec_right_Start (BEGIN)
                                           ; SOURCE LINE # 118
                                           ; SOURCE LINE # 119
                                           ; SOURCE LINE # 127
C51 COMPILER V9.03   QUADDEC_RIGHT                                                         05/13/2012 22:25:54 PAGE 9   

0000 120000      E     LCALL   quaddec_right_Cnt16_Start
                                           ; SOURCE LINE # 128
0003 7F00              MOV     R7,#00H
0005 7E80              MOV     R6,#080H
0007 120000      E     LCALL   _quaddec_right_Cnt16_WriteCounter
                                           ; SOURCE LINE # 132
000A 900000      R     MOV     DPTR,#quaddec_right_initVar
000D E0                MOVX    A,@DPTR
000E FF                MOV     R7,A
000F EF                MOV     A,R7
0010 7009              JNZ     ?C0003
                                           ; SOURCE LINE # 133
                                           ; SOURCE LINE # 134
0012 120000      R     LCALL   quaddec_right_Init
                                           ; SOURCE LINE # 135
0015 900000      R     MOV     DPTR,#quaddec_right_initVar
0018 7401              MOV     A,#01H
001A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 136
001B         ?C0003:
                                           ; SOURCE LINE # 138
001B 120000      R     LCALL   quaddec_right_Enable
                                           ; SOURCE LINE # 139
001E 22                RET     
             ; FUNCTION quaddec_right_Start (END)

             ; FUNCTION quaddec_right_Stop (BEGIN)
                                           ; SOURCE LINE # 156
                                           ; SOURCE LINE # 157
                                           ; SOURCE LINE # 158
0000 900000      R     MOV     DPTR,#enableInterrupts
0003 E4                CLR     A
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 163
0005 120000      E     LCALL   quaddec_right_Cnt16_Stop
                                           ; SOURCE LINE # 166
0008 120000      E     LCALL   CyEnterCriticalSection
000B 900000      R     MOV     DPTR,#enableInterrupts
000E EF                MOV     A,R7
000F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 169
0010 906497            MOV     DPTR,#06497H
0013 E0                MOVX    A,@DPTR
0014 FF                MOV     R7,A
0015 EF                MOV     A,R7
0016 54EF              ANL     A,#0EFH
0018 FF                MOV     R7,A
0019 EF                MOV     A,R7
001A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 171
001B 900000      R     MOV     DPTR,#enableInterrupts
001E E0                MOVX    A,@DPTR
001F FF                MOV     R7,A
0020 120000      E     LCALL   _CyExitCriticalSection
                                           ; SOURCE LINE # 174
0023 7F18              MOV     R7,#018H
0025 120000      E     LCALL   _?CyIntDisable
                                           ; SOURCE LINE # 176
0028 22                RET     
             ; FUNCTION quaddec_right_Stop (END)

             ; FUNCTION quaddec_right_GetCounter (BEGIN)
C51 COMPILER V9.03   QUADDEC_RIGHT                                                         05/13/2012 22:25:54 PAGE 10  

                                           ; SOURCE LINE # 199
                                           ; SOURCE LINE # 200
                                           ; SOURCE LINE # 226
0000 7F18              MOV     R7,#018H
0002 120000      E     LCALL   _?CyIntDisable
                                           ; SOURCE LINE # 228
0005 120000      E     LCALL   quaddec_right_Cnt16_ReadCounter
0008 900000      R     MOV     DPTR,#tmpCnt
000B EE                MOV     A,R6
000C F0                MOVX    @DPTR,A
000D A3                INC     DPTR
000E EF                MOV     A,R7
000F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 229
0010 900000      R     MOV     DPTR,#tmpCnt
0013 E0                MOVX    A,@DPTR
0014 FE                MOV     R6,A
0015 A3                INC     DPTR
0016 E0                MOVX    A,@DPTR
0017 FF                MOV     R7,A
0018 EE                MOV     A,R6
0019 6480              XRL     A,#080H
001B FE                MOV     R6,A
001C 900000      R     MOV     DPTR,#hwCount
001F EE                MOV     A,R6
0020 F0                MOVX    @DPTR,A
0021 A3                INC     DPTR
0022 EF                MOV     A,R7
0023 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 230
0024 900000      R     MOV     DPTR,#hwCount
0027 E0                MOVX    A,@DPTR
0028 FE                MOV     R6,A
0029 A3                INC     DPTR
002A E0                MOVX    A,@DPTR
002B FF                MOV     R7,A
002C EE                MOV     A,R6
002D 33                RLC     A
002E 95E0              SUBB    A,ACC
0030 FD                MOV     R5,A
0031 FC                MOV     R4,A
0032 900000      E     MOV     DPTR,#quaddec_right_count32SoftPart
0035 120000      E     LCALL   ?C?LLDXDATA0
0038 120000      E     LCALL   ?C?LADD
003B 900000      R     MOV     DPTR,#count
003E 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 232
0041 7F18              MOV     R7,#018H
0043 120000      E     LCALL   _?CyIntEnable
                                           ; SOURCE LINE # 236
0046 900000      R     MOV     DPTR,#count
0049 120000      E     LCALL   ?C?LLDXDATA
                                           ; SOURCE LINE # 237
004C         ?C0006:
004C 22                RET     
             ; FUNCTION quaddec_right_GetCounter (END)

             ; FUNCTION _quaddec_right_SetCounter (BEGIN)
                                           ; SOURCE LINE # 262
0000 900000      R     MOV     DPTR,#value
0003 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 263
C51 COMPILER V9.03   QUADDEC_RIGHT                                                         05/13/2012 22:25:54 PAGE 11  

                                           ; SOURCE LINE # 284
0006 7F18              MOV     R7,#018H
0008 120000      E     LCALL   _?CyIntDisable
                                           ; SOURCE LINE # 286
000B 7F00              MOV     R7,#00H
000D 7E80              MOV     R6,#080H
000F 120000      E     LCALL   _quaddec_right_Cnt16_WriteCounter
                                           ; SOURCE LINE # 287
0012 900000      R     MOV     DPTR,#value
0015 120000      E     LCALL   ?C?LLDXDATA
0018 900000      E     MOV     DPTR,#quaddec_right_count32SoftPart
001B 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 289
001E 7F18              MOV     R7,#018H
0020 120000      E     LCALL   _?CyIntEnable
                                           ; SOURCE LINE # 292
0023 22                RET     
             ; FUNCTION _quaddec_right_SetCounter (END)

             ; FUNCTION quaddec_right_GetEvents (BEGIN)
                                           ; SOURCE LINE # 315
                                           ; SOURCE LINE # 316
                                           ; SOURCE LINE # 317
0000 906467            MOV     DPTR,#06467H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 540F              ANL     A,#0FH
0008 FF                MOV     R7,A
                                           ; SOURCE LINE # 318
0009         ?C0008:
0009 22                RET     
             ; FUNCTION quaddec_right_GetEvents (END)

             ; FUNCTION _quaddec_right_SetInterruptMask (BEGIN)
                                           ; SOURCE LINE # 337
0000 900000      R     MOV     DPTR,#mask
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 338
                                           ; SOURCE LINE # 342
0005 900000      R     MOV     DPTR,#mask
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B 4407              ORL     A,#07H
000D FF                MOV     R7,A
000E 900000      R     MOV     DPTR,#mask
0011 EF                MOV     A,R7
0012 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 347
0013 900000      R     MOV     DPTR,#mask
0016 E0                MOVX    A,@DPTR
0017 FF                MOV     R7,A
0018 906487            MOV     DPTR,#06487H
001B EF                MOV     A,R7
001C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 348
001D 22                RET     
             ; FUNCTION _quaddec_right_SetInterruptMask (END)

             ; FUNCTION quaddec_right_GetInterruptMask (BEGIN)
C51 COMPILER V9.03   QUADDEC_RIGHT                                                         05/13/2012 22:25:54 PAGE 12  

                                           ; SOURCE LINE # 367
                                           ; SOURCE LINE # 368
                                           ; SOURCE LINE # 369
0000 906487            MOV     DPTR,#06487H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 540F              ANL     A,#0FH
0008 FF                MOV     R7,A
                                           ; SOURCE LINE # 370
0009         ?C0010:
0009 22                RET     
             ; FUNCTION quaddec_right_GetInterruptMask (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    300    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      1      15
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
