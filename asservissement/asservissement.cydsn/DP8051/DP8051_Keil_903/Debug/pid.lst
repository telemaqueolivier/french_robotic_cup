C51 COMPILER V9.03   PID                                                                   05/13/2012 22:25:52 PAGE 1   


C51 COMPILER V9.03, COMPILATION OF MODULE PID
OBJECT MODULE PLACED IN .\DP8051\DP8051_Keil_903\Debug\pid.obj
COMPILER INVOKED BY: C:\Program Files\Cypress\PSoC Creator\2.0\PSoC Creator\import\keil\pk51\9.03\C51\BIN\c51.exe .\pid.
                    -c NOIV LARGE MODDP2 OMF2 VB(1) PR(.\DP8051\DP8051_Keil_903\Debug\pid.lst) CD DB NOIP OT(2,SIZE) INCDIR(Generated_Source\
                    -PSoC3) OJ(.\DP8051\DP8051_Keil_903\Debug\pid.obj)

line level    source

   1          /*  
   2           *  Copyright Droids Corporation, Microb Technology, Eirbot (2005), Projet & Tech' (2008-2009)
   3           * 
   4           *  This program is free software; you can redistribute it and/or modify
   5           *  it under the terms of the GNU General Public License as published by
   6           *  the Free Software Foundation; either version 2 of the License, or
   7           *  (at your option) any later version.
   8           *
   9           *  This program is distributed in the hope that it will be useful,
  10           *  but WITHOUT ANY WARRANTY; without even the implied warranty of
  11           *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12           *  GNU General Public License for more details.
  13           *
  14           *  You should have received a copy of the GNU General Public License
  15           *  along with this program; if not, write to the Free Software
  16           *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  17           *
  18           *  Olivier MATZ <zer0@droids-corp.org> 
  19           *      Fay??al GUENNAR <f.guennar@gmail.com>
  20           */
  21           
  22          #include "pid.h"
  23          #include <string.h>
  24          
  25          /** La fonction \a pid_init initialise les champs de la structure point??e par \a p a 0 except?? le champ
  26           *  \a gain_P qui est mis ?? 1.
  27           *  \param p : pointeur vers une structure pid_filter ?? initialiser.
  28           */
  29           
  30          void pid_init(struct pid_filter* p)
  31          {
  32   1          memset(p, 0, sizeof(*p));
  33   1          p->gain_P = 1 ;
  34   1      }
  35          
  36          /** La fonction \a pid_set_gains met ?? jour les coefficients PID de la structure point??e par \a p aux va
             -leurs \a gp, \a gi, \a gd.
  37           *  \param p : structure de type \a pid_filter ?? mettre ?? jour.
  38           *  \param gp : gain proportionnel
  39           *  \param gi : gain int16_t??gral
  40           *  \param gd : gain d??riv??
  41           */ 
  42           
  43          void pid_set_gains(struct pid_filter* p, int32_t gp, int32_t gi, int32_t gd)
  44          {
  45   1        //dgi();
  46   1          p->gain_P  = gp;
  47   1          p->gain_I  = gi;
  48   1          p->gain_D  = gd;
  49   1              p->integral = 0;
  50   1        // egi();
  51   1      }
  52          
C51 COMPILER V9.03   PID                                                                   05/13/2012 22:25:52 PAGE 2   

  53          /*void pid_set_maximums(struct pid_filter *p, int32_t max_in, int32_t max_I, int32_t max_out)
  54          {
  55          // dgi();
  56              p->max_in  = max_in;
  57              p->max_I   = max_I;
  58              p->max_out = max_out;
  59          //  egi();
  60          }*/
  61          
  62          void pid_set_out_shift(struct pid_filter* p, char out_shift)
  63          {
  64   1       // dgi();
  65   1          p->out_shift = out_shift;
  66   1       //  egi();
  67   1      }
  68          
  69          /** La fonction \a pid_do_filter ??labore la commande ?? envoyer au robot, cette commande est :
  70           *  \image html Formule_PID.png
  71           *  \param p : pointeur vers une structure de type pid_filter contenant les param??tres du correcteur PID
  72           *  \param in : erreur actuelle 
  73           *  \return command : la commande ?? envoyer au robot
  74           */
  75          int32_t pid_do_filter(struct pid_filter* p, int32_t in)
  76          {
  77   1          int32_t derivate ;
  78   1          int32_t command ;
  79   1      
  80   1          /*
  81   1           * integral = integral precedente + valeur actuelle
  82   1           */
  83   1      
  84   1          /* derivee                                                             */
  85   1          /*             f(t+h) - f(t)        avec f(t+h) = valeur actuelle  */
  86   1          /*  derivee = -------------              f(t)   = valeur precedente */
  87   1          /*                    h                                          */
  88   1          /* donc derivee = erreur actuelle - erreur precedente                  */
  89   1          derivate = in - p->prev_in;
  90   1      
  91   1          /* saturation de l'entree... cela influence l'integrale */
  92   1              //supprimer si pas de saturation d??finie.
  93   1              //sinon,rendre syst??matique
  94   1          /*if (p->max_in)
  95   1              S_MAX(in, p->max_in) ;*/
  96   1      
  97   1          p->integral += in;
  98   1      
  99   1          /*if (p->max_I)
 100   1              S_MAX(p->integral, p->max_I) ;*/
 101   1      
 102   1          /* la commande = P.coef_P + I.coef_I + D.coef_D */
 103   1           command =  (int32_t)(in * p->gain_P) +
 104   1              (int32_t)(p->integral * p->gain_I) +
 105   1              (int32_t)(derivate * p->gain_D) ;
 106   1      
 107   1      
 108   1      
 109   1          if(command < 0)
 110   1              command = -(-command >> p->out_shift);
 111   1          else
 112   1              command = command >> p->out_shift;
 113   1      
 114   1          /*if (p->max_out)
C51 COMPILER V9.03   PID                                                                   05/13/2012 22:25:52 PAGE 3   

 115   1              S_MAX (command, p->max_out) ;*/
 116   1      
 117   1      
 118   1          // sauvegarde de l'erreur actuelle (pour le prochain calcul de l'erreur)
 119   1          p->prev_in = in ;
 120   1          p->prev_D = derivate ;
 121   1          p->prev_out = command ;
 122   1      
 123   1          return command;
 124   1      }
C51 COMPILER V9.03   PID                                                                   05/13/2012 22:25:52 PAGE 4   

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION _pid_init (BEGIN)
                                           ; SOURCE LINE # 30
0000 900000      R     MOV     DPTR,#p
0003 120000      E     LCALL   ?C?PSTXDATA
                                           ; SOURCE LINE # 31
                                           ; SOURCE LINE # 32
0006 7E00              MOV     R6,#00H
0008 7F1D              MOV     R7,#01DH
000A 7D00              MOV     R5,#00H
000C 900000      R     MOV     DPTR,#p
000F 120000      E     LCALL   ?C?PLDXDATA
0012 120000      E     LCALL   ?C?MEMSET
                                           ; SOURCE LINE # 33
0015 7F01              MOV     R7,#01H
0017 7E00              MOV     R6,#00H
0019 7D00              MOV     R5,#00H
001B 7C00              MOV     R4,#00H
001D 900000      R     MOV     DPTR,#p
0020 120000      E     LCALL   ?C?PLDXDATA
0023 120000      E     LCALL   ?C?LSTPTR
                                           ; SOURCE LINE # 34
0026 22                RET     
             ; FUNCTION _pid_init (END)

             ; FUNCTION _pid_set_gains (BEGIN)
                                           ; SOURCE LINE # 43
0000 900000      R     MOV     DPTR,#p
0003 120000      E     LCALL   ?C?PSTXDATA
0006 900000      R     MOV     DPTR,#gp
0009 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 44
                                           ; SOURCE LINE # 46
000C 900000      R     MOV     DPTR,#gp
000F 120000      E     LCALL   ?C?LLDXDATA
0012 900000      R     MOV     DPTR,#p
0015 120000      E     LCALL   ?C?PLDXDATA
0018 120000      E     LCALL   ?C?LSTPTR
                                           ; SOURCE LINE # 47
001B 900000      R     MOV     DPTR,#gi
001E 120000      E     LCALL   ?C?LLDXDATA
0021 900000      R     MOV     DPTR,#p
0024 120000      E     LCALL   ?C?PLDXDATA
0027 E9                MOV     A,R1
0028 2404              ADD     A,#04H
002A F9                MOV     R1,A
002B EA                MOV     A,R2
002C 3400              ADDC    A,#00H
002E FA                MOV     R2,A
002F 120000      E     LCALL   ?C?LSTPTR
                                           ; SOURCE LINE # 48
0032 900000      R     MOV     DPTR,#gd
0035 120000      E     LCALL   ?C?LLDXDATA
0038 900000      R     MOV     DPTR,#p
003B 120000      E     LCALL   ?C?PLDXDATA
003E E9                MOV     A,R1
003F 2408              ADD     A,#08H
0041 F9                MOV     R1,A
0042 EA                MOV     A,R2
0043 3400              ADDC    A,#00H
C51 COMPILER V9.03   PID                                                                   05/13/2012 22:25:52 PAGE 5   

0045 FA                MOV     R2,A
0046 120000      E     LCALL   ?C?LSTPTR
                                           ; SOURCE LINE # 49
0049 7F00              MOV     R7,#00H
004B 7E00              MOV     R6,#00H
004D 7D00              MOV     R5,#00H
004F 7C00              MOV     R4,#00H
0051 900000      R     MOV     DPTR,#p
0054 120000      E     LCALL   ?C?PLDXDATA
0057 E9                MOV     A,R1
0058 240D              ADD     A,#0DH
005A F9                MOV     R1,A
005B EA                MOV     A,R2
005C 3400              ADDC    A,#00H
005E FA                MOV     R2,A
005F 120000      E     LCALL   ?C?LSTPTR
                                           ; SOURCE LINE # 51
0062 22                RET     
             ; FUNCTION _pid_set_gains (END)

             ; FUNCTION _pid_set_out_shift (BEGIN)
                                           ; SOURCE LINE # 62
0000 900000      R     MOV     DPTR,#p
0003 120000      E     LCALL   ?C?PSTXDATA
0006 900000      R     MOV     DPTR,#out_shift
0009 ED                MOV     A,R5
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 63
                                           ; SOURCE LINE # 65
000B 900000      R     MOV     DPTR,#out_shift
000E E0                MOVX    A,@DPTR
000F FF                MOV     R7,A
0010 900000      R     MOV     DPTR,#p
0013 120000      E     LCALL   ?C?PLDXDATA
0016 E9                MOV     A,R1
0017 240C              ADD     A,#0CH
0019 F9                MOV     R1,A
001A EA                MOV     A,R2
001B 3400              ADDC    A,#00H
001D FA                MOV     R2,A
001E EF                MOV     A,R7
001F 120000      E     LCALL   ?C?CSTPTR
                                           ; SOURCE LINE # 67
0022 22                RET     
             ; FUNCTION _pid_set_out_shift (END)

             ; FUNCTION _pid_do_filter (BEGIN)
                                           ; SOURCE LINE # 75
0000 900000      R     MOV     DPTR,#p
0003 120000      E     LCALL   ?C?PSTXDATA
0006 900000      R     MOV     DPTR,#in
0009 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 76
                                           ; SOURCE LINE # 89
000C 900000      R     MOV     DPTR,#p
000F 120000      E     LCALL   ?C?PLDXDATA
0012 E9                MOV     A,R1
0013 2411              ADD     A,#011H
0015 F9                MOV     R1,A
0016 EA                MOV     A,R2
0017 3400              ADDC    A,#00H
0019 FA                MOV     R2,A
C51 COMPILER V9.03   PID                                                                   05/13/2012 22:25:52 PAGE 6   

001A 120000      E     LCALL   ?C?LLDPTR0
001D 900000      R     MOV     DPTR,#in
0020 120000      E     LCALL   ?C?LLDXDATA
0023 120000      E     LCALL   ?C?LSUB
0026 900000      R     MOV     DPTR,#derivate
0029 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 97
002C 900000      R     MOV     DPTR,#p
002F 120000      E     LCALL   ?C?PLDXDATA
0032 E9                MOV     A,R1
0033 240D              ADD     A,#0DH
0035 F9                MOV     R1,A
0036 EA                MOV     A,R2
0037 3400              ADDC    A,#00H
0039 FA                MOV     R2,A
003A C003              PUSH    AR3
003C C002              PUSH    AR2
003E C001              PUSH    AR1
0040 120000      E     LCALL   ?C?LLDPTR
0043 900000      R     MOV     DPTR,#in
0046 120000      E     LCALL   ?C?LLDXDATA0
0049 120000      E     LCALL   ?C?LADD
004C D001              POP     AR1
004E D002              POP     AR2
0050 D003              POP     AR3
0052 120000      E     LCALL   ?C?LSTPTR
                                           ; SOURCE LINE # 105
0055 900000      R     MOV     DPTR,#p
0058 120000      E     LCALL   ?C?PLDXDATA
005B E9                MOV     A,R1
005C 2404              ADD     A,#04H
005E F9                MOV     R1,A
005F EA                MOV     A,R2
0060 3400              ADDC    A,#00H
0062 FA                MOV     R2,A
0063 120000      E     LCALL   ?C?LLDPTR
0066 900000      R     MOV     DPTR,#p
0069 120000      E     LCALL   ?C?PLDXDATA
006C E9                MOV     A,R1
006D 240D              ADD     A,#0DH
006F F9                MOV     R1,A
0070 EA                MOV     A,R2
0071 3400              ADDC    A,#00H
0073 FA                MOV     R2,A
0074 120000      E     LCALL   ?C?LLDPTR0
0077 120000      E     LCALL   ?C?LMUL
007A C004              PUSH    AR4
007C C005              PUSH    AR5
007E C006              PUSH    AR6
0080 C007              PUSH    AR7
0082 900000      R     MOV     DPTR,#p
0085 120000      E     LCALL   ?C?PLDXDATA
0088 120000      E     LCALL   ?C?LLDPTR
008B 900000      R     MOV     DPTR,#in
008E 120000      E     LCALL   ?C?LLDXDATA0
0091 120000      E     LCALL   ?C?LMUL
0094 A804              MOV     R0,AR4
0096 A905              MOV     R1,AR5
0098 AA06              MOV     R2,AR6
009A AB07              MOV     R3,AR7
009C D007              POP     AR7
009E D006              POP     AR6
C51 COMPILER V9.03   PID                                                                   05/13/2012 22:25:52 PAGE 7   

00A0 D005              POP     AR5
00A2 D004              POP     AR4
00A4 120000      E     LCALL   ?C?LADD
00A7 C004              PUSH    AR4
00A9 C005              PUSH    AR5
00AB C006              PUSH    AR6
00AD C007              PUSH    AR7
00AF 900000      R     MOV     DPTR,#p
00B2 120000      E     LCALL   ?C?PLDXDATA
00B5 E9                MOV     A,R1
00B6 2408              ADD     A,#08H
00B8 F9                MOV     R1,A
00B9 EA                MOV     A,R2
00BA 3400              ADDC    A,#00H
00BC FA                MOV     R2,A
00BD 120000      E     LCALL   ?C?LLDPTR
00C0 900000      R     MOV     DPTR,#derivate
00C3 120000      E     LCALL   ?C?LLDXDATA0
00C6 120000      E     LCALL   ?C?LMUL
00C9 A804              MOV     R0,AR4
00CB A905              MOV     R1,AR5
00CD AA06              MOV     R2,AR6
00CF AB07              MOV     R3,AR7
00D1 D007              POP     AR7
00D3 D006              POP     AR6
00D5 D005              POP     AR5
00D7 D004              POP     AR4
00D9 120000      E     LCALL   ?C?LADD
00DC 900000      R     MOV     DPTR,#command
00DF 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 109
00E2 7F00              MOV     R7,#00H
00E4 7E00              MOV     R6,#00H
00E6 7D00              MOV     R5,#00H
00E8 7C00              MOV     R4,#00H
00EA 900000      R     MOV     DPTR,#command
00ED 120000      E     LCALL   ?C?LLDXDATA0
00F0 C3                CLR     C
00F1 120000      E     LCALL   ?C?SLCMP
00F4 502B              JNC     ?C0004
                                           ; SOURCE LINE # 110
00F6 900000      R     MOV     DPTR,#p
00F9 120000      E     LCALL   ?C?PLDXDATA
00FC E9                MOV     A,R1
00FD 240C              ADD     A,#0CH
00FF F9                MOV     R1,A
0100 EA                MOV     A,R2
0101 3400              ADDC    A,#00H
0103 FA                MOV     R2,A
0104 120000      E     LCALL   ?C?CLDPTR
0107 F9                MOV     R1,A
0108 900000      R     MOV     DPTR,#command
010B 120000      E     LCALL   ?C?LLDXDATA
010E 120000      E     LCALL   ?C?LNEG
0111 A801              MOV     R0,AR1
0113 120000      E     LCALL   ?C?SLSHR
0116 120000      E     LCALL   ?C?LNEG
0119 900000      R     MOV     DPTR,#command
011C 120000      E     LCALL   ?C?LSTXDATA
011F 8023              SJMP    ?C0005
0121         ?C0004:
                                           ; SOURCE LINE # 112
C51 COMPILER V9.03   PID                                                                   05/13/2012 22:25:52 PAGE 8   

0121 900000      R     MOV     DPTR,#command
0124 120000      E     LCALL   ?C?LLDXDATA
0127 900000      R     MOV     DPTR,#p
012A 120000      E     LCALL   ?C?PLDXDATA
012D E9                MOV     A,R1
012E 240C              ADD     A,#0CH
0130 F9                MOV     R1,A
0131 EA                MOV     A,R2
0132 3400              ADDC    A,#00H
0134 FA                MOV     R2,A
0135 120000      E     LCALL   ?C?CLDPTR
0138 F9                MOV     R1,A
0139 A801              MOV     R0,AR1
013B 120000      E     LCALL   ?C?SLSHR
013E 900000      R     MOV     DPTR,#command
0141 120000      E     LCALL   ?C?LSTXDATA
0144         ?C0005:
                                           ; SOURCE LINE # 119
0144 900000      R     MOV     DPTR,#in
0147 120000      E     LCALL   ?C?LLDXDATA
014A 900000      R     MOV     DPTR,#p
014D 120000      E     LCALL   ?C?PLDXDATA
0150 E9                MOV     A,R1
0151 2411              ADD     A,#011H
0153 F9                MOV     R1,A
0154 EA                MOV     A,R2
0155 3400              ADDC    A,#00H
0157 FA                MOV     R2,A
0158 120000      E     LCALL   ?C?LSTPTR
                                           ; SOURCE LINE # 120
015B 900000      R     MOV     DPTR,#derivate
015E 120000      E     LCALL   ?C?LLDXDATA
0161 900000      R     MOV     DPTR,#p
0164 120000      E     LCALL   ?C?PLDXDATA
0167 E9                MOV     A,R1
0168 2415              ADD     A,#015H
016A F9                MOV     R1,A
016B EA                MOV     A,R2
016C 3400              ADDC    A,#00H
016E FA                MOV     R2,A
016F 120000      E     LCALL   ?C?LSTPTR
                                           ; SOURCE LINE # 121
0172 900000      R     MOV     DPTR,#command
0175 120000      E     LCALL   ?C?LLDXDATA
0178 900000      R     MOV     DPTR,#p
017B 120000      E     LCALL   ?C?PLDXDATA
017E E9                MOV     A,R1
017F 2419              ADD     A,#019H
0181 F9                MOV     R1,A
0182 EA                MOV     A,R2
0183 3400              ADDC    A,#00H
0185 FA                MOV     R2,A
0186 120000      E     LCALL   ?C?LSTPTR
                                           ; SOURCE LINE # 123
0189 900000      R     MOV     DPTR,#command
018C 120000      E     LCALL   ?C?LLDXDATA
                                           ; SOURCE LINE # 124
018F         ?C0006:
018F 22                RET     
             ; FUNCTION _pid_do_filter (END)


C51 COMPILER V9.03   PID                                                                   05/13/2012 22:25:52 PAGE 9   


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    573    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----      37
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
